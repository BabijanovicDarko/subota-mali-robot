
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  00001b5e  00001bf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000145  00800170  00800170  00001c62  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00001cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001516  00000000  00000000  00001ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000721  00000000  00000000  000033ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000143d  00000000  00000000  00003b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000073c  00000000  00000000  00004f48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ea  00000000  00000000  00005684  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ee4  00000000  00000000  00005d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00006c52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b2 c7       	rjmp	.+3940   	; 0xf96 <__vector_12>
      32:	00 00       	nop
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	b6 c0       	rjmp	.+364    	; 0x1b6 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ee e5       	ldi	r30, 0x5E	; 94
      a8:	fb e1       	ldi	r31, 0x1B	; 27
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a0 37       	cpi	r26, 0x70	; 112
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	22 e0       	ldi	r18, 0x02	; 2
      bc:	a0 e7       	ldi	r26, 0x70	; 112
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a5 3b       	cpi	r26, 0xB5	; 181
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 ad 0d 	jmp	0x1b5a	; 0x1b5a <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
#include "odometry.h"
#include "actuators.h"
#include "sides.h"

int main()
{
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
	system_init();
      da:	ac d7       	rcall	.+3928   	; 0x1034 <system_init>
	
	while(1)
	{
		purpleside();
      dc:	a1 d6       	rcall	.+3394   	; 0xe20 <purpleside>
	}
      de:	fe cf       	rjmp	.-4      	; 0xdc <main+0xa>

000000e0 <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
      e0:	0f 93       	push	r16
      e2:	1f 93       	push	r17
      e4:	cf 93       	push	r28
      e6:	df 93       	push	r29
      e8:	00 d0       	rcall	.+0      	; 0xea <servo_init+0xa>
      ea:	cd b7       	in	r28, 0x3d	; 61
      ec:	de b7       	in	r29, 0x3e	; 62
      ee:	9a 83       	std	Y+2, r25	; 0x02
      f0:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
      f2:	8d e2       	ldi	r24, 0x2D	; 45
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	2d e2       	ldi	r18, 0x2D	; 45
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	f9 01       	movw	r30, r18
      fc:	20 81       	ld	r18, Z
      fe:	28 63       	ori	r18, 0x38	; 56
     100:	fc 01       	movw	r30, r24
     102:	20 83       	st	Z, r18
	
	TCNT3 = 0;
     104:	84 e9       	ldi	r24, 0x94	; 148
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	fc 01       	movw	r30, r24
     10a:	11 82       	std	Z+1, r1	; 0x01
     10c:	10 82       	st	Z, r1
	OCR3A = 0;
     10e:	88 e9       	ldi	r24, 0x98	; 152
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	fc 01       	movw	r30, r24
     114:	11 82       	std	Z+1, r1	; 0x01
     116:	10 82       	st	Z, r1
	OCR3B = 0;
     118:	8a e9       	ldi	r24, 0x9A	; 154
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	fc 01       	movw	r30, r24
     11e:	11 82       	std	Z+1, r1	; 0x01
     120:	10 82       	st	Z, r1
	OCR3C = 0;
     122:	8c e9       	ldi	r24, 0x9C	; 156
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	fc 01       	movw	r30, r24
     128:	11 82       	std	Z+1, r1	; 0x01
     12a:	10 82       	st	Z, r1
	
	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     12c:	80 e9       	ldi	r24, 0x90	; 144
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	2e eb       	ldi	r18, 0xBE	; 190
     132:	fc 01       	movw	r30, r24
     134:	20 83       	st	Z, r18
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     136:	81 e9       	ldi	r24, 0x91	; 145
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	2a e1       	ldi	r18, 0x1A	; 26
     13c:	fc 01       	movw	r30, r24
     13e:	20 83       	st	Z, r18
	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5; 
     140:	06 e9       	ldi	r16, 0x96	; 150
     142:	10 e0       	ldi	r17, 0x00	; 0
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	9a 81       	ldd	r25, Y+2	; 0x02
     148:	cc 01       	movw	r24, r24
     14a:	a0 e0       	ldi	r26, 0x00	; 0
     14c:	b0 e0       	ldi	r27, 0x00	; 0
     14e:	bc 01       	movw	r22, r24
     150:	cd 01       	movw	r24, r26
     152:	0e 94 46 0b 	call	0x168c	; 0x168c <__floatunsisf>
     156:	dc 01       	movw	r26, r24
     158:	cb 01       	movw	r24, r22
     15a:	20 e0       	ldi	r18, 0x00	; 0
     15c:	30 e0       	ldi	r19, 0x00	; 0
     15e:	40 e0       	ldi	r20, 0x00	; 0
     160:	51 e4       	ldi	r21, 0x41	; 65
     162:	bc 01       	movw	r22, r24
     164:	cd 01       	movw	r24, r26
     166:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__mulsf3>
     16a:	dc 01       	movw	r26, r24
     16c:	cb 01       	movw	r24, r22
     16e:	9c 01       	movw	r18, r24
     170:	ad 01       	movw	r20, r26
     172:	60 e8       	ldi	r22, 0x80	; 128
     174:	76 e9       	ldi	r23, 0x96	; 150
     176:	88 e1       	ldi	r24, 0x18	; 24
     178:	9b e4       	ldi	r25, 0x4B	; 75
     17a:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__divsf3>
     17e:	dc 01       	movw	r26, r24
     180:	cb 01       	movw	r24, r22
     182:	20 e0       	ldi	r18, 0x00	; 0
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	40 e0       	ldi	r20, 0x00	; 0
     188:	5f e3       	ldi	r21, 0x3F	; 63
     18a:	bc 01       	movw	r22, r24
     18c:	cd 01       	movw	r24, r26
     18e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__addsf3>
     192:	dc 01       	movw	r26, r24
     194:	cb 01       	movw	r24, r22
     196:	bc 01       	movw	r22, r24
     198:	cd 01       	movw	r24, r26
     19a:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fixunssfsi>
     19e:	dc 01       	movw	r26, r24
     1a0:	cb 01       	movw	r24, r22
     1a2:	f8 01       	movw	r30, r16
     1a4:	91 83       	std	Z+1, r25	; 0x01
     1a6:	80 83       	st	Z, r24
}//END OF servo_init
     1a8:	0f 90       	pop	r0
     1aa:	0f 90       	pop	r0
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	1f 91       	pop	r17
     1b2:	0f 91       	pop	r16
     1b4:	08 95       	ret

000001b6 <__vector_18>:


unsigned char CAN_CheckRX(unsigned char nodeID)
{
	return rxCounter[nodeID - 1];
}
     1b6:	1f 92       	push	r1
     1b8:	0f 92       	push	r0
     1ba:	00 90 5f 00 	lds	r0, 0x005F
     1be:	0f 92       	push	r0
     1c0:	11 24       	eor	r1, r1
     1c2:	00 90 5b 00 	lds	r0, 0x005B
     1c6:	0f 92       	push	r0
     1c8:	2f 93       	push	r18
     1ca:	3f 93       	push	r19
     1cc:	4f 93       	push	r20
     1ce:	5f 93       	push	r21
     1d0:	8f 93       	push	r24
     1d2:	9f 93       	push	r25
     1d4:	ef 93       	push	r30
     1d6:	ff 93       	push	r31
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	00 d0       	rcall	.+0      	; 0x1de <__vector_18+0x28>
     1de:	00 d0       	rcall	.+0      	; 0x1e0 <__vector_18+0x2a>
     1e0:	cd b7       	in	r28, 0x3d	; 61
     1e2:	de b7       	in	r29, 0x3e	; 62
     1e4:	8d ee       	ldi	r24, 0xED	; 237
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	fc 01       	movw	r30, r24
     1ea:	80 81       	ld	r24, Z
     1ec:	8b 83       	std	Y+3, r24	; 0x03
     1ee:	19 82       	std	Y+1, r1	; 0x01
     1f0:	a4 c0       	rjmp	.+328    	; 0x33a <__vector_18+0x184>
     1f2:	8d ee       	ldi	r24, 0xED	; 237
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	29 81       	ldd	r18, Y+1	; 0x01
     1f8:	22 95       	swap	r18
     1fa:	20 7f       	andi	r18, 0xF0	; 240
     1fc:	fc 01       	movw	r30, r24
     1fe:	20 83       	st	Z, r18
     200:	8e ee       	ldi	r24, 0xEE	; 238
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	fc 01       	movw	r30, r24
     206:	80 81       	ld	r24, Z
     208:	82 95       	swap	r24
     20a:	86 95       	lsr	r24
     20c:	87 70       	andi	r24, 0x07	; 7
     20e:	88 2f       	mov	r24, r24
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	81 70       	andi	r24, 0x01	; 1
     214:	99 27       	eor	r25, r25
     216:	89 2b       	or	r24, r25
     218:	09 f4       	brne	.+2      	; 0x21c <__vector_18+0x66>
     21a:	70 c0       	rjmp	.+224    	; 0x2fc <__vector_18+0x146>
     21c:	8f ee       	ldi	r24, 0xEF	; 239
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	20 e8       	ldi	r18, 0x80	; 128
     222:	fc 01       	movw	r30, r24
     224:	20 83       	st	Z, r18
     226:	8e ee       	ldi	r24, 0xEE	; 238
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	2e ee       	ldi	r18, 0xEE	; 238
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	f9 01       	movw	r30, r18
     230:	20 81       	ld	r18, Z
     232:	2f 7d       	andi	r18, 0xDF	; 223
     234:	fc 01       	movw	r30, r24
     236:	20 83       	st	Z, r18
     238:	82 ef       	ldi	r24, 0xF2	; 242
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	fc 01       	movw	r30, r24
     23e:	80 81       	ld	r24, Z
     240:	82 95       	swap	r24
     242:	86 95       	lsr	r24
     244:	87 70       	andi	r24, 0x07	; 7
     246:	28 2f       	mov	r18, r24
     248:	83 ef       	ldi	r24, 0xF3	; 243
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	fc 01       	movw	r30, r24
     24e:	80 81       	ld	r24, Z
     250:	88 2f       	mov	r24, r24
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	88 0f       	add	r24, r24
     256:	99 1f       	adc	r25, r25
     258:	88 0f       	add	r24, r24
     25a:	99 1f       	adc	r25, r25
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	82 2b       	or	r24, r18
     262:	8c 83       	std	Y+4, r24	; 0x04
     264:	1a 82       	std	Y+2, r1	; 0x02
     266:	26 c0       	rjmp	.+76     	; 0x2b4 <__vector_18+0xfe>
     268:	8c 81       	ldd	r24, Y+4	; 0x04
     26a:	88 2f       	mov	r24, r24
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	81 50       	subi	r24, 0x01	; 1
     270:	90 48       	sbci	r25, 0x80	; 128
     272:	88 0f       	add	r24, r24
     274:	99 1f       	adc	r25, r25
     276:	80 59       	subi	r24, 0x90	; 144
     278:	9e 4f       	sbci	r25, 0xFE	; 254
     27a:	fc 01       	movw	r30, r24
     27c:	20 81       	ld	r18, Z
     27e:	31 81       	ldd	r19, Z+1	; 0x01
     280:	8c 81       	ldd	r24, Y+4	; 0x04
     282:	88 2f       	mov	r24, r24
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	8c 57       	subi	r24, 0x7C	; 124
     28a:	9e 4f       	sbci	r25, 0xFE	; 254
     28c:	fc 01       	movw	r30, r24
     28e:	80 81       	ld	r24, Z
     290:	48 2f       	mov	r20, r24
     292:	50 e0       	ldi	r21, 0x00	; 0
     294:	8a 81       	ldd	r24, Y+2	; 0x02
     296:	88 2f       	mov	r24, r24
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	84 0f       	add	r24, r20
     29c:	95 1f       	adc	r25, r21
     29e:	82 0f       	add	r24, r18
     2a0:	93 1f       	adc	r25, r19
     2a2:	2a ef       	ldi	r18, 0xFA	; 250
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	f9 01       	movw	r30, r18
     2a8:	20 81       	ld	r18, Z
     2aa:	fc 01       	movw	r30, r24
     2ac:	20 83       	st	Z, r18
     2ae:	8a 81       	ldd	r24, Y+2	; 0x02
     2b0:	8f 5f       	subi	r24, 0xFF	; 255
     2b2:	8a 83       	std	Y+2, r24	; 0x02
     2b4:	8a 81       	ldd	r24, Y+2	; 0x02
     2b6:	88 30       	cpi	r24, 0x08	; 8
     2b8:	b8 f2       	brcs	.-82     	; 0x268 <__vector_18+0xb2>
     2ba:	8c 81       	ldd	r24, Y+4	; 0x04
     2bc:	88 2f       	mov	r24, r24
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	01 97       	sbiw	r24, 0x01	; 1
     2c2:	8c 57       	subi	r24, 0x7C	; 124
     2c4:	9e 4f       	sbci	r25, 0xFE	; 254
     2c6:	fc 01       	movw	r30, r24
     2c8:	20 81       	ld	r18, Z
     2ca:	2f 5f       	subi	r18, 0xFF	; 255
     2cc:	fc 01       	movw	r30, r24
     2ce:	20 83       	st	Z, r18
     2d0:	25 30       	cpi	r18, 0x05	; 5
     2d2:	41 f4       	brne	.+16     	; 0x2e4 <__vector_18+0x12e>
     2d4:	8c 81       	ldd	r24, Y+4	; 0x04
     2d6:	88 2f       	mov	r24, r24
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	8c 57       	subi	r24, 0x7C	; 124
     2de:	9e 4f       	sbci	r25, 0xFE	; 254
     2e0:	fc 01       	movw	r30, r24
     2e2:	10 82       	st	Z, r1
     2e4:	8c 81       	ldd	r24, Y+4	; 0x04
     2e6:	88 2f       	mov	r24, r24
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	88 56       	subi	r24, 0x68	; 104
     2ee:	9e 4f       	sbci	r25, 0xFE	; 254
     2f0:	fc 01       	movw	r30, r24
     2f2:	20 81       	ld	r18, Z
     2f4:	2f 5f       	subi	r18, 0xFF	; 255
     2f6:	fc 01       	movw	r30, r24
     2f8:	20 83       	st	Z, r18
     2fa:	23 c0       	rjmp	.+70     	; 0x342 <__vector_18+0x18c>
     2fc:	8e ee       	ldi	r24, 0xEE	; 238
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	fc 01       	movw	r30, r24
     302:	80 81       	ld	r24, Z
     304:	82 95       	swap	r24
     306:	86 95       	lsr	r24
     308:	86 95       	lsr	r24
     30a:	83 70       	andi	r24, 0x03	; 3
     30c:	88 2f       	mov	r24, r24
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	81 70       	andi	r24, 0x01	; 1
     312:	99 27       	eor	r25, r25
     314:	89 2b       	or	r24, r25
     316:	71 f0       	breq	.+28     	; 0x334 <__vector_18+0x17e>
     318:	8f ee       	ldi	r24, 0xEF	; 239
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	fc 01       	movw	r30, r24
     31e:	10 82       	st	Z, r1
     320:	8e ee       	ldi	r24, 0xEE	; 238
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	2e ee       	ldi	r18, 0xEE	; 238
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	f9 01       	movw	r30, r18
     32a:	20 81       	ld	r18, Z
     32c:	2f 7b       	andi	r18, 0xBF	; 191
     32e:	fc 01       	movw	r30, r24
     330:	20 83       	st	Z, r18
     332:	07 c0       	rjmp	.+14     	; 0x342 <__vector_18+0x18c>
     334:	89 81       	ldd	r24, Y+1	; 0x01
     336:	8f 5f       	subi	r24, 0xFF	; 255
     338:	89 83       	std	Y+1, r24	; 0x01
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	8f 30       	cpi	r24, 0x0F	; 15
     33e:	08 f4       	brcc	.+2      	; 0x342 <__vector_18+0x18c>
     340:	58 cf       	rjmp	.-336    	; 0x1f2 <__vector_18+0x3c>
     342:	8d ee       	ldi	r24, 0xED	; 237
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	2b 81       	ldd	r18, Y+3	; 0x03
     348:	fc 01       	movw	r30, r24
     34a:	20 83       	st	Z, r18
     34c:	8a ed       	ldi	r24, 0xDA	; 218
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	2a ed       	ldi	r18, 0xDA	; 218
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	f9 01       	movw	r30, r18
     356:	20 81       	ld	r18, Z
     358:	fc 01       	movw	r30, r24
     35a:	20 83       	st	Z, r18
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	ff 91       	pop	r31
     36a:	ef 91       	pop	r30
     36c:	9f 91       	pop	r25
     36e:	8f 91       	pop	r24
     370:	5f 91       	pop	r21
     372:	4f 91       	pop	r20
     374:	3f 91       	pop	r19
     376:	2f 91       	pop	r18
     378:	0f 90       	pop	r0
     37a:	00 92 5b 00 	sts	0x005B, r0
     37e:	0f 90       	pop	r0
     380:	00 92 5f 00 	sts	0x005F, r0
     384:	0f 90       	pop	r0
     386:	1f 90       	pop	r1
     388:	18 95       	reti

0000038a <CAN_InitModule>:
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	00 d0       	rcall	.+0      	; 0x390 <CAN_InitModule+0x6>
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
     394:	88 ed       	ldi	r24, 0xD8	; 216
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	21 e0       	ldi	r18, 0x01	; 1
     39a:	fc 01       	movw	r30, r24
     39c:	20 83       	st	Z, r18
     39e:	19 82       	std	Y+1, r1	; 0x01
     3a0:	3e c0       	rjmp	.+124    	; 0x41e <CAN_InitModule+0x94>
     3a2:	8d ee       	ldi	r24, 0xED	; 237
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	29 81       	ldd	r18, Y+1	; 0x01
     3a8:	22 95       	swap	r18
     3aa:	20 7f       	andi	r18, 0xF0	; 240
     3ac:	fc 01       	movw	r30, r24
     3ae:	20 83       	st	Z, r18
     3b0:	8e ee       	ldi	r24, 0xEE	; 238
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	fc 01       	movw	r30, r24
     3b6:	10 82       	st	Z, r1
     3b8:	8f ee       	ldi	r24, 0xEF	; 239
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	fc 01       	movw	r30, r24
     3be:	10 82       	st	Z, r1
     3c0:	83 ef       	ldi	r24, 0xF3	; 243
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	fc 01       	movw	r30, r24
     3c6:	10 82       	st	Z, r1
     3c8:	82 ef       	ldi	r24, 0xF2	; 242
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	fc 01       	movw	r30, r24
     3ce:	10 82       	st	Z, r1
     3d0:	81 ef       	ldi	r24, 0xF1	; 241
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	fc 01       	movw	r30, r24
     3d6:	10 82       	st	Z, r1
     3d8:	80 ef       	ldi	r24, 0xF0	; 240
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	fc 01       	movw	r30, r24
     3de:	10 82       	st	Z, r1
     3e0:	87 ef       	ldi	r24, 0xF7	; 247
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	fc 01       	movw	r30, r24
     3e6:	10 82       	st	Z, r1
     3e8:	86 ef       	ldi	r24, 0xF6	; 246
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	fc 01       	movw	r30, r24
     3ee:	10 82       	st	Z, r1
     3f0:	85 ef       	ldi	r24, 0xF5	; 245
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	fc 01       	movw	r30, r24
     3f6:	10 82       	st	Z, r1
     3f8:	84 ef       	ldi	r24, 0xF4	; 244
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	fc 01       	movw	r30, r24
     3fe:	10 82       	st	Z, r1
     400:	1a 82       	std	Y+2, r1	; 0x02
     402:	07 c0       	rjmp	.+14     	; 0x412 <CAN_InitModule+0x88>
     404:	8a ef       	ldi	r24, 0xFA	; 250
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	fc 01       	movw	r30, r24
     40a:	10 82       	st	Z, r1
     40c:	8a 81       	ldd	r24, Y+2	; 0x02
     40e:	8f 5f       	subi	r24, 0xFF	; 255
     410:	8a 83       	std	Y+2, r24	; 0x02
     412:	8a 81       	ldd	r24, Y+2	; 0x02
     414:	88 30       	cpi	r24, 0x08	; 8
     416:	b0 f3       	brcs	.-20     	; 0x404 <CAN_InitModule+0x7a>
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	8f 5f       	subi	r24, 0xFF	; 255
     41c:	89 83       	std	Y+1, r24	; 0x01
     41e:	89 81       	ldd	r24, Y+1	; 0x01
     420:	8f 30       	cpi	r24, 0x0F	; 15
     422:	08 f4       	brcc	.+2      	; 0x426 <CAN_InitModule+0x9c>
     424:	be cf       	rjmp	.-132    	; 0x3a2 <CAN_InitModule+0x18>
     426:	88 ed       	ldi	r24, 0xD8	; 216
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	22 e0       	ldi	r18, 0x02	; 2
     42c:	fc 01       	movw	r30, r24
     42e:	20 83       	st	Z, r18
     430:	82 ee       	ldi	r24, 0xE2	; 226
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	21 e0       	ldi	r18, 0x01	; 1
     436:	fc 01       	movw	r30, r24
     438:	20 83       	st	Z, r18
     43a:	83 ee       	ldi	r24, 0xE3	; 227
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	28 e0       	ldi	r18, 0x08	; 8
     440:	fc 01       	movw	r30, r24
     442:	20 83       	st	Z, r18
     444:	84 ee       	ldi	r24, 0xE4	; 228
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	2e e5       	ldi	r18, 0x5E	; 94
     44a:	fc 01       	movw	r30, r24
     44c:	20 83       	st	Z, r18
     44e:	85 ee       	ldi	r24, 0xE5	; 229
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	fc 01       	movw	r30, r24
     454:	10 82       	st	Z, r1
     456:	8b ed       	ldi	r24, 0xDB	; 219
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	20 eb       	ldi	r18, 0xB0	; 176
     45c:	fc 01       	movw	r30, r24
     45e:	20 83       	st	Z, r18
     460:	8f ed       	ldi	r24, 0xDF	; 223
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	2f e7       	ldi	r18, 0x7F	; 127
     466:	fc 01       	movw	r30, r24
     468:	20 83       	st	Z, r18
     46a:	8e ed       	ldi	r24, 0xDE	; 222
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	2f ef       	ldi	r18, 0xFF	; 255
     470:	fc 01       	movw	r30, r24
     472:	20 83       	st	Z, r18
     474:	78 94       	sei
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <CAN_InitRxMob>:
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	00 d0       	rcall	.+0      	; 0x486 <CAN_InitRxMob+0x6>
     486:	00 d0       	rcall	.+0      	; 0x488 <CAN_InitRxMob+0x8>
     488:	cd b7       	in	r28, 0x3d	; 61
     48a:	de b7       	in	r29, 0x3e	; 62
     48c:	9c 83       	std	Y+4, r25	; 0x04
     48e:	8b 83       	std	Y+3, r24	; 0x03
     490:	8d ee       	ldi	r24, 0xED	; 237
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	fc 01       	movw	r30, r24
     496:	80 81       	ld	r24, Z
     498:	8a 83       	std	Y+2, r24	; 0x02
     49a:	00 00       	nop
     49c:	89 ed       	ldi	r24, 0xD9	; 217
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	fc 01       	movw	r30, r24
     4a2:	80 81       	ld	r24, Z
     4a4:	82 95       	swap	r24
     4a6:	8f 70       	andi	r24, 0x0F	; 15
     4a8:	88 2f       	mov	r24, r24
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	81 70       	andi	r24, 0x01	; 1
     4ae:	99 27       	eor	r25, r25
     4b0:	89 2b       	or	r24, r25
     4b2:	a1 f7       	brne	.-24     	; 0x49c <CAN_InitRxMob+0x1c>
     4b4:	89 ed       	ldi	r24, 0xD9	; 217
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	fc 01       	movw	r30, r24
     4ba:	80 81       	ld	r24, Z
     4bc:	86 95       	lsr	r24
     4be:	86 95       	lsr	r24
     4c0:	86 95       	lsr	r24
     4c2:	88 2f       	mov	r24, r24
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	81 70       	andi	r24, 0x01	; 1
     4c8:	99 27       	eor	r25, r25
     4ca:	89 2b       	or	r24, r25
     4cc:	39 f7       	brne	.-50     	; 0x49c <CAN_InitRxMob+0x1c>
     4ce:	19 82       	std	Y+1, r1	; 0x01
     4d0:	49 c0       	rjmp	.+146    	; 0x564 <CAN_InitRxMob+0xe4>
     4d2:	8d ee       	ldi	r24, 0xED	; 237
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	29 81       	ldd	r18, Y+1	; 0x01
     4d8:	22 95       	swap	r18
     4da:	20 7f       	andi	r18, 0xF0	; 240
     4dc:	fc 01       	movw	r30, r24
     4de:	20 83       	st	Z, r18
     4e0:	8f ee       	ldi	r24, 0xEF	; 239
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	fc 01       	movw	r30, r24
     4e6:	80 81       	ld	r24, Z
     4e8:	82 95       	swap	r24
     4ea:	86 95       	lsr	r24
     4ec:	86 95       	lsr	r24
     4ee:	83 70       	andi	r24, 0x03	; 3
     4f0:	88 23       	and	r24, r24
     4f2:	21 f0       	breq	.+8      	; 0x4fc <CAN_InitRxMob+0x7c>
     4f4:	89 81       	ldd	r24, Y+1	; 0x01
     4f6:	8f 5f       	subi	r24, 0xFF	; 255
     4f8:	89 83       	std	Y+1, r24	; 0x01
     4fa:	34 c0       	rjmp	.+104    	; 0x564 <CAN_InitRxMob+0xe4>
     4fc:	8f ee       	ldi	r24, 0xEF	; 239
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	2f e0       	ldi	r18, 0x0F	; 15
     502:	fc 01       	movw	r30, r24
     504:	20 83       	st	Z, r18
     506:	83 ef       	ldi	r24, 0xF3	; 243
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	2b 81       	ldd	r18, Y+3	; 0x03
     50c:	3c 81       	ldd	r19, Y+4	; 0x04
     50e:	33 27       	eor	r19, r19
     510:	36 95       	lsr	r19
     512:	27 95       	ror	r18
     514:	36 95       	lsr	r19
     516:	27 95       	ror	r18
     518:	36 95       	lsr	r19
     51a:	27 95       	ror	r18
     51c:	fc 01       	movw	r30, r24
     51e:	20 83       	st	Z, r18
     520:	82 ef       	ldi	r24, 0xF2	; 242
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	2b 81       	ldd	r18, Y+3	; 0x03
     526:	22 95       	swap	r18
     528:	22 0f       	add	r18, r18
     52a:	20 7e       	andi	r18, 0xE0	; 224
     52c:	fc 01       	movw	r30, r24
     52e:	20 83       	st	Z, r18
     530:	86 ef       	ldi	r24, 0xF6	; 246
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	20 ee       	ldi	r18, 0xE0	; 224
     536:	fc 01       	movw	r30, r24
     538:	20 83       	st	Z, r18
     53a:	87 ef       	ldi	r24, 0xF7	; 247
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	2f ef       	ldi	r18, 0xFF	; 255
     540:	fc 01       	movw	r30, r24
     542:	20 83       	st	Z, r18
     544:	8f ee       	ldi	r24, 0xEF	; 239
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	2f ee       	ldi	r18, 0xEF	; 239
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	f9 01       	movw	r30, r18
     54e:	20 81       	ld	r18, Z
     550:	20 68       	ori	r18, 0x80	; 128
     552:	fc 01       	movw	r30, r24
     554:	20 83       	st	Z, r18
     556:	8d ee       	ldi	r24, 0xED	; 237
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	2a 81       	ldd	r18, Y+2	; 0x02
     55c:	fc 01       	movw	r30, r24
     55e:	20 83       	st	Z, r18
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	0a c0       	rjmp	.+20     	; 0x578 <CAN_InitRxMob+0xf8>
     564:	89 81       	ldd	r24, Y+1	; 0x01
     566:	8f 30       	cpi	r24, 0x0F	; 15
     568:	08 f4       	brcc	.+2      	; 0x56c <CAN_InitRxMob+0xec>
     56a:	b3 cf       	rjmp	.-154    	; 0x4d2 <CAN_InitRxMob+0x52>
     56c:	8d ee       	ldi	r24, 0xED	; 237
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	2a 81       	ldd	r18, Y+2	; 0x02
     572:	fc 01       	movw	r30, r24
     574:	20 83       	st	Z, r18
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	08 95       	ret

00000586 <CAN_Init>:
     586:	0f 93       	push	r16
     588:	1f 93       	push	r17
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	00 d0       	rcall	.+0      	; 0x590 <CAN_Init+0xa>
     590:	cd b7       	in	r28, 0x3d	; 61
     592:	de b7       	in	r29, 0x3e	; 62
     594:	8a 83       	std	Y+2, r24	; 0x02
     596:	f9 de       	rcall	.-526    	; 0x38a <CAN_InitModule>
     598:	19 82       	std	Y+1, r1	; 0x01
     59a:	2f c0       	rjmp	.+94     	; 0x5fa <CAN_Init+0x74>
     59c:	89 81       	ldd	r24, Y+1	; 0x01
     59e:	88 2f       	mov	r24, r24
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	6d df       	rcall	.-294    	; 0x480 <CAN_InitRxMob>
     5a6:	89 81       	ldd	r24, Y+1	; 0x01
     5a8:	88 2f       	mov	r24, r24
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	88 0f       	add	r24, r24
     5ae:	99 1f       	adc	r25, r25
     5b0:	8c 01       	movw	r16, r24
     5b2:	00 59       	subi	r16, 0x90	; 144
     5b4:	1e 4f       	sbci	r17, 0xFE	; 254
     5b6:	61 e0       	ldi	r22, 0x01	; 1
     5b8:	70 e0       	ldi	r23, 0x00	; 0
     5ba:	85 e0       	ldi	r24, 0x05	; 5
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 5f 0c 	call	0x18be	; 0x18be <calloc>
     5c2:	f8 01       	movw	r30, r16
     5c4:	91 83       	std	Z+1, r25	; 0x01
     5c6:	80 83       	st	Z, r24
     5c8:	89 81       	ldd	r24, Y+1	; 0x01
     5ca:	88 2f       	mov	r24, r24
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	29 81       	ldd	r18, Y+1	; 0x01
     5d0:	22 2f       	mov	r18, r18
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	49 81       	ldd	r20, Y+1	; 0x01
     5d6:	44 2f       	mov	r20, r20
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	48 56       	subi	r20, 0x68	; 104
     5de:	5e 4f       	sbci	r21, 0xFE	; 254
     5e0:	fa 01       	movw	r30, r20
     5e2:	60 83       	st	Z, r22
     5e4:	22 57       	subi	r18, 0x72	; 114
     5e6:	3e 4f       	sbci	r19, 0xFE	; 254
     5e8:	f9 01       	movw	r30, r18
     5ea:	60 83       	st	Z, r22
     5ec:	8c 57       	subi	r24, 0x7C	; 124
     5ee:	9e 4f       	sbci	r25, 0xFE	; 254
     5f0:	fc 01       	movw	r30, r24
     5f2:	60 83       	st	Z, r22
     5f4:	89 81       	ldd	r24, Y+1	; 0x01
     5f6:	8f 5f       	subi	r24, 0xFF	; 255
     5f8:	89 83       	std	Y+1, r24	; 0x01
     5fa:	99 81       	ldd	r25, Y+1	; 0x01
     5fc:	8a 81       	ldd	r24, Y+2	; 0x02
     5fe:	98 17       	cp	r25, r24
     600:	68 f2       	brcs	.-102    	; 0x59c <CAN_Init+0x16>
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	08 95       	ret

00000610 <CAN_Read>:


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	00 d0       	rcall	.+0      	; 0x616 <CAN_Read+0x6>
     616:	00 d0       	rcall	.+0      	; 0x618 <CAN_Read+0x8>
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
     61c:	9b 83       	std	Y+3, r25	; 0x03
     61e:	8a 83       	std	Y+2, r24	; 0x02
     620:	6c 83       	std	Y+4, r22	; 0x04
    unsigned char i;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
     622:	00 00       	nop
     624:	8c 81       	ldd	r24, Y+4	; 0x04
     626:	88 2f       	mov	r24, r24
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	88 56       	subi	r24, 0x68	; 104
     62e:	9e 4f       	sbci	r25, 0xFE	; 254
     630:	fc 01       	movw	r30, r24
     632:	80 81       	ld	r24, Z
     634:	88 23       	and	r24, r24
     636:	b1 f3       	breq	.-20     	; 0x624 <CAN_Read+0x14>

	for(i = 0; i < 8; ++i)
     638:	19 82       	std	Y+1, r1	; 0x01
     63a:	2c c0       	rjmp	.+88     	; 0x694 <CAN_Read+0x84>
		*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
     63c:	89 81       	ldd	r24, Y+1	; 0x01
     63e:	88 2f       	mov	r24, r24
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	2a 81       	ldd	r18, Y+2	; 0x02
     644:	3b 81       	ldd	r19, Y+3	; 0x03
     646:	82 0f       	add	r24, r18
     648:	93 1f       	adc	r25, r19
     64a:	2c 81       	ldd	r18, Y+4	; 0x04
     64c:	22 2f       	mov	r18, r18
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	21 50       	subi	r18, 0x01	; 1
     652:	30 48       	sbci	r19, 0x80	; 128
     654:	22 0f       	add	r18, r18
     656:	33 1f       	adc	r19, r19
     658:	20 59       	subi	r18, 0x90	; 144
     65a:	3e 4f       	sbci	r19, 0xFE	; 254
     65c:	f9 01       	movw	r30, r18
     65e:	40 81       	ld	r20, Z
     660:	51 81       	ldd	r21, Z+1	; 0x01
     662:	2c 81       	ldd	r18, Y+4	; 0x04
     664:	22 2f       	mov	r18, r18
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	21 50       	subi	r18, 0x01	; 1
     66a:	31 09       	sbc	r19, r1
     66c:	22 57       	subi	r18, 0x72	; 114
     66e:	3e 4f       	sbci	r19, 0xFE	; 254
     670:	f9 01       	movw	r30, r18
     672:	20 81       	ld	r18, Z
     674:	62 2f       	mov	r22, r18
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	29 81       	ldd	r18, Y+1	; 0x01
     67a:	22 2f       	mov	r18, r18
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	26 0f       	add	r18, r22
     680:	37 1f       	adc	r19, r23
     682:	24 0f       	add	r18, r20
     684:	35 1f       	adc	r19, r21
     686:	f9 01       	movw	r30, r18
     688:	20 81       	ld	r18, Z
     68a:	fc 01       	movw	r30, r24
     68c:	20 83       	st	Z, r18
{
    unsigned char i;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
     68e:	89 81       	ldd	r24, Y+1	; 0x01
     690:	8f 5f       	subi	r24, 0xFF	; 255
     692:	89 83       	std	Y+1, r24	; 0x01
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	88 30       	cpi	r24, 0x08	; 8
     698:	88 f2       	brcs	.-94     	; 0x63c <CAN_Read+0x2c>
		*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
     69a:	8c 81       	ldd	r24, Y+4	; 0x04
     69c:	88 2f       	mov	r24, r24
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	01 97       	sbiw	r24, 0x01	; 1
     6a2:	82 57       	subi	r24, 0x72	; 114
     6a4:	9e 4f       	sbci	r25, 0xFE	; 254
     6a6:	fc 01       	movw	r30, r24
     6a8:	20 81       	ld	r18, Z
     6aa:	2f 5f       	subi	r18, 0xFF	; 255
     6ac:	fc 01       	movw	r30, r24
     6ae:	20 83       	st	Z, r18
     6b0:	25 30       	cpi	r18, 0x05	; 5
     6b2:	41 f4       	brne	.+16     	; 0x6c4 <CAN_Read+0xb4>
		*(rxRdIndex + sendingNodeID - 1) = 0;
     6b4:	8c 81       	ldd	r24, Y+4	; 0x04
     6b6:	88 2f       	mov	r24, r24
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	01 97       	sbiw	r24, 0x01	; 1
     6bc:	82 57       	subi	r24, 0x72	; 114
     6be:	9e 4f       	sbci	r25, 0xFE	; 254
     6c0:	fc 01       	movw	r30, r24
     6c2:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
     6c4:	8c 81       	ldd	r24, Y+4	; 0x04
     6c6:	88 2f       	mov	r24, r24
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	01 97       	sbiw	r24, 0x01	; 1
     6cc:	9c 01       	movw	r18, r24
     6ce:	28 56       	subi	r18, 0x68	; 104
     6d0:	3e 4f       	sbci	r19, 0xFE	; 254
     6d2:	f9 01       	movw	r30, r18
     6d4:	20 81       	ld	r18, Z
     6d6:	21 50       	subi	r18, 0x01	; 1
     6d8:	88 56       	subi	r24, 0x68	; 104
     6da:	9e 4f       	sbci	r25, 0xFE	; 254
     6dc:	fc 01       	movw	r30, r24
     6de:	20 83       	st	Z, r18

	return 0;
     6e0:	80 e0       	ldi	r24, 0x00	; 0
}
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	0f 90       	pop	r0
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	08 95       	ret

000006f0 <CAN_Write>:


char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	00 d0       	rcall	.+0      	; 0x6f6 <CAN_Write+0x6>
     6f6:	00 d0       	rcall	.+0      	; 0x6f8 <CAN_Write+0x8>
     6f8:	00 d0       	rcall	.+0      	; 0x6fa <CAN_Write+0xa>
     6fa:	cd b7       	in	r28, 0x3d	; 61
     6fc:	de b7       	in	r29, 0x3e	; 62
     6fe:	9d 83       	std	Y+5, r25	; 0x05
     700:	8c 83       	std	Y+4, r24	; 0x04
     702:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     704:	00 00       	nop
     706:	89 ed       	ldi	r24, 0xD9	; 217
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	fc 01       	movw	r30, r24
     70c:	80 81       	ld	r24, Z
     70e:	82 95       	swap	r24
     710:	8f 70       	andi	r24, 0x0F	; 15
     712:	88 2f       	mov	r24, r24
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	81 70       	andi	r24, 0x01	; 1
     718:	99 27       	eor	r25, r25
     71a:	89 2b       	or	r24, r25
     71c:	a1 f7       	brne	.-24     	; 0x706 <CAN_Write+0x16>
     71e:	89 ed       	ldi	r24, 0xD9	; 217
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	fc 01       	movw	r30, r24
     724:	80 81       	ld	r24, Z
     726:	86 95       	lsr	r24
     728:	86 95       	lsr	r24
     72a:	86 95       	lsr	r24
     72c:	88 2f       	mov	r24, r24
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	81 70       	andi	r24, 0x01	; 1
     732:	99 27       	eor	r25, r25
     734:	89 2b       	or	r24, r25
     736:	39 f7       	brne	.-50     	; 0x706 <CAN_Write+0x16>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     738:	8d ee       	ldi	r24, 0xED	; 237
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	fc 01       	movw	r30, r24
     73e:	80 81       	ld	r24, Z
     740:	8b 83       	std	Y+3, r24	; 0x03

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     742:	1a 82       	std	Y+2, r1	; 0x02
     744:	15 c0       	rjmp	.+42     	; 0x770 <CAN_Write+0x80>
	{
		CANPAGE = ch << 4;
     746:	8d ee       	ldi	r24, 0xED	; 237
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	2a 81       	ldd	r18, Y+2	; 0x02
     74c:	22 95       	swap	r18
     74e:	20 7f       	andi	r18, 0xF0	; 240
     750:	fc 01       	movw	r30, r24
     752:	20 83       	st	Z, r18

		if(!(CANCDMOB >> 6))
     754:	8f ee       	ldi	r24, 0xEF	; 239
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	fc 01       	movw	r30, r24
     75a:	80 81       	ld	r24, Z
     75c:	82 95       	swap	r24
     75e:	86 95       	lsr	r24
     760:	86 95       	lsr	r24
     762:	83 70       	andi	r24, 0x03	; 3
     764:	88 23       	and	r24, r24
     766:	09 f4       	brne	.+2      	; 0x76a <CAN_Write+0x7a>
			break;
     768:	06 c0       	rjmp	.+12     	; 0x776 <CAN_Write+0x86>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     76a:	8a 81       	ldd	r24, Y+2	; 0x02
     76c:	8f 5f       	subi	r24, 0xFF	; 255
     76e:	8a 83       	std	Y+2, r24	; 0x02
     770:	8a 81       	ldd	r24, Y+2	; 0x02
     772:	8f 30       	cpi	r24, 0x0F	; 15
     774:	40 f3       	brcs	.-48     	; 0x746 <CAN_Write+0x56>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
     776:	8a 81       	ldd	r24, Y+2	; 0x02
     778:	8f 30       	cpi	r24, 0x0F	; 15
     77a:	11 f4       	brne	.+4      	; 0x780 <CAN_Write+0x90>
		return -1;
     77c:	8f ef       	ldi	r24, 0xFF	; 255
     77e:	39 c0       	rjmp	.+114    	; 0x7f2 <CAN_Write+0x102>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
     780:	82 ef       	ldi	r24, 0xF2	; 242
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	2e 81       	ldd	r18, Y+6	; 0x06
     786:	22 95       	swap	r18
     788:	22 0f       	add	r18, r18
     78a:	20 7e       	andi	r18, 0xE0	; 224
     78c:	fc 01       	movw	r30, r24
     78e:	20 83       	st	Z, r18
	CANIDT1 = (receivingNodeAddress) >> 3;
     790:	83 ef       	ldi	r24, 0xF3	; 243
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	2e 81       	ldd	r18, Y+6	; 0x06
     796:	26 95       	lsr	r18
     798:	26 95       	lsr	r18
     79a:	26 95       	lsr	r18
     79c:	fc 01       	movw	r30, r24
     79e:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;
     7a0:	8f ee       	ldi	r24, 0xEF	; 239
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	28 e0       	ldi	r18, 0x08	; 8
     7a6:	fc 01       	movw	r30, r24
     7a8:	20 83       	st	Z, r18

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     7aa:	19 82       	std	Y+1, r1	; 0x01
     7ac:	10 c0       	rjmp	.+32     	; 0x7ce <CAN_Write+0xde>
		CANMSG = data[i];
     7ae:	8a ef       	ldi	r24, 0xFA	; 250
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	29 81       	ldd	r18, Y+1	; 0x01
     7b4:	22 2f       	mov	r18, r18
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	4c 81       	ldd	r20, Y+4	; 0x04
     7ba:	5d 81       	ldd	r21, Y+5	; 0x05
     7bc:	24 0f       	add	r18, r20
     7be:	35 1f       	adc	r19, r21
     7c0:	f9 01       	movw	r30, r18
     7c2:	20 81       	ld	r18, Z
     7c4:	fc 01       	movw	r30, r24
     7c6:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     7c8:	89 81       	ldd	r24, Y+1	; 0x01
     7ca:	8f 5f       	subi	r24, 0xFF	; 255
     7cc:	89 83       	std	Y+1, r24	; 0x01
     7ce:	89 81       	ldd	r24, Y+1	; 0x01
     7d0:	88 30       	cpi	r24, 0x08	; 8
     7d2:	68 f3       	brcs	.-38     	; 0x7ae <CAN_Write+0xbe>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
     7d4:	8f ee       	ldi	r24, 0xEF	; 239
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	2f ee       	ldi	r18, 0xEF	; 239
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	f9 01       	movw	r30, r18
     7de:	20 81       	ld	r18, Z
     7e0:	20 64       	ori	r18, 0x40	; 64
     7e2:	fc 01       	movw	r30, r24
     7e4:	20 83       	st	Z, r18

	CANPAGE = tempPage;
     7e6:	8d ee       	ldi	r24, 0xED	; 237
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	2b 81       	ldd	r18, Y+3	; 0x03
     7ec:	fc 01       	movw	r30, r24
     7ee:	20 83       	st	Z, r18

	return 0;
     7f0:	80 e0       	ldi	r24, 0x00	; 0
}
     7f2:	26 96       	adiw	r28, 0x06	; 6
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	f8 94       	cli
     7f8:	de bf       	out	0x3e, r29	; 62
     7fa:	0f be       	out	0x3f, r0	; 63
     7fc:	cd bf       	out	0x3d, r28	; 61
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	08 95       	ret

00000804 <odometry_set_speed>:
	buffer[2] = distance & 0xFF;
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
		_delay_ms(50);

	return odometry_wait_until_done(callback);
}
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	cd b7       	in	r28, 0x3d	; 61
     80a:	de b7       	in	r29, 0x3e	; 62
     80c:	67 97       	sbiw	r28, 0x17	; 23
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	f8 94       	cli
     812:	de bf       	out	0x3e, r29	; 62
     814:	0f be       	out	0x3f, r0	; 63
     816:	cd bf       	out	0x3d, r28	; 61
     818:	8f 8b       	std	Y+23, r24	; 0x17
     81a:	80 91 a2 01 	lds	r24, 0x01A2
     81e:	9f 89       	ldd	r25, Y+23	; 0x17
     820:	98 17       	cp	r25, r24
     822:	09 f4       	brne	.+2      	; 0x826 <odometry_set_speed+0x22>
     824:	7b c0       	rjmp	.+246    	; 0x91c <odometry_set_speed+0x118>
     826:	86 e5       	ldi	r24, 0x56	; 86
     828:	8f 87       	std	Y+15, r24	; 0x0f
     82a:	8f 89       	ldd	r24, Y+23	; 0x17
     82c:	88 8b       	std	Y+16, r24	; 0x10
     82e:	6c c0       	rjmp	.+216    	; 0x908 <odometry_set_speed+0x104>
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	a8 e4       	ldi	r26, 0x48	; 72
     836:	b2 e4       	ldi	r27, 0x42	; 66
     838:	89 83       	std	Y+1, r24	; 0x01
     83a:	9a 83       	std	Y+2, r25	; 0x02
     83c:	ab 83       	std	Y+3, r26	; 0x03
     83e:	bc 83       	std	Y+4, r27	; 0x04
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	30 e4       	ldi	r19, 0x40	; 64
     844:	4c e1       	ldi	r20, 0x1C	; 28
     846:	55 e4       	ldi	r21, 0x45	; 69
     848:	69 81       	ldd	r22, Y+1	; 0x01
     84a:	7a 81       	ldd	r23, Y+2	; 0x02
     84c:	8b 81       	ldd	r24, Y+3	; 0x03
     84e:	9c 81       	ldd	r25, Y+4	; 0x04
     850:	d3 d7       	rcall	.+4006   	; 0x17f8 <__mulsf3>
     852:	dc 01       	movw	r26, r24
     854:	cb 01       	movw	r24, r22
     856:	8d 83       	std	Y+5, r24	; 0x05
     858:	9e 83       	std	Y+6, r25	; 0x06
     85a:	af 83       	std	Y+7, r26	; 0x07
     85c:	b8 87       	std	Y+8, r27	; 0x08
     85e:	20 e0       	ldi	r18, 0x00	; 0
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	40 e8       	ldi	r20, 0x80	; 128
     864:	5f e3       	ldi	r21, 0x3F	; 63
     866:	6d 81       	ldd	r22, Y+5	; 0x05
     868:	7e 81       	ldd	r23, Y+6	; 0x06
     86a:	8f 81       	ldd	r24, Y+7	; 0x07
     86c:	98 85       	ldd	r25, Y+8	; 0x08
     86e:	76 d6       	rcall	.+3308   	; 0x155c <__cmpsf2>
     870:	88 23       	and	r24, r24
     872:	2c f4       	brge	.+10     	; 0x87e <odometry_set_speed+0x7a>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	9a 87       	std	Y+10, r25	; 0x0a
     87a:	89 87       	std	Y+9, r24	; 0x09
     87c:	3b c0       	rjmp	.+118    	; 0x8f4 <odometry_set_speed+0xf0>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	3f ef       	ldi	r19, 0xFF	; 255
     882:	4f e7       	ldi	r20, 0x7F	; 127
     884:	57 e4       	ldi	r21, 0x47	; 71
     886:	6d 81       	ldd	r22, Y+5	; 0x05
     888:	7e 81       	ldd	r23, Y+6	; 0x06
     88a:	8f 81       	ldd	r24, Y+7	; 0x07
     88c:	98 85       	ldd	r25, Y+8	; 0x08
     88e:	b0 d7       	rcall	.+3936   	; 0x17f0 <__gesf2>
     890:	18 16       	cp	r1, r24
     892:	3c f5       	brge	.+78     	; 0x8e2 <odometry_set_speed+0xde>
     894:	20 e0       	ldi	r18, 0x00	; 0
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	40 e2       	ldi	r20, 0x20	; 32
     89a:	51 e4       	ldi	r21, 0x41	; 65
     89c:	69 81       	ldd	r22, Y+1	; 0x01
     89e:	7a 81       	ldd	r23, Y+2	; 0x02
     8a0:	8b 81       	ldd	r24, Y+3	; 0x03
     8a2:	9c 81       	ldd	r25, Y+4	; 0x04
     8a4:	a9 d7       	rcall	.+3922   	; 0x17f8 <__mulsf3>
     8a6:	dc 01       	movw	r26, r24
     8a8:	cb 01       	movw	r24, r22
     8aa:	bc 01       	movw	r22, r24
     8ac:	cd 01       	movw	r24, r26
     8ae:	c2 d6       	rcall	.+3460   	; 0x1634 <__fixunssfsi>
     8b0:	dc 01       	movw	r26, r24
     8b2:	cb 01       	movw	r24, r22
     8b4:	9a 87       	std	Y+10, r25	; 0x0a
     8b6:	89 87       	std	Y+9, r24	; 0x09
     8b8:	0f c0       	rjmp	.+30     	; 0x8d8 <odometry_set_speed+0xd4>
     8ba:	8a ef       	ldi	r24, 0xFA	; 250
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	9c 87       	std	Y+12, r25	; 0x0c
     8c0:	8b 87       	std	Y+11, r24	; 0x0b
     8c2:	8b 85       	ldd	r24, Y+11	; 0x0b
     8c4:	9c 85       	ldd	r25, Y+12	; 0x0c
     8c6:	01 97       	sbiw	r24, 0x01	; 1
     8c8:	f1 f7       	brne	.-4      	; 0x8c6 <odometry_set_speed+0xc2>
     8ca:	9c 87       	std	Y+12, r25	; 0x0c
     8cc:	8b 87       	std	Y+11, r24	; 0x0b
     8ce:	89 85       	ldd	r24, Y+9	; 0x09
     8d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	9a 87       	std	Y+10, r25	; 0x0a
     8d6:	89 87       	std	Y+9, r24	; 0x09
     8d8:	89 85       	ldd	r24, Y+9	; 0x09
     8da:	9a 85       	ldd	r25, Y+10	; 0x0a
     8dc:	89 2b       	or	r24, r25
     8de:	69 f7       	brne	.-38     	; 0x8ba <odometry_set_speed+0xb6>
     8e0:	13 c0       	rjmp	.+38     	; 0x908 <odometry_set_speed+0x104>
     8e2:	6d 81       	ldd	r22, Y+5	; 0x05
     8e4:	7e 81       	ldd	r23, Y+6	; 0x06
     8e6:	8f 81       	ldd	r24, Y+7	; 0x07
     8e8:	98 85       	ldd	r25, Y+8	; 0x08
     8ea:	a4 d6       	rcall	.+3400   	; 0x1634 <__fixunssfsi>
     8ec:	dc 01       	movw	r26, r24
     8ee:	cb 01       	movw	r24, r22
     8f0:	9a 87       	std	Y+10, r25	; 0x0a
     8f2:	89 87       	std	Y+9, r24	; 0x09
     8f4:	89 85       	ldd	r24, Y+9	; 0x09
     8f6:	9a 85       	ldd	r25, Y+10	; 0x0a
     8f8:	9e 87       	std	Y+14, r25	; 0x0e
     8fa:	8d 87       	std	Y+13, r24	; 0x0d
     8fc:	8d 85       	ldd	r24, Y+13	; 0x0d
     8fe:	9e 85       	ldd	r25, Y+14	; 0x0e
     900:	01 97       	sbiw	r24, 0x01	; 1
     902:	f1 f7       	brne	.-4      	; 0x900 <odometry_set_speed+0xfc>
     904:	9e 87       	std	Y+14, r25	; 0x0e
     906:	8d 87       	std	Y+13, r24	; 0x0d
     908:	ce 01       	movw	r24, r28
     90a:	0f 96       	adiw	r24, 0x0f	; 15
     90c:	63 ec       	ldi	r22, 0xC3	; 195
     90e:	f0 de       	rcall	.-544    	; 0x6f0 <CAN_Write>
     910:	88 23       	and	r24, r24
     912:	09 f0       	breq	.+2      	; 0x916 <odometry_set_speed+0x112>
     914:	8d cf       	rjmp	.-230    	; 0x830 <odometry_set_speed+0x2c>
     916:	8f 89       	ldd	r24, Y+23	; 0x17
     918:	80 93 a2 01 	sts	0x01A2, r24
     91c:	67 96       	adiw	r28, 0x17	; 23
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	f8 94       	cli
     922:	de bf       	out	0x3e, r29	; 62
     924:	0f be       	out	0x3f, r0	; 63
     926:	cd bf       	out	0x3d, r28	; 61
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	08 95       	ret

0000092e <odometry_query_position>:
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	cd b7       	in	r28, 0x3d	; 61
     934:	de b7       	in	r29, 0x3e	; 62
     936:	66 97       	sbiw	r28, 0x16	; 22
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	f8 94       	cli
     93c:	de bf       	out	0x3e, r29	; 62
     93e:	0f be       	out	0x3f, r0	; 63
     940:	cd bf       	out	0x3d, r28	; 61
     942:	80 e5       	ldi	r24, 0x50	; 80
     944:	8f 87       	std	Y+15, r24	; 0x0f
     946:	6c c0       	rjmp	.+216    	; 0xa20 <odometry_query_position+0xf2>
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a8 e4       	ldi	r26, 0x48	; 72
     94e:	b2 e4       	ldi	r27, 0x42	; 66
     950:	89 83       	std	Y+1, r24	; 0x01
     952:	9a 83       	std	Y+2, r25	; 0x02
     954:	ab 83       	std	Y+3, r26	; 0x03
     956:	bc 83       	std	Y+4, r27	; 0x04
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e4       	ldi	r19, 0x40	; 64
     95c:	4c e1       	ldi	r20, 0x1C	; 28
     95e:	55 e4       	ldi	r21, 0x45	; 69
     960:	69 81       	ldd	r22, Y+1	; 0x01
     962:	7a 81       	ldd	r23, Y+2	; 0x02
     964:	8b 81       	ldd	r24, Y+3	; 0x03
     966:	9c 81       	ldd	r25, Y+4	; 0x04
     968:	47 d7       	rcall	.+3726   	; 0x17f8 <__mulsf3>
     96a:	dc 01       	movw	r26, r24
     96c:	cb 01       	movw	r24, r22
     96e:	8d 83       	std	Y+5, r24	; 0x05
     970:	9e 83       	std	Y+6, r25	; 0x06
     972:	af 83       	std	Y+7, r26	; 0x07
     974:	b8 87       	std	Y+8, r27	; 0x08
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	40 e8       	ldi	r20, 0x80	; 128
     97c:	5f e3       	ldi	r21, 0x3F	; 63
     97e:	6d 81       	ldd	r22, Y+5	; 0x05
     980:	7e 81       	ldd	r23, Y+6	; 0x06
     982:	8f 81       	ldd	r24, Y+7	; 0x07
     984:	98 85       	ldd	r25, Y+8	; 0x08
     986:	ea d5       	rcall	.+3028   	; 0x155c <__cmpsf2>
     988:	88 23       	and	r24, r24
     98a:	2c f4       	brge	.+10     	; 0x996 <odometry_query_position+0x68>
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	9a 87       	std	Y+10, r25	; 0x0a
     992:	89 87       	std	Y+9, r24	; 0x09
     994:	3b c0       	rjmp	.+118    	; 0xa0c <odometry_query_position+0xde>
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	3f ef       	ldi	r19, 0xFF	; 255
     99a:	4f e7       	ldi	r20, 0x7F	; 127
     99c:	57 e4       	ldi	r21, 0x47	; 71
     99e:	6d 81       	ldd	r22, Y+5	; 0x05
     9a0:	7e 81       	ldd	r23, Y+6	; 0x06
     9a2:	8f 81       	ldd	r24, Y+7	; 0x07
     9a4:	98 85       	ldd	r25, Y+8	; 0x08
     9a6:	24 d7       	rcall	.+3656   	; 0x17f0 <__gesf2>
     9a8:	18 16       	cp	r1, r24
     9aa:	3c f5       	brge	.+78     	; 0x9fa <odometry_query_position+0xcc>
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	40 e2       	ldi	r20, 0x20	; 32
     9b2:	51 e4       	ldi	r21, 0x41	; 65
     9b4:	69 81       	ldd	r22, Y+1	; 0x01
     9b6:	7a 81       	ldd	r23, Y+2	; 0x02
     9b8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ba:	9c 81       	ldd	r25, Y+4	; 0x04
     9bc:	1d d7       	rcall	.+3642   	; 0x17f8 <__mulsf3>
     9be:	dc 01       	movw	r26, r24
     9c0:	cb 01       	movw	r24, r22
     9c2:	bc 01       	movw	r22, r24
     9c4:	cd 01       	movw	r24, r26
     9c6:	36 d6       	rcall	.+3180   	; 0x1634 <__fixunssfsi>
     9c8:	dc 01       	movw	r26, r24
     9ca:	cb 01       	movw	r24, r22
     9cc:	9a 87       	std	Y+10, r25	; 0x0a
     9ce:	89 87       	std	Y+9, r24	; 0x09
     9d0:	0f c0       	rjmp	.+30     	; 0x9f0 <odometry_query_position+0xc2>
     9d2:	8a ef       	ldi	r24, 0xFA	; 250
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	9c 87       	std	Y+12, r25	; 0x0c
     9d8:	8b 87       	std	Y+11, r24	; 0x0b
     9da:	8b 85       	ldd	r24, Y+11	; 0x0b
     9dc:	9c 85       	ldd	r25, Y+12	; 0x0c
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	f1 f7       	brne	.-4      	; 0x9de <odometry_query_position+0xb0>
     9e2:	9c 87       	std	Y+12, r25	; 0x0c
     9e4:	8b 87       	std	Y+11, r24	; 0x0b
     9e6:	89 85       	ldd	r24, Y+9	; 0x09
     9e8:	9a 85       	ldd	r25, Y+10	; 0x0a
     9ea:	01 97       	sbiw	r24, 0x01	; 1
     9ec:	9a 87       	std	Y+10, r25	; 0x0a
     9ee:	89 87       	std	Y+9, r24	; 0x09
     9f0:	89 85       	ldd	r24, Y+9	; 0x09
     9f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     9f4:	89 2b       	or	r24, r25
     9f6:	69 f7       	brne	.-38     	; 0x9d2 <odometry_query_position+0xa4>
     9f8:	13 c0       	rjmp	.+38     	; 0xa20 <odometry_query_position+0xf2>
     9fa:	6d 81       	ldd	r22, Y+5	; 0x05
     9fc:	7e 81       	ldd	r23, Y+6	; 0x06
     9fe:	8f 81       	ldd	r24, Y+7	; 0x07
     a00:	98 85       	ldd	r25, Y+8	; 0x08
     a02:	18 d6       	rcall	.+3120   	; 0x1634 <__fixunssfsi>
     a04:	dc 01       	movw	r26, r24
     a06:	cb 01       	movw	r24, r22
     a08:	9a 87       	std	Y+10, r25	; 0x0a
     a0a:	89 87       	std	Y+9, r24	; 0x09
     a0c:	89 85       	ldd	r24, Y+9	; 0x09
     a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     a10:	9e 87       	std	Y+14, r25	; 0x0e
     a12:	8d 87       	std	Y+13, r24	; 0x0d
     a14:	8d 85       	ldd	r24, Y+13	; 0x0d
     a16:	9e 85       	ldd	r25, Y+14	; 0x0e
     a18:	01 97       	sbiw	r24, 0x01	; 1
     a1a:	f1 f7       	brne	.-4      	; 0xa18 <odometry_query_position+0xea>
     a1c:	9e 87       	std	Y+14, r25	; 0x0e
     a1e:	8d 87       	std	Y+13, r24	; 0x0d
     a20:	ce 01       	movw	r24, r28
     a22:	0f 96       	adiw	r24, 0x0f	; 15
     a24:	63 ec       	ldi	r22, 0xC3	; 195
     a26:	64 de       	rcall	.-824    	; 0x6f0 <CAN_Write>
     a28:	88 23       	and	r24, r24
     a2a:	09 f0       	breq	.+2      	; 0xa2e <odometry_query_position+0x100>
     a2c:	8d cf       	rjmp	.-230    	; 0x948 <odometry_query_position+0x1a>
     a2e:	ce 01       	movw	r24, r28
     a30:	0f 96       	adiw	r24, 0x0f	; 15
     a32:	61 e0       	ldi	r22, 0x01	; 1
     a34:	ed dd       	rcall	.-1062   	; 0x610 <CAN_Read>
     a36:	8f 85       	ldd	r24, Y+15	; 0x0f
     a38:	80 93 0c 01 	sts	0x010C, r24
     a3c:	88 89       	ldd	r24, Y+16	; 0x10
     a3e:	88 2f       	mov	r24, r24
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	38 2f       	mov	r19, r24
     a44:	22 27       	eor	r18, r18
     a46:	89 89       	ldd	r24, Y+17	; 0x11
     a48:	88 2f       	mov	r24, r24
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	82 2b       	or	r24, r18
     a4e:	93 2b       	or	r25, r19
     a50:	90 93 07 01 	sts	0x0107, r25
     a54:	80 93 06 01 	sts	0x0106, r24
     a58:	8a 89       	ldd	r24, Y+18	; 0x12
     a5a:	88 2f       	mov	r24, r24
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	38 2f       	mov	r19, r24
     a60:	22 27       	eor	r18, r18
     a62:	8b 89       	ldd	r24, Y+19	; 0x13
     a64:	88 2f       	mov	r24, r24
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	82 2b       	or	r24, r18
     a6a:	93 2b       	or	r25, r19
     a6c:	90 93 09 01 	sts	0x0109, r25
     a70:	80 93 08 01 	sts	0x0108, r24
     a74:	8c 89       	ldd	r24, Y+20	; 0x14
     a76:	88 2f       	mov	r24, r24
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	38 2f       	mov	r19, r24
     a7c:	22 27       	eor	r18, r18
     a7e:	8d 89       	ldd	r24, Y+21	; 0x15
     a80:	88 2f       	mov	r24, r24
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	82 2b       	or	r24, r18
     a86:	93 2b       	or	r25, r19
     a88:	90 93 0b 01 	sts	0x010B, r25
     a8c:	80 93 0a 01 	sts	0x010A, r24
     a90:	66 96       	adiw	r28, 0x16	; 22
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	f8 94       	cli
     a96:	de bf       	out	0x3e, r29	; 62
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	cd bf       	out	0x3d, r28	; 61
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	08 95       	ret

00000aa2 <odometry_wait_until_done>:
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	00 d0       	rcall	.+0      	; 0xaa8 <odometry_wait_until_done+0x6>
     aa8:	00 d0       	rcall	.+0      	; 0xaaa <odometry_wait_until_done+0x8>
     aaa:	00 d0       	rcall	.+0      	; 0xaac <odometry_wait_until_done+0xa>
     aac:	cd b7       	in	r28, 0x3d	; 61
     aae:	de b7       	in	r29, 0x3e	; 62
     ab0:	9e 83       	std	Y+6, r25	; 0x06
     ab2:	8d 83       	std	Y+5, r24	; 0x05
     ab4:	c1 d3       	rcall	.+1922   	; 0x1238 <system_get_system_time>
     ab6:	09 2e       	mov	r0, r25
     ab8:	00 0c       	add	r0, r0
     aba:	aa 0b       	sbc	r26, r26
     abc:	bb 0b       	sbc	r27, r27
     abe:	89 83       	std	Y+1, r24	; 0x01
     ac0:	9a 83       	std	Y+2, r25	; 0x02
     ac2:	ab 83       	std	Y+3, r26	; 0x03
     ac4:	bc 83       	std	Y+4, r27	; 0x04
     ac6:	33 df       	rcall	.-410    	; 0x92e <odometry_query_position>
     ac8:	8d 81       	ldd	r24, Y+5	; 0x05
     aca:	9e 81       	ldd	r25, Y+6	; 0x06
     acc:	89 2b       	or	r24, r25
     ace:	71 f0       	breq	.+28     	; 0xaec <odometry_wait_until_done+0x4a>
     ad0:	89 81       	ldd	r24, Y+1	; 0x01
     ad2:	9a 81       	ldd	r25, Y+2	; 0x02
     ad4:	ab 81       	ldd	r26, Y+3	; 0x03
     ad6:	bc 81       	ldd	r27, Y+4	; 0x04
     ad8:	2d 81       	ldd	r18, Y+5	; 0x05
     ada:	3e 81       	ldd	r19, Y+6	; 0x06
     adc:	bc 01       	movw	r22, r24
     ade:	cd 01       	movw	r24, r26
     ae0:	f9 01       	movw	r30, r18
     ae2:	09 95       	icall
     ae4:	81 30       	cpi	r24, 0x01	; 1
     ae6:	11 f4       	brne	.+4      	; 0xaec <odometry_wait_until_done+0x4a>
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	09 c0       	rjmp	.+18     	; 0xafe <odometry_wait_until_done+0x5c>
     aec:	80 91 0c 01 	lds	r24, 0x010C
     af0:	8d 34       	cpi	r24, 0x4D	; 77
     af2:	49 f3       	breq	.-46     	; 0xac6 <odometry_wait_until_done+0x24>
     af4:	80 91 0c 01 	lds	r24, 0x010C
     af8:	82 35       	cpi	r24, 0x52	; 82
     afa:	29 f3       	breq	.-54     	; 0xac6 <odometry_wait_until_done+0x24>
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	26 96       	adiw	r28, 0x06	; 6
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	f8 94       	cli
     b04:	de bf       	out	0x3e, r29	; 62
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	cd bf       	out	0x3d, r28	; 61
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	08 95       	ret

00000b10 <odometry_move_to_position>:

uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
{
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	cd b7       	in	r28, 0x3d	; 61
     b16:	de b7       	in	r29, 0x3e	; 62
     b18:	6c 97       	sbiw	r28, 0x1c	; 28
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	f8 94       	cli
     b1e:	de bf       	out	0x3e, r29	; 62
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	cd bf       	out	0x3d, r28	; 61
     b24:	98 8f       	std	Y+24, r25	; 0x18
     b26:	8f 8b       	std	Y+23, r24	; 0x17
     b28:	69 8f       	std	Y+25, r22	; 0x19
     b2a:	4a 8f       	std	Y+26, r20	; 0x1a
     b2c:	3c 8f       	std	Y+28, r19	; 0x1c
     b2e:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
     b30:	89 8d       	ldd	r24, Y+25	; 0x19
     b32:	68 de       	rcall	.-816    	; 0x804 <odometry_set_speed>

	buffer[0] = 'G';
     b34:	87 e4       	ldi	r24, 0x47	; 71
     b36:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
     b38:	8f 89       	ldd	r24, Y+23	; 0x17
     b3a:	98 8d       	ldd	r25, Y+24	; 0x18
     b3c:	fc 01       	movw	r30, r24
     b3e:	80 81       	ld	r24, Z
     b40:	91 81       	ldd	r25, Z+1	; 0x01
     b42:	89 2f       	mov	r24, r25
     b44:	99 0f       	add	r25, r25
     b46:	99 0b       	sbc	r25, r25
     b48:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
     b4a:	8f 89       	ldd	r24, Y+23	; 0x17
     b4c:	98 8d       	ldd	r25, Y+24	; 0x18
     b4e:	fc 01       	movw	r30, r24
     b50:	80 81       	ld	r24, Z
     b52:	91 81       	ldd	r25, Z+1	; 0x01
     b54:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
     b56:	8f 89       	ldd	r24, Y+23	; 0x17
     b58:	98 8d       	ldd	r25, Y+24	; 0x18
     b5a:	fc 01       	movw	r30, r24
     b5c:	82 81       	ldd	r24, Z+2	; 0x02
     b5e:	93 81       	ldd	r25, Z+3	; 0x03
     b60:	89 2f       	mov	r24, r25
     b62:	99 0f       	add	r25, r25
     b64:	99 0b       	sbc	r25, r25
     b66:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
     b68:	8f 89       	ldd	r24, Y+23	; 0x17
     b6a:	98 8d       	ldd	r25, Y+24	; 0x18
     b6c:	fc 01       	movw	r30, r24
     b6e:	82 81       	ldd	r24, Z+2	; 0x02
     b70:	93 81       	ldd	r25, Z+3	; 0x03
     b72:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;//Mozda ne treba 0
     b74:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction;
     b76:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b78:	8d 8b       	std	Y+21, r24	; 0x15
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     b7a:	6c c0       	rjmp	.+216    	; 0xc54 <odometry_move_to_position+0x144>
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	a8 e4       	ldi	r26, 0x48	; 72
     b82:	b2 e4       	ldi	r27, 0x42	; 66
     b84:	89 83       	std	Y+1, r24	; 0x01
     b86:	9a 83       	std	Y+2, r25	; 0x02
     b88:	ab 83       	std	Y+3, r26	; 0x03
     b8a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e4       	ldi	r19, 0x40	; 64
     b90:	4c e1       	ldi	r20, 0x1C	; 28
     b92:	55 e4       	ldi	r21, 0x45	; 69
     b94:	69 81       	ldd	r22, Y+1	; 0x01
     b96:	7a 81       	ldd	r23, Y+2	; 0x02
     b98:	8b 81       	ldd	r24, Y+3	; 0x03
     b9a:	9c 81       	ldd	r25, Y+4	; 0x04
     b9c:	2d d6       	rcall	.+3162   	; 0x17f8 <__mulsf3>
     b9e:	dc 01       	movw	r26, r24
     ba0:	cb 01       	movw	r24, r22
     ba2:	8d 83       	std	Y+5, r24	; 0x05
     ba4:	9e 83       	std	Y+6, r25	; 0x06
     ba6:	af 83       	std	Y+7, r26	; 0x07
     ba8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	40 e8       	ldi	r20, 0x80	; 128
     bb0:	5f e3       	ldi	r21, 0x3F	; 63
     bb2:	6d 81       	ldd	r22, Y+5	; 0x05
     bb4:	7e 81       	ldd	r23, Y+6	; 0x06
     bb6:	8f 81       	ldd	r24, Y+7	; 0x07
     bb8:	98 85       	ldd	r25, Y+8	; 0x08
     bba:	d0 d4       	rcall	.+2464   	; 0x155c <__cmpsf2>
     bbc:	88 23       	and	r24, r24
     bbe:	2c f4       	brge	.+10     	; 0xbca <odometry_move_to_position+0xba>
		__ticks = 1;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	9a 87       	std	Y+10, r25	; 0x0a
     bc6:	89 87       	std	Y+9, r24	; 0x09
     bc8:	3b c0       	rjmp	.+118    	; 0xc40 <odometry_move_to_position+0x130>
	else if (__tmp > 65535)
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	3f ef       	ldi	r19, 0xFF	; 255
     bce:	4f e7       	ldi	r20, 0x7F	; 127
     bd0:	57 e4       	ldi	r21, 0x47	; 71
     bd2:	6d 81       	ldd	r22, Y+5	; 0x05
     bd4:	7e 81       	ldd	r23, Y+6	; 0x06
     bd6:	8f 81       	ldd	r24, Y+7	; 0x07
     bd8:	98 85       	ldd	r25, Y+8	; 0x08
     bda:	0a d6       	rcall	.+3092   	; 0x17f0 <__gesf2>
     bdc:	18 16       	cp	r1, r24
     bde:	3c f5       	brge	.+78     	; 0xc2e <odometry_move_to_position+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	40 e2       	ldi	r20, 0x20	; 32
     be6:	51 e4       	ldi	r21, 0x41	; 65
     be8:	69 81       	ldd	r22, Y+1	; 0x01
     bea:	7a 81       	ldd	r23, Y+2	; 0x02
     bec:	8b 81       	ldd	r24, Y+3	; 0x03
     bee:	9c 81       	ldd	r25, Y+4	; 0x04
     bf0:	03 d6       	rcall	.+3078   	; 0x17f8 <__mulsf3>
     bf2:	dc 01       	movw	r26, r24
     bf4:	cb 01       	movw	r24, r22
     bf6:	bc 01       	movw	r22, r24
     bf8:	cd 01       	movw	r24, r26
     bfa:	1c d5       	rcall	.+2616   	; 0x1634 <__fixunssfsi>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	9a 87       	std	Y+10, r25	; 0x0a
     c02:	89 87       	std	Y+9, r24	; 0x09
     c04:	0f c0       	rjmp	.+30     	; 0xc24 <odometry_move_to_position+0x114>
     c06:	8a ef       	ldi	r24, 0xFA	; 250
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9c 87       	std	Y+12, r25	; 0x0c
     c0c:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c0e:	8b 85       	ldd	r24, Y+11	; 0x0b
     c10:	9c 85       	ldd	r25, Y+12	; 0x0c
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <odometry_move_to_position+0x102>
     c16:	9c 87       	std	Y+12, r25	; 0x0c
     c18:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1a:	89 85       	ldd	r24, Y+9	; 0x09
     c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	9a 87       	std	Y+10, r25	; 0x0a
     c22:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c24:	89 85       	ldd	r24, Y+9	; 0x09
     c26:	9a 85       	ldd	r25, Y+10	; 0x0a
     c28:	89 2b       	or	r24, r25
     c2a:	69 f7       	brne	.-38     	; 0xc06 <odometry_move_to_position+0xf6>
     c2c:	13 c0       	rjmp	.+38     	; 0xc54 <odometry_move_to_position+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c2e:	6d 81       	ldd	r22, Y+5	; 0x05
     c30:	7e 81       	ldd	r23, Y+6	; 0x06
     c32:	8f 81       	ldd	r24, Y+7	; 0x07
     c34:	98 85       	ldd	r25, Y+8	; 0x08
     c36:	fe d4       	rcall	.+2556   	; 0x1634 <__fixunssfsi>
     c38:	dc 01       	movw	r26, r24
     c3a:	cb 01       	movw	r24, r22
     c3c:	9a 87       	std	Y+10, r25	; 0x0a
     c3e:	89 87       	std	Y+9, r24	; 0x09
     c40:	89 85       	ldd	r24, Y+9	; 0x09
     c42:	9a 85       	ldd	r25, Y+10	; 0x0a
     c44:	9e 87       	std	Y+14, r25	; 0x0e
     c46:	8d 87       	std	Y+13, r24	; 0x0d
     c48:	8d 85       	ldd	r24, Y+13	; 0x0d
     c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	f1 f7       	brne	.-4      	; 0xc4c <odometry_move_to_position+0x13c>
     c50:	9e 87       	std	Y+14, r25	; 0x0e
     c52:	8d 87       	std	Y+13, r24	; 0x0d
     c54:	ce 01       	movw	r24, r28
     c56:	0f 96       	adiw	r24, 0x0f	; 15
     c58:	63 ec       	ldi	r22, 0xC3	; 195
     c5a:	4a dd       	rcall	.-1388   	; 0x6f0 <CAN_Write>
     c5c:	88 23       	and	r24, r24
     c5e:	09 f0       	breq	.+2      	; 0xc62 <odometry_move_to_position+0x152>
     c60:	8d cf       	rjmp	.-230    	; 0xb7c <odometry_move_to_position+0x6c>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
     c62:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c64:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c66:	1d df       	rcall	.-454    	; 0xaa2 <odometry_wait_until_done>
}
     c68:	6c 96       	adiw	r28, 0x1c	; 28
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	08 95       	ret

00000c7a <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
     c82:	68 97       	sbiw	r28, 0x18	; 24
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	98 8f       	std	Y+24, r25	; 0x18
     c90:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	buffer[0] = 'I';
     c92:	89 e4       	ldi	r24, 0x49	; 73
     c94:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = new_position->x >> 8;
     c96:	8f 89       	ldd	r24, Y+23	; 0x17
     c98:	98 8d       	ldd	r25, Y+24	; 0x18
     c9a:	fc 01       	movw	r30, r24
     c9c:	80 81       	ld	r24, Z
     c9e:	91 81       	ldd	r25, Z+1	; 0x01
     ca0:	89 2f       	mov	r24, r25
     ca2:	99 0f       	add	r25, r25
     ca4:	99 0b       	sbc	r25, r25
     ca6:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = new_position->x & 0xFF;
     ca8:	8f 89       	ldd	r24, Y+23	; 0x17
     caa:	98 8d       	ldd	r25, Y+24	; 0x18
     cac:	fc 01       	movw	r30, r24
     cae:	80 81       	ld	r24, Z
     cb0:	91 81       	ldd	r25, Z+1	; 0x01
     cb2:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = new_position->y >> 8;
     cb4:	8f 89       	ldd	r24, Y+23	; 0x17
     cb6:	98 8d       	ldd	r25, Y+24	; 0x18
     cb8:	fc 01       	movw	r30, r24
     cba:	82 81       	ldd	r24, Z+2	; 0x02
     cbc:	93 81       	ldd	r25, Z+3	; 0x03
     cbe:	89 2f       	mov	r24, r25
     cc0:	99 0f       	add	r25, r25
     cc2:	99 0b       	sbc	r25, r25
     cc4:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = new_position->y & 0xFF;
     cc6:	8f 89       	ldd	r24, Y+23	; 0x17
     cc8:	98 8d       	ldd	r25, Y+24	; 0x18
     cca:	fc 01       	movw	r30, r24
     ccc:	82 81       	ldd	r24, Z+2	; 0x02
     cce:	93 81       	ldd	r25, Z+3	; 0x03
     cd0:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = new_position->angle >> 8;
     cd2:	8f 89       	ldd	r24, Y+23	; 0x17
     cd4:	98 8d       	ldd	r25, Y+24	; 0x18
     cd6:	fc 01       	movw	r30, r24
     cd8:	84 81       	ldd	r24, Z+4	; 0x04
     cda:	95 81       	ldd	r25, Z+5	; 0x05
     cdc:	89 2f       	mov	r24, r25
     cde:	99 0f       	add	r25, r25
     ce0:	99 0b       	sbc	r25, r25
     ce2:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = new_position->angle & 0xFF;
     ce4:	8f 89       	ldd	r24, Y+23	; 0x17
     ce6:	98 8d       	ldd	r25, Y+24	; 0x18
     ce8:	fc 01       	movw	r30, r24
     cea:	84 81       	ldd	r24, Z+4	; 0x04
     cec:	95 81       	ldd	r25, Z+5	; 0x05
     cee:	8d 8b       	std	Y+21, r24	; 0x15

	position.x	   = new_position->x;
     cf0:	8f 89       	ldd	r24, Y+23	; 0x17
     cf2:	98 8d       	ldd	r25, Y+24	; 0x18
     cf4:	fc 01       	movw	r30, r24
     cf6:	80 81       	ld	r24, Z
     cf8:	91 81       	ldd	r25, Z+1	; 0x01
     cfa:	90 93 07 01 	sts	0x0107, r25
     cfe:	80 93 06 01 	sts	0x0106, r24
	position.y	   = new_position->y;
     d02:	8f 89       	ldd	r24, Y+23	; 0x17
     d04:	98 8d       	ldd	r25, Y+24	; 0x18
     d06:	fc 01       	movw	r30, r24
     d08:	82 81       	ldd	r24, Z+2	; 0x02
     d0a:	93 81       	ldd	r25, Z+3	; 0x03
     d0c:	90 93 09 01 	sts	0x0109, r25
     d10:	80 93 08 01 	sts	0x0108, r24
	position.angle = new_position->angle;
     d14:	8f 89       	ldd	r24, Y+23	; 0x17
     d16:	98 8d       	ldd	r25, Y+24	; 0x18
     d18:	fc 01       	movw	r30, r24
     d1a:	84 81       	ldd	r24, Z+4	; 0x04
     d1c:	95 81       	ldd	r25, Z+5	; 0x05
     d1e:	90 93 0b 01 	sts	0x010B, r25
     d22:	80 93 0a 01 	sts	0x010A, r24

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     d26:	6c c0       	rjmp	.+216    	; 0xe00 <odometry_set_position+0x186>
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	a8 e4       	ldi	r26, 0x48	; 72
     d2e:	b2 e4       	ldi	r27, 0x42	; 66
     d30:	89 83       	std	Y+1, r24	; 0x01
     d32:	9a 83       	std	Y+2, r25	; 0x02
     d34:	ab 83       	std	Y+3, r26	; 0x03
     d36:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e4       	ldi	r19, 0x40	; 64
     d3c:	4c e1       	ldi	r20, 0x1C	; 28
     d3e:	55 e4       	ldi	r21, 0x45	; 69
     d40:	69 81       	ldd	r22, Y+1	; 0x01
     d42:	7a 81       	ldd	r23, Y+2	; 0x02
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	9c 81       	ldd	r25, Y+4	; 0x04
     d48:	57 d5       	rcall	.+2734   	; 0x17f8 <__mulsf3>
     d4a:	dc 01       	movw	r26, r24
     d4c:	cb 01       	movw	r24, r22
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	9e 83       	std	Y+6, r25	; 0x06
     d52:	af 83       	std	Y+7, r26	; 0x07
     d54:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	40 e8       	ldi	r20, 0x80	; 128
     d5c:	5f e3       	ldi	r21, 0x3F	; 63
     d5e:	6d 81       	ldd	r22, Y+5	; 0x05
     d60:	7e 81       	ldd	r23, Y+6	; 0x06
     d62:	8f 81       	ldd	r24, Y+7	; 0x07
     d64:	98 85       	ldd	r25, Y+8	; 0x08
     d66:	fa d3       	rcall	.+2036   	; 0x155c <__cmpsf2>
     d68:	88 23       	and	r24, r24
     d6a:	2c f4       	brge	.+10     	; 0xd76 <odometry_set_position+0xfc>
		__ticks = 1;
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	9a 87       	std	Y+10, r25	; 0x0a
     d72:	89 87       	std	Y+9, r24	; 0x09
     d74:	3b c0       	rjmp	.+118    	; 0xdec <odometry_set_position+0x172>
	else if (__tmp > 65535)
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	3f ef       	ldi	r19, 0xFF	; 255
     d7a:	4f e7       	ldi	r20, 0x7F	; 127
     d7c:	57 e4       	ldi	r21, 0x47	; 71
     d7e:	6d 81       	ldd	r22, Y+5	; 0x05
     d80:	7e 81       	ldd	r23, Y+6	; 0x06
     d82:	8f 81       	ldd	r24, Y+7	; 0x07
     d84:	98 85       	ldd	r25, Y+8	; 0x08
     d86:	34 d5       	rcall	.+2664   	; 0x17f0 <__gesf2>
     d88:	18 16       	cp	r1, r24
     d8a:	3c f5       	brge	.+78     	; 0xdda <odometry_set_position+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e2       	ldi	r20, 0x20	; 32
     d92:	51 e4       	ldi	r21, 0x41	; 65
     d94:	69 81       	ldd	r22, Y+1	; 0x01
     d96:	7a 81       	ldd	r23, Y+2	; 0x02
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	9c 81       	ldd	r25, Y+4	; 0x04
     d9c:	2d d5       	rcall	.+2650   	; 0x17f8 <__mulsf3>
     d9e:	dc 01       	movw	r26, r24
     da0:	cb 01       	movw	r24, r22
     da2:	bc 01       	movw	r22, r24
     da4:	cd 01       	movw	r24, r26
     da6:	46 d4       	rcall	.+2188   	; 0x1634 <__fixunssfsi>
     da8:	dc 01       	movw	r26, r24
     daa:	cb 01       	movw	r24, r22
     dac:	9a 87       	std	Y+10, r25	; 0x0a
     dae:	89 87       	std	Y+9, r24	; 0x09
     db0:	0f c0       	rjmp	.+30     	; 0xdd0 <odometry_set_position+0x156>
     db2:	8a ef       	ldi	r24, 0xFA	; 250
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	9c 87       	std	Y+12, r25	; 0x0c
     db8:	8b 87       	std	Y+11, r24	; 0x0b
     dba:	8b 85       	ldd	r24, Y+11	; 0x0b
     dbc:	9c 85       	ldd	r25, Y+12	; 0x0c
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	f1 f7       	brne	.-4      	; 0xdbe <odometry_set_position+0x144>
     dc2:	9c 87       	std	Y+12, r25	; 0x0c
     dc4:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc6:	89 85       	ldd	r24, Y+9	; 0x09
     dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dca:	01 97       	sbiw	r24, 0x01	; 1
     dcc:	9a 87       	std	Y+10, r25	; 0x0a
     dce:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dd0:	89 85       	ldd	r24, Y+9	; 0x09
     dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd4:	89 2b       	or	r24, r25
     dd6:	69 f7       	brne	.-38     	; 0xdb2 <odometry_set_position+0x138>
     dd8:	13 c0       	rjmp	.+38     	; 0xe00 <odometry_set_position+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dda:	6d 81       	ldd	r22, Y+5	; 0x05
     ddc:	7e 81       	ldd	r23, Y+6	; 0x06
     dde:	8f 81       	ldd	r24, Y+7	; 0x07
     de0:	98 85       	ldd	r25, Y+8	; 0x08
     de2:	28 d4       	rcall	.+2128   	; 0x1634 <__fixunssfsi>
     de4:	dc 01       	movw	r26, r24
     de6:	cb 01       	movw	r24, r22
     de8:	9a 87       	std	Y+10, r25	; 0x0a
     dea:	89 87       	std	Y+9, r24	; 0x09
     dec:	89 85       	ldd	r24, Y+9	; 0x09
     dee:	9a 85       	ldd	r25, Y+10	; 0x0a
     df0:	9e 87       	std	Y+14, r25	; 0x0e
     df2:	8d 87       	std	Y+13, r24	; 0x0d
     df4:	8d 85       	ldd	r24, Y+13	; 0x0d
     df6:	9e 85       	ldd	r25, Y+14	; 0x0e
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <odometry_set_position+0x17e>
     dfc:	9e 87       	std	Y+14, r25	; 0x0e
     dfe:	8d 87       	std	Y+13, r24	; 0x0d
     e00:	ce 01       	movw	r24, r28
     e02:	0f 96       	adiw	r24, 0x0f	; 15
     e04:	63 ec       	ldi	r22, 0xC3	; 195
     e06:	74 dc       	rcall	.-1816   	; 0x6f0 <CAN_Write>
     e08:	88 23       	and	r24, r24
     e0a:	09 f0       	breq	.+2      	; 0xe0e <odometry_set_position+0x194>
     e0c:	8d cf       	rjmp	.-230    	; 0xd28 <odometry_set_position+0xae>
		_delay_ms(50);
}
     e0e:	68 96       	adiw	r28, 0x18	; 24
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	08 95       	ret

00000e20 <purpleside>:
	{{100,970},NORMAL_SPEED,FORWARD,NULL}						//zavrsi
		
};

void purpleside(void)
{
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	2b 97       	sbiw	r28, 0x0b	; 11
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	f8 94       	cli
     e2e:	de bf       	out	0x3e, r29	; 62
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	uint8_t current_position = 0;
     e34:	19 82       	std	Y+1, r1	; 0x01
	uint8_t next_position	 = 0;
     e36:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t odometry_status;
	uint8_t active_state = ROBOT_STATE_TACTIC_ONE;
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	8b 83       	std	Y+3, r24	; 0x03
	
	starting_position.x		= 85;
     e3c:	85 e5       	ldi	r24, 0x55	; 85
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	9e 83       	std	Y+6, r25	; 0x06
     e42:	8d 83       	std	Y+5, r24	; 0x05
	starting_position.y		= 670;
     e44:	8e e9       	ldi	r24, 0x9E	; 158
     e46:	92 e0       	ldi	r25, 0x02	; 2
     e48:	98 87       	std	Y+8, r25	; 0x08
     e4a:	8f 83       	std	Y+7, r24	; 0x07
	starting_position.angle = -90;
     e4c:	86 ea       	ldi	r24, 0xA6	; 166
     e4e:	9f ef       	ldi	r25, 0xFF	; 255
     e50:	9a 87       	std	Y+10, r25	; 0x0a
     e52:	89 87       	std	Y+9, r24	; 0x09
	
	odometry_set_position(&starting_position);
     e54:	ce 01       	movw	r24, r28
     e56:	05 96       	adiw	r24, 0x05	; 5
     e58:	10 df       	rcall	.-480    	; 0xc7a <odometry_set_position>

	while(1)
	{
		switch(active_state)
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	88 2f       	mov	r24, r24
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	09 f0       	breq	.+2      	; 0xe66 <purpleside+0x46>
     e64:	4a c0       	rjmp	.+148    	; 0xefa <purpleside+0xda>
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	89 83       	std	Y+1, r24	; 0x01
     e6a:	43 c0       	rjmp	.+134    	; 0xef2 <purpleside+0xd2>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_one_positions[current_position].point), purple_tactic_one_positions[current_position].speed,
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	4b e0       	ldi	r20, 0x0B	; 11
     e74:	42 9f       	mul	r20, r18
     e76:	c0 01       	movw	r24, r0
     e78:	43 9f       	mul	r20, r19
     e7a:	90 0d       	add	r25, r0
     e7c:	11 24       	eor	r1, r1
     e7e:	8a 5e       	subi	r24, 0xEA	; 234
     e80:	9e 4f       	sbci	r25, 0xFE	; 254
     e82:	dc 01       	movw	r26, r24
     e84:	4d 91       	ld	r20, X+
     e86:	5c 91       	ld	r21, X
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	6b e0       	ldi	r22, 0x0B	; 11
     e90:	62 9f       	mul	r22, r18
     e92:	c0 01       	movw	r24, r0
     e94:	63 9f       	mul	r22, r19
     e96:	90 0d       	add	r25, r0
     e98:	11 24       	eor	r1, r1
     e9a:	8b 5e       	subi	r24, 0xEB	; 235
     e9c:	9e 4f       	sbci	r25, 0xFE	; 254
     e9e:	dc 01       	movw	r26, r24
     ea0:	ec 91       	ld	r30, X
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	6b e0       	ldi	r22, 0x0B	; 11
     eaa:	62 9f       	mul	r22, r18
     eac:	c0 01       	movw	r24, r0
     eae:	63 9f       	mul	r22, r19
     eb0:	90 0d       	add	r25, r0
     eb2:	11 24       	eor	r1, r1
     eb4:	8c 5e       	subi	r24, 0xEC	; 236
     eb6:	9e 4f       	sbci	r25, 0xFE	; 254
     eb8:	dc 01       	movw	r26, r24
     eba:	7c 91       	ld	r23, X
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	6b e0       	ldi	r22, 0x0B	; 11
     ec4:	62 9f       	mul	r22, r18
     ec6:	c0 01       	movw	r24, r0
     ec8:	63 9f       	mul	r22, r19
     eca:	90 0d       	add	r25, r0
     ecc:	11 24       	eor	r1, r1
     ece:	83 5f       	subi	r24, 0xF3	; 243
     ed0:	9e 4f       	sbci	r25, 0xFE	; 254
     ed2:	9a 01       	movw	r18, r20
     ed4:	4e 2f       	mov	r20, r30
     ed6:	67 2f       	mov	r22, r23
     ed8:	1b de       	rcall	.-970    	; 0xb10 <odometry_move_to_position>
     eda:	8c 83       	std	Y+4, r24	; 0x04
																purple_tactic_one_positions[current_position].direction,purple_tactic_one_positions[current_position].callback); 
					if(odometry_status == ODOMETRY_FAIL)
     edc:	8c 81       	ldd	r24, Y+4	; 0x04
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	09 f4       	brne	.+2      	; 0xee4 <purpleside+0xc4>
					{
						break;
     ee2:	0b c0       	rjmp	.+22     	; 0xefa <purpleside+0xda>
					}
					if(current_position == 8 )
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	88 30       	cpi	r24, 0x08	; 8
     ee8:	09 f4       	brne	.+2      	; 0xeec <purpleside+0xcc>
					{
						while(1);
     eea:	ff cf       	rjmp	.-2      	; 0xeea <purpleside+0xca>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	8f 5f       	subi	r24, 0xFF	; 255
     ef0:	89 83       	std	Y+1, r24	; 0x01
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	89 30       	cpi	r24, 0x09	; 9
     ef6:	08 f4       	brcc	.+2      	; 0xefa <purpleside+0xda>
     ef8:	b9 cf       	rjmp	.-142    	; 0xe6c <purpleside+0x4c>
					{
						while(1);
					}
				}//end for
		}//end switch
	}//end while
     efa:	af cf       	rjmp	.-162    	; 0xe5a <purpleside+0x3a>

00000efc <timer_init>:
    timer_callback = callback;
}


void timer_init(unsigned int freq)
{
     efc:	0f 93       	push	r16
     efe:	1f 93       	push	r17
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	00 d0       	rcall	.+0      	; 0xf06 <timer_init+0xa>
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	9a 83       	std	Y+2, r25	; 0x02
     f0c:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
     f0e:	80 e8       	ldi	r24, 0x80	; 128
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	fc 01       	movw	r30, r24
     f14:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
     f16:	81 e8       	ldi	r24, 0x81	; 129
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	29 e0       	ldi	r18, 0x09	; 9
     f1c:	fc 01       	movw	r30, r24
     f1e:	20 83       	st	Z, r18
	OCR1A = (double)F_CPU / (double)freq + 0.5;
     f20:	08 e8       	ldi	r16, 0x88	; 136
     f22:	10 e0       	ldi	r17, 0x00	; 0
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	9a 81       	ldd	r25, Y+2	; 0x02
     f28:	cc 01       	movw	r24, r24
     f2a:	a0 e0       	ldi	r26, 0x00	; 0
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	bc 01       	movw	r22, r24
     f30:	cd 01       	movw	r24, r26
     f32:	ac d3       	rcall	.+1880   	; 0x168c <__floatunsisf>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	9c 01       	movw	r18, r24
     f3a:	ad 01       	movw	r20, r26
     f3c:	60 e8       	ldi	r22, 0x80	; 128
     f3e:	76 e9       	ldi	r23, 0x96	; 150
     f40:	88 e1       	ldi	r24, 0x18	; 24
     f42:	9b e4       	ldi	r25, 0x4B	; 75
     f44:	0f d3       	rcall	.+1566   	; 0x1564 <__divsf3>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	40 e0       	ldi	r20, 0x00	; 0
     f50:	5f e3       	ldi	r21, 0x3F	; 63
     f52:	bc 01       	movw	r22, r24
     f54:	cd 01       	movw	r24, r26
     f56:	9e d2       	rcall	.+1340   	; 0x1494 <__addsf3>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	bc 01       	movw	r22, r24
     f5e:	cd 01       	movw	r24, r26
     f60:	69 d3       	rcall	.+1746   	; 0x1634 <__fixunssfsi>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	f8 01       	movw	r30, r16
     f68:	91 83       	std	Z+1, r25	; 0x01
     f6a:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
     f6c:	8f e6       	ldi	r24, 0x6F	; 111
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	22 e0       	ldi	r18, 0x02	; 2
     f72:	fc 01       	movw	r30, r24
     f74:	20 83       	st	Z, r18

	SREG |= 0x80;
     f76:	8f e5       	ldi	r24, 0x5F	; 95
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	2f e5       	ldi	r18, 0x5F	; 95
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	f9 01       	movw	r30, r18
     f80:	20 81       	ld	r18, Z
     f82:	20 68       	ori	r18, 0x80	; 128
     f84:	fc 01       	movw	r30, r24
     f86:	20 83       	st	Z, r18
}
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	08 95       	ret

00000f96 <__vector_12>:


ISR(TIMER1_COMPA_vect)
{
     f96:	1f 92       	push	r1
     f98:	0f 92       	push	r0
     f9a:	00 90 5f 00 	lds	r0, 0x005F
     f9e:	0f 92       	push	r0
     fa0:	11 24       	eor	r1, r1
     fa2:	00 90 5b 00 	lds	r0, 0x005B
     fa6:	0f 92       	push	r0
     fa8:	2f 93       	push	r18
     faa:	3f 93       	push	r19
     fac:	4f 93       	push	r20
     fae:	5f 93       	push	r21
     fb0:	6f 93       	push	r22
     fb2:	7f 93       	push	r23
     fb4:	8f 93       	push	r24
     fb6:	9f 93       	push	r25
     fb8:	af 93       	push	r26
     fba:	bf 93       	push	r27
     fbc:	ef 93       	push	r30
     fbe:	ff 93       	push	r31
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
     fc8:	80 91 a7 01 	lds	r24, 0x01A7
     fcc:	90 91 a8 01 	lds	r25, 0x01A8
     fd0:	89 2b       	or	r24, r25
     fd2:	31 f0       	breq	.+12     	; 0xfe0 <__vector_12+0x4a>
        timer_callback();
     fd4:	80 91 a7 01 	lds	r24, 0x01A7
     fd8:	90 91 a8 01 	lds	r25, 0x01A8
     fdc:	fc 01       	movw	r30, r24
     fde:	09 95       	icall
	sys_time++;
     fe0:	80 91 a3 01 	lds	r24, 0x01A3
     fe4:	90 91 a4 01 	lds	r25, 0x01A4
     fe8:	a0 91 a5 01 	lds	r26, 0x01A5
     fec:	b0 91 a6 01 	lds	r27, 0x01A6
     ff0:	01 96       	adiw	r24, 0x01	; 1
     ff2:	a1 1d       	adc	r26, r1
     ff4:	b1 1d       	adc	r27, r1
     ff6:	80 93 a3 01 	sts	0x01A3, r24
     ffa:	90 93 a4 01 	sts	0x01A4, r25
     ffe:	a0 93 a5 01 	sts	0x01A5, r26
    1002:	b0 93 a6 01 	sts	0x01A6, r27
}
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	ff 91       	pop	r31
    100c:	ef 91       	pop	r30
    100e:	bf 91       	pop	r27
    1010:	af 91       	pop	r26
    1012:	9f 91       	pop	r25
    1014:	8f 91       	pop	r24
    1016:	7f 91       	pop	r23
    1018:	6f 91       	pop	r22
    101a:	5f 91       	pop	r21
    101c:	4f 91       	pop	r20
    101e:	3f 91       	pop	r19
    1020:	2f 91       	pop	r18
    1022:	0f 90       	pop	r0
    1024:	00 92 5b 00 	sts	0x005B, r0
    1028:	0f 90       	pop	r0
    102a:	00 92 5f 00 	sts	0x005F, r0
    102e:	0f 90       	pop	r0
    1030:	1f 90       	pop	r1
    1032:	18 95       	reti

00001034 <system_init>:

void system_init(void)
{
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	6c 97       	sbiw	r28, 0x1c	; 28
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	aa e7       	ldi	r26, 0x7A	; 122
    104e:	b4 e4       	ldi	r27, 0x44	; 68
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	9a 83       	std	Y+2, r25	; 0x02
    1054:	ab 83       	std	Y+3, r26	; 0x03
    1056:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e4       	ldi	r19, 0x40	; 64
    105c:	4c e1       	ldi	r20, 0x1C	; 28
    105e:	55 e4       	ldi	r21, 0x45	; 69
    1060:	69 81       	ldd	r22, Y+1	; 0x01
    1062:	7a 81       	ldd	r23, Y+2	; 0x02
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	9c 81       	ldd	r25, Y+4	; 0x04
    1068:	c7 d3       	rcall	.+1934   	; 0x17f8 <__mulsf3>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	8d 83       	std	Y+5, r24	; 0x05
    1070:	9e 83       	std	Y+6, r25	; 0x06
    1072:	af 83       	std	Y+7, r26	; 0x07
    1074:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e8       	ldi	r20, 0x80	; 128
    107c:	5f e3       	ldi	r21, 0x3F	; 63
    107e:	6d 81       	ldd	r22, Y+5	; 0x05
    1080:	7e 81       	ldd	r23, Y+6	; 0x06
    1082:	8f 81       	ldd	r24, Y+7	; 0x07
    1084:	98 85       	ldd	r25, Y+8	; 0x08
    1086:	6a d2       	rcall	.+1236   	; 0x155c <__cmpsf2>
    1088:	88 23       	and	r24, r24
    108a:	2c f4       	brge	.+10     	; 0x1096 <system_init+0x62>
		__ticks = 1;
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	9a 87       	std	Y+10, r25	; 0x0a
    1092:	89 87       	std	Y+9, r24	; 0x09
    1094:	3b c0       	rjmp	.+118    	; 0x110c <__stack+0xd>
	else if (__tmp > 65535)
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	3f ef       	ldi	r19, 0xFF	; 255
    109a:	4f e7       	ldi	r20, 0x7F	; 127
    109c:	57 e4       	ldi	r21, 0x47	; 71
    109e:	6d 81       	ldd	r22, Y+5	; 0x05
    10a0:	7e 81       	ldd	r23, Y+6	; 0x06
    10a2:	8f 81       	ldd	r24, Y+7	; 0x07
    10a4:	98 85       	ldd	r25, Y+8	; 0x08
    10a6:	a4 d3       	rcall	.+1864   	; 0x17f0 <__gesf2>
    10a8:	18 16       	cp	r1, r24
    10aa:	3c f5       	brge	.+78     	; 0x10fa <system_init+0xc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	40 e2       	ldi	r20, 0x20	; 32
    10b2:	51 e4       	ldi	r21, 0x41	; 65
    10b4:	69 81       	ldd	r22, Y+1	; 0x01
    10b6:	7a 81       	ldd	r23, Y+2	; 0x02
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	9c 81       	ldd	r25, Y+4	; 0x04
    10bc:	9d d3       	rcall	.+1850   	; 0x17f8 <__mulsf3>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	bc 01       	movw	r22, r24
    10c4:	cd 01       	movw	r24, r26
    10c6:	b6 d2       	rcall	.+1388   	; 0x1634 <__fixunssfsi>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	9a 87       	std	Y+10, r25	; 0x0a
    10ce:	89 87       	std	Y+9, r24	; 0x09
    10d0:	0f c0       	rjmp	.+30     	; 0x10f0 <system_init+0xbc>
    10d2:	8a ef       	ldi	r24, 0xFA	; 250
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	9c 87       	std	Y+12, r25	; 0x0c
    10d8:	8b 87       	std	Y+11, r24	; 0x0b
    10da:	8b 85       	ldd	r24, Y+11	; 0x0b
    10dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    10de:	01 97       	sbiw	r24, 0x01	; 1
    10e0:	f1 f7       	brne	.-4      	; 0x10de <system_init+0xaa>
    10e2:	9c 87       	std	Y+12, r25	; 0x0c
    10e4:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e6:	89 85       	ldd	r24, Y+9	; 0x09
    10e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	9a 87       	std	Y+10, r25	; 0x0a
    10ee:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f0:	89 85       	ldd	r24, Y+9	; 0x09
    10f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f4:	89 2b       	or	r24, r25
    10f6:	69 f7       	brne	.-38     	; 0x10d2 <system_init+0x9e>
    10f8:	13 c0       	rjmp	.+38     	; 0x1120 <__stack+0x21>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10fa:	6d 81       	ldd	r22, Y+5	; 0x05
    10fc:	7e 81       	ldd	r23, Y+6	; 0x06
    10fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1100:	98 85       	ldd	r25, Y+8	; 0x08
    1102:	98 d2       	rcall	.+1328   	; 0x1634 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	9a 87       	std	Y+10, r25	; 0x0a
    110a:	89 87       	std	Y+9, r24	; 0x09
    110c:	89 85       	ldd	r24, Y+9	; 0x09
    110e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1110:	9e 87       	std	Y+14, r25	; 0x0e
    1112:	8d 87       	std	Y+13, r24	; 0x0d
    1114:	8d 85       	ldd	r24, Y+13	; 0x0d
    1116:	9e 85       	ldd	r25, Y+14	; 0x0e
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	f1 f7       	brne	.-4      	; 0x1118 <__stack+0x19>
    111c:	9e 87       	std	Y+14, r25	; 0x0e
    111e:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1000);
	DDRG = 0xff;
    1120:	83 e3       	ldi	r24, 0x33	; 51
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	2f ef       	ldi	r18, 0xFF	; 255
    1126:	fc 01       	movw	r30, r24
    1128:	20 83       	st	Z, r18
	PORTG = 0xFF;
    112a:	84 e3       	ldi	r24, 0x34	; 52
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	2f ef       	ldi	r18, 0xFF	; 255
    1130:	fc 01       	movw	r30, r24
    1132:	20 83       	st	Z, r18
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	aa e7       	ldi	r26, 0x7A	; 122
    113a:	b4 e4       	ldi	r27, 0x44	; 68
    113c:	8f 87       	std	Y+15, r24	; 0x0f
    113e:	98 8b       	std	Y+16, r25	; 0x10
    1140:	a9 8b       	std	Y+17, r26	; 0x11
    1142:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e4       	ldi	r19, 0x40	; 64
    1148:	4c e1       	ldi	r20, 0x1C	; 28
    114a:	55 e4       	ldi	r21, 0x45	; 69
    114c:	6f 85       	ldd	r22, Y+15	; 0x0f
    114e:	78 89       	ldd	r23, Y+16	; 0x10
    1150:	89 89       	ldd	r24, Y+17	; 0x11
    1152:	9a 89       	ldd	r25, Y+18	; 0x12
    1154:	51 d3       	rcall	.+1698   	; 0x17f8 <__mulsf3>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	8b 8b       	std	Y+19, r24	; 0x13
    115c:	9c 8b       	std	Y+20, r25	; 0x14
    115e:	ad 8b       	std	Y+21, r26	; 0x15
    1160:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	40 e8       	ldi	r20, 0x80	; 128
    1168:	5f e3       	ldi	r21, 0x3F	; 63
    116a:	6b 89       	ldd	r22, Y+19	; 0x13
    116c:	7c 89       	ldd	r23, Y+20	; 0x14
    116e:	8d 89       	ldd	r24, Y+21	; 0x15
    1170:	9e 89       	ldd	r25, Y+22	; 0x16
    1172:	f4 d1       	rcall	.+1000   	; 0x155c <__cmpsf2>
    1174:	88 23       	and	r24, r24
    1176:	2c f4       	brge	.+10     	; 0x1182 <__stack+0x83>
		__ticks = 1;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	98 8f       	std	Y+24, r25	; 0x18
    117e:	8f 8b       	std	Y+23, r24	; 0x17
    1180:	3b c0       	rjmp	.+118    	; 0x11f8 <__stack+0xf9>
	else if (__tmp > 65535)
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	3f ef       	ldi	r19, 0xFF	; 255
    1186:	4f e7       	ldi	r20, 0x7F	; 127
    1188:	57 e4       	ldi	r21, 0x47	; 71
    118a:	6b 89       	ldd	r22, Y+19	; 0x13
    118c:	7c 89       	ldd	r23, Y+20	; 0x14
    118e:	8d 89       	ldd	r24, Y+21	; 0x15
    1190:	9e 89       	ldd	r25, Y+22	; 0x16
    1192:	2e d3       	rcall	.+1628   	; 0x17f0 <__gesf2>
    1194:	18 16       	cp	r1, r24
    1196:	3c f5       	brge	.+78     	; 0x11e6 <__stack+0xe7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	40 e2       	ldi	r20, 0x20	; 32
    119e:	51 e4       	ldi	r21, 0x41	; 65
    11a0:	6f 85       	ldd	r22, Y+15	; 0x0f
    11a2:	78 89       	ldd	r23, Y+16	; 0x10
    11a4:	89 89       	ldd	r24, Y+17	; 0x11
    11a6:	9a 89       	ldd	r25, Y+18	; 0x12
    11a8:	27 d3       	rcall	.+1614   	; 0x17f8 <__mulsf3>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	bc 01       	movw	r22, r24
    11b0:	cd 01       	movw	r24, r26
    11b2:	40 d2       	rcall	.+1152   	; 0x1634 <__fixunssfsi>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	98 8f       	std	Y+24, r25	; 0x18
    11ba:	8f 8b       	std	Y+23, r24	; 0x17
    11bc:	0f c0       	rjmp	.+30     	; 0x11dc <__stack+0xdd>
    11be:	8a ef       	ldi	r24, 0xFA	; 250
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	9a 8f       	std	Y+26, r25	; 0x1a
    11c4:	89 8f       	std	Y+25, r24	; 0x19
    11c6:	89 8d       	ldd	r24, Y+25	; 0x19
    11c8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	f1 f7       	brne	.-4      	; 0x11ca <__stack+0xcb>
    11ce:	9a 8f       	std	Y+26, r25	; 0x1a
    11d0:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d2:	8f 89       	ldd	r24, Y+23	; 0x17
    11d4:	98 8d       	ldd	r25, Y+24	; 0x18
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	98 8f       	std	Y+24, r25	; 0x18
    11da:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11dc:	8f 89       	ldd	r24, Y+23	; 0x17
    11de:	98 8d       	ldd	r25, Y+24	; 0x18
    11e0:	89 2b       	or	r24, r25
    11e2:	69 f7       	brne	.-38     	; 0x11be <__stack+0xbf>
    11e4:	13 c0       	rjmp	.+38     	; 0x120c <__stack+0x10d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e6:	6b 89       	ldd	r22, Y+19	; 0x13
    11e8:	7c 89       	ldd	r23, Y+20	; 0x14
    11ea:	8d 89       	ldd	r24, Y+21	; 0x15
    11ec:	9e 89       	ldd	r25, Y+22	; 0x16
    11ee:	22 d2       	rcall	.+1092   	; 0x1634 <__fixunssfsi>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	98 8f       	std	Y+24, r25	; 0x18
    11f6:	8f 8b       	std	Y+23, r24	; 0x17
    11f8:	8f 89       	ldd	r24, Y+23	; 0x17
    11fa:	98 8d       	ldd	r25, Y+24	; 0x18
    11fc:	9c 8f       	std	Y+28, r25	; 0x1c
    11fe:	8b 8f       	std	Y+27, r24	; 0x1b
    1200:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1202:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	f1 f7       	brne	.-4      	; 0x1204 <__stack+0x105>
    1208:	9c 8f       	std	Y+28, r25	; 0x1c
    120a:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(1000);
	PORTG = 0x00;
    120c:	84 e3       	ldi	r24, 0x34	; 52
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	fc 01       	movw	r30, r24
    1212:	10 82       	st	Z, r1
	servo_init(50);
    1214:	82 e3       	ldi	r24, 0x32	; 50
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	0e 94 70 00 	call	0xe0	; 0xe0 <servo_init>
	timer_init(1000);
    121c:	88 ee       	ldi	r24, 0xE8	; 232
    121e:	93 e0       	ldi	r25, 0x03	; 3
    1220:	6d de       	rcall	.-806    	; 0xefc <timer_init>
	CAN_Init(1);
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	b0 d9       	rcall	.-3232   	; 0x586 <CAN_Init>
}
    1226:	6c 96       	adiw	r28, 0x1c	; 28
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	08 95       	ret

00001238 <system_get_system_time>:
uint32_t system_get_system_time(void)
{
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    1240:	80 91 a3 01 	lds	r24, 0x01A3
    1244:	90 91 a4 01 	lds	r25, 0x01A4
    1248:	a0 91 a5 01 	lds	r26, 0x01A5
    124c:	b0 91 a6 01 	lds	r27, 0x01A6
}
    1250:	bc 01       	movw	r22, r24
    1252:	cd 01       	movw	r24, r26
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	08 95       	ret

0000125a <__vector_23>:

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);

	UBRR1H = temp >> 8;
	UBRR1L = temp;
}
    125a:	1f 92       	push	r1
    125c:	0f 92       	push	r0
    125e:	00 90 5f 00 	lds	r0, 0x005F
    1262:	0f 92       	push	r0
    1264:	11 24       	eor	r1, r1
    1266:	00 90 5b 00 	lds	r0, 0x005B
    126a:	0f 92       	push	r0
    126c:	2f 93       	push	r18
    126e:	3f 93       	push	r19
    1270:	8f 93       	push	r24
    1272:	9f 93       	push	r25
    1274:	ef 93       	push	r30
    1276:	ff 93       	push	r31
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	80 91 e9 01 	lds	r24, 0x01E9
    1284:	88 23       	and	r24, r24
    1286:	d1 f0       	breq	.+52     	; 0x12bc <__vector_23+0x62>
    1288:	80 91 e9 01 	lds	r24, 0x01E9
    128c:	81 50       	subi	r24, 0x01	; 1
    128e:	80 93 e9 01 	sts	0x01E9, r24
    1292:	86 ec       	ldi	r24, 0xC6	; 198
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	20 91 ea 01 	lds	r18, 0x01EA
    129a:	22 2f       	mov	r18, r18
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	27 55       	subi	r18, 0x57	; 87
    12a0:	3e 4f       	sbci	r19, 0xFE	; 254
    12a2:	f9 01       	movw	r30, r18
    12a4:	20 81       	ld	r18, Z
    12a6:	fc 01       	movw	r30, r24
    12a8:	20 83       	st	Z, r18
    12aa:	80 91 ea 01 	lds	r24, 0x01EA
    12ae:	8f 5f       	subi	r24, 0xFF	; 255
    12b0:	80 93 ea 01 	sts	0x01EA, r24
    12b4:	80 34       	cpi	r24, 0x40	; 64
    12b6:	11 f4       	brne	.+4      	; 0x12bc <__vector_23+0x62>
    12b8:	10 92 ea 01 	sts	0x01EA, r1
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	ff 91       	pop	r31
    12c2:	ef 91       	pop	r30
    12c4:	9f 91       	pop	r25
    12c6:	8f 91       	pop	r24
    12c8:	3f 91       	pop	r19
    12ca:	2f 91       	pop	r18
    12cc:	0f 90       	pop	r0
    12ce:	00 92 5b 00 	sts	0x005B, r0
    12d2:	0f 90       	pop	r0
    12d4:	00 92 5f 00 	sts	0x005F, r0
    12d8:	0f 90       	pop	r0
    12da:	1f 90       	pop	r1
    12dc:	18 95       	reti

000012de <__vector_21>:
    12de:	1f 92       	push	r1
    12e0:	0f 92       	push	r0
    12e2:	00 90 5f 00 	lds	r0, 0x005F
    12e6:	0f 92       	push	r0
    12e8:	11 24       	eor	r1, r1
    12ea:	00 90 5b 00 	lds	r0, 0x005B
    12ee:	0f 92       	push	r0
    12f0:	2f 93       	push	r18
    12f2:	3f 93       	push	r19
    12f4:	8f 93       	push	r24
    12f6:	9f 93       	push	r25
    12f8:	ef 93       	push	r30
    12fa:	ff 93       	push	r31
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	1f 92       	push	r1
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	80 ec       	ldi	r24, 0xC0	; 192
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	fc 01       	movw	r30, r24
    130c:	80 81       	ld	r24, Z
    130e:	89 83       	std	Y+1, r24	; 0x01
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	88 2f       	mov	r24, r24
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	8c 71       	andi	r24, 0x1C	; 28
    1318:	99 27       	eor	r25, r25
    131a:	89 2b       	or	r24, r25
    131c:	d1 f4       	brne	.+52     	; 0x1352 <__vector_21+0x74>
    131e:	80 91 2b 02 	lds	r24, 0x022B
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	26 ec       	ldi	r18, 0xC6	; 198
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	f9 01       	movw	r30, r18
    132c:	20 81       	ld	r18, Z
    132e:	85 51       	subi	r24, 0x15	; 21
    1330:	9e 4f       	sbci	r25, 0xFE	; 254
    1332:	fc 01       	movw	r30, r24
    1334:	20 83       	st	Z, r18
    1336:	80 91 2b 02 	lds	r24, 0x022B
    133a:	8f 5f       	subi	r24, 0xFF	; 255
    133c:	80 93 2b 02 	sts	0x022B, r24
    1340:	80 34       	cpi	r24, 0x40	; 64
    1342:	11 f4       	brne	.+4      	; 0x1348 <__vector_21+0x6a>
    1344:	10 92 2b 02 	sts	0x022B, r1
    1348:	80 91 2c 02 	lds	r24, 0x022C
    134c:	8f 5f       	subi	r24, 0xFF	; 255
    134e:	80 93 2c 02 	sts	0x022C, r24
    1352:	0f 90       	pop	r0
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	ff 91       	pop	r31
    135a:	ef 91       	pop	r30
    135c:	9f 91       	pop	r25
    135e:	8f 91       	pop	r24
    1360:	3f 91       	pop	r19
    1362:	2f 91       	pop	r18
    1364:	0f 90       	pop	r0
    1366:	00 92 5b 00 	sts	0x005B, r0
    136a:	0f 90       	pop	r0
    136c:	00 92 5f 00 	sts	0x005F, r0
    1370:	0f 90       	pop	r0
    1372:	1f 90       	pop	r1
    1374:	18 95       	reti

00001376 <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    1376:	1f 92       	push	r1
    1378:	0f 92       	push	r0
    137a:	00 90 5f 00 	lds	r0, 0x005F
    137e:	0f 92       	push	r0
    1380:	11 24       	eor	r1, r1
    1382:	00 90 5b 00 	lds	r0, 0x005B
    1386:	0f 92       	push	r0
    1388:	2f 93       	push	r18
    138a:	3f 93       	push	r19
    138c:	8f 93       	push	r24
    138e:	9f 93       	push	r25
    1390:	ef 93       	push	r30
    1392:	ff 93       	push	r31
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    139c:	80 91 6d 02 	lds	r24, 0x026D
    13a0:	88 23       	and	r24, r24
    13a2:	d1 f0       	breq	.+52     	; 0x13d8 <__vector_34+0x62>
	{
		tx1_counter--;
    13a4:	80 91 6d 02 	lds	r24, 0x026D
    13a8:	81 50       	subi	r24, 0x01	; 1
    13aa:	80 93 6d 02 	sts	0x026D, r24
		UDR1=tx1_buffer[tx1_rd_index];
    13ae:	8e ec       	ldi	r24, 0xCE	; 206
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	20 91 6e 02 	lds	r18, 0x026E
    13b6:	22 2f       	mov	r18, r18
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	23 5d       	subi	r18, 0xD3	; 211
    13bc:	3d 4f       	sbci	r19, 0xFD	; 253
    13be:	f9 01       	movw	r30, r18
    13c0:	20 81       	ld	r18, Z
    13c2:	fc 01       	movw	r30, r24
    13c4:	20 83       	st	Z, r18
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    13c6:	80 91 6e 02 	lds	r24, 0x026E
    13ca:	8f 5f       	subi	r24, 0xFF	; 255
    13cc:	80 93 6e 02 	sts	0x026E, r24
    13d0:	80 34       	cpi	r24, 0x40	; 64
    13d2:	11 f4       	brne	.+4      	; 0x13d8 <__vector_34+0x62>
			tx1_rd_index = 0;
    13d4:	10 92 6e 02 	sts	0x026E, r1
	}
}
    13d8:	df 91       	pop	r29
    13da:	cf 91       	pop	r28
    13dc:	ff 91       	pop	r31
    13de:	ef 91       	pop	r30
    13e0:	9f 91       	pop	r25
    13e2:	8f 91       	pop	r24
    13e4:	3f 91       	pop	r19
    13e6:	2f 91       	pop	r18
    13e8:	0f 90       	pop	r0
    13ea:	00 92 5b 00 	sts	0x005B, r0
    13ee:	0f 90       	pop	r0
    13f0:	00 92 5f 00 	sts	0x005F, r0
    13f4:	0f 90       	pop	r0
    13f6:	1f 90       	pop	r1
    13f8:	18 95       	reti

000013fa <__vector_32>:

ISR(USART1_RX_vect)
{
    13fa:	1f 92       	push	r1
    13fc:	0f 92       	push	r0
    13fe:	00 90 5f 00 	lds	r0, 0x005F
    1402:	0f 92       	push	r0
    1404:	11 24       	eor	r1, r1
    1406:	00 90 5b 00 	lds	r0, 0x005B
    140a:	0f 92       	push	r0
    140c:	2f 93       	push	r18
    140e:	3f 93       	push	r19
    1410:	8f 93       	push	r24
    1412:	9f 93       	push	r25
    1414:	ef 93       	push	r30
    1416:	ff 93       	push	r31
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	1f 92       	push	r1
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    1422:	88 ec       	ldi	r24, 0xC8	; 200
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	fc 01       	movw	r30, r24
    1428:	80 81       	ld	r24, Z
    142a:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	88 2f       	mov	r24, r24
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	8c 71       	andi	r24, 0x1C	; 28
    1434:	99 27       	eor	r25, r25
    1436:	89 2b       	or	r24, r25
    1438:	d1 f4       	brne	.+52     	; 0x146e <__vector_32+0x74>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    143a:	80 91 af 02 	lds	r24, 0x02AF
    143e:	88 2f       	mov	r24, r24
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	2e ec       	ldi	r18, 0xCE	; 206
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	f9 01       	movw	r30, r18
    1448:	20 81       	ld	r18, Z
    144a:	81 59       	subi	r24, 0x91	; 145
    144c:	9d 4f       	sbci	r25, 0xFD	; 253
    144e:	fc 01       	movw	r30, r24
    1450:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    1452:	80 91 af 02 	lds	r24, 0x02AF
    1456:	8f 5f       	subi	r24, 0xFF	; 255
    1458:	80 93 af 02 	sts	0x02AF, r24
    145c:	80 34       	cpi	r24, 0x40	; 64
    145e:	11 f4       	brne	.+4      	; 0x1464 <__vector_32+0x6a>
		rx1_wr_index = 0;
    1460:	10 92 af 02 	sts	0x02AF, r1

		rx1_counter++;
    1464:	80 91 b0 02 	lds	r24, 0x02B0
    1468:	8f 5f       	subi	r24, 0xFF	; 255
    146a:	80 93 b0 02 	sts	0x02B0, r24
	}
}
    146e:	0f 90       	pop	r0
    1470:	df 91       	pop	r29
    1472:	cf 91       	pop	r28
    1474:	ff 91       	pop	r31
    1476:	ef 91       	pop	r30
    1478:	9f 91       	pop	r25
    147a:	8f 91       	pop	r24
    147c:	3f 91       	pop	r19
    147e:	2f 91       	pop	r18
    1480:	0f 90       	pop	r0
    1482:	00 92 5b 00 	sts	0x005B, r0
    1486:	0f 90       	pop	r0
    1488:	00 92 5f 00 	sts	0x005F, r0
    148c:	0f 90       	pop	r0
    148e:	1f 90       	pop	r1
    1490:	18 95       	reti

00001492 <__subsf3>:
    1492:	50 58       	subi	r21, 0x80	; 128

00001494 <__addsf3>:
    1494:	bb 27       	eor	r27, r27
    1496:	aa 27       	eor	r26, r26
    1498:	0e d0       	rcall	.+28     	; 0x14b6 <__addsf3x>
    149a:	70 c1       	rjmp	.+736    	; 0x177c <__fp_round>
    149c:	61 d1       	rcall	.+706    	; 0x1760 <__fp_pscA>
    149e:	30 f0       	brcs	.+12     	; 0x14ac <__addsf3+0x18>
    14a0:	66 d1       	rcall	.+716    	; 0x176e <__fp_pscB>
    14a2:	20 f0       	brcs	.+8      	; 0x14ac <__addsf3+0x18>
    14a4:	31 f4       	brne	.+12     	; 0x14b2 <__addsf3+0x1e>
    14a6:	9f 3f       	cpi	r25, 0xFF	; 255
    14a8:	11 f4       	brne	.+4      	; 0x14ae <__addsf3+0x1a>
    14aa:	1e f4       	brtc	.+6      	; 0x14b2 <__addsf3+0x1e>
    14ac:	56 c1       	rjmp	.+684    	; 0x175a <__fp_nan>
    14ae:	0e f4       	brtc	.+2      	; 0x14b2 <__addsf3+0x1e>
    14b0:	e0 95       	com	r30
    14b2:	e7 fb       	bst	r30, 7
    14b4:	4c c1       	rjmp	.+664    	; 0x174e <__fp_inf>

000014b6 <__addsf3x>:
    14b6:	e9 2f       	mov	r30, r25
    14b8:	72 d1       	rcall	.+740    	; 0x179e <__fp_split3>
    14ba:	80 f3       	brcs	.-32     	; 0x149c <__addsf3+0x8>
    14bc:	ba 17       	cp	r27, r26
    14be:	62 07       	cpc	r22, r18
    14c0:	73 07       	cpc	r23, r19
    14c2:	84 07       	cpc	r24, r20
    14c4:	95 07       	cpc	r25, r21
    14c6:	18 f0       	brcs	.+6      	; 0x14ce <__addsf3x+0x18>
    14c8:	71 f4       	brne	.+28     	; 0x14e6 <__addsf3x+0x30>
    14ca:	9e f5       	brtc	.+102    	; 0x1532 <__addsf3x+0x7c>
    14cc:	8a c1       	rjmp	.+788    	; 0x17e2 <__fp_zero>
    14ce:	0e f4       	brtc	.+2      	; 0x14d2 <__addsf3x+0x1c>
    14d0:	e0 95       	com	r30
    14d2:	0b 2e       	mov	r0, r27
    14d4:	ba 2f       	mov	r27, r26
    14d6:	a0 2d       	mov	r26, r0
    14d8:	0b 01       	movw	r0, r22
    14da:	b9 01       	movw	r22, r18
    14dc:	90 01       	movw	r18, r0
    14de:	0c 01       	movw	r0, r24
    14e0:	ca 01       	movw	r24, r20
    14e2:	a0 01       	movw	r20, r0
    14e4:	11 24       	eor	r1, r1
    14e6:	ff 27       	eor	r31, r31
    14e8:	59 1b       	sub	r21, r25
    14ea:	99 f0       	breq	.+38     	; 0x1512 <__addsf3x+0x5c>
    14ec:	59 3f       	cpi	r21, 0xF9	; 249
    14ee:	50 f4       	brcc	.+20     	; 0x1504 <__addsf3x+0x4e>
    14f0:	50 3e       	cpi	r21, 0xE0	; 224
    14f2:	68 f1       	brcs	.+90     	; 0x154e <__addsf3x+0x98>
    14f4:	1a 16       	cp	r1, r26
    14f6:	f0 40       	sbci	r31, 0x00	; 0
    14f8:	a2 2f       	mov	r26, r18
    14fa:	23 2f       	mov	r18, r19
    14fc:	34 2f       	mov	r19, r20
    14fe:	44 27       	eor	r20, r20
    1500:	58 5f       	subi	r21, 0xF8	; 248
    1502:	f3 cf       	rjmp	.-26     	; 0x14ea <__addsf3x+0x34>
    1504:	46 95       	lsr	r20
    1506:	37 95       	ror	r19
    1508:	27 95       	ror	r18
    150a:	a7 95       	ror	r26
    150c:	f0 40       	sbci	r31, 0x00	; 0
    150e:	53 95       	inc	r21
    1510:	c9 f7       	brne	.-14     	; 0x1504 <__addsf3x+0x4e>
    1512:	7e f4       	brtc	.+30     	; 0x1532 <__addsf3x+0x7c>
    1514:	1f 16       	cp	r1, r31
    1516:	ba 0b       	sbc	r27, r26
    1518:	62 0b       	sbc	r22, r18
    151a:	73 0b       	sbc	r23, r19
    151c:	84 0b       	sbc	r24, r20
    151e:	ba f0       	brmi	.+46     	; 0x154e <__addsf3x+0x98>
    1520:	91 50       	subi	r25, 0x01	; 1
    1522:	a1 f0       	breq	.+40     	; 0x154c <__addsf3x+0x96>
    1524:	ff 0f       	add	r31, r31
    1526:	bb 1f       	adc	r27, r27
    1528:	66 1f       	adc	r22, r22
    152a:	77 1f       	adc	r23, r23
    152c:	88 1f       	adc	r24, r24
    152e:	c2 f7       	brpl	.-16     	; 0x1520 <__addsf3x+0x6a>
    1530:	0e c0       	rjmp	.+28     	; 0x154e <__addsf3x+0x98>
    1532:	ba 0f       	add	r27, r26
    1534:	62 1f       	adc	r22, r18
    1536:	73 1f       	adc	r23, r19
    1538:	84 1f       	adc	r24, r20
    153a:	48 f4       	brcc	.+18     	; 0x154e <__addsf3x+0x98>
    153c:	87 95       	ror	r24
    153e:	77 95       	ror	r23
    1540:	67 95       	ror	r22
    1542:	b7 95       	ror	r27
    1544:	f7 95       	ror	r31
    1546:	9e 3f       	cpi	r25, 0xFE	; 254
    1548:	08 f0       	brcs	.+2      	; 0x154c <__addsf3x+0x96>
    154a:	b3 cf       	rjmp	.-154    	; 0x14b2 <__addsf3+0x1e>
    154c:	93 95       	inc	r25
    154e:	88 0f       	add	r24, r24
    1550:	08 f0       	brcs	.+2      	; 0x1554 <__addsf3x+0x9e>
    1552:	99 27       	eor	r25, r25
    1554:	ee 0f       	add	r30, r30
    1556:	97 95       	ror	r25
    1558:	87 95       	ror	r24
    155a:	08 95       	ret

0000155c <__cmpsf2>:
    155c:	d4 d0       	rcall	.+424    	; 0x1706 <__fp_cmp>
    155e:	08 f4       	brcc	.+2      	; 0x1562 <__cmpsf2+0x6>
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	08 95       	ret

00001564 <__divsf3>:
    1564:	0c d0       	rcall	.+24     	; 0x157e <__divsf3x>
    1566:	0a c1       	rjmp	.+532    	; 0x177c <__fp_round>
    1568:	02 d1       	rcall	.+516    	; 0x176e <__fp_pscB>
    156a:	40 f0       	brcs	.+16     	; 0x157c <__divsf3+0x18>
    156c:	f9 d0       	rcall	.+498    	; 0x1760 <__fp_pscA>
    156e:	30 f0       	brcs	.+12     	; 0x157c <__divsf3+0x18>
    1570:	21 f4       	brne	.+8      	; 0x157a <__divsf3+0x16>
    1572:	5f 3f       	cpi	r21, 0xFF	; 255
    1574:	19 f0       	breq	.+6      	; 0x157c <__divsf3+0x18>
    1576:	eb c0       	rjmp	.+470    	; 0x174e <__fp_inf>
    1578:	51 11       	cpse	r21, r1
    157a:	34 c1       	rjmp	.+616    	; 0x17e4 <__fp_szero>
    157c:	ee c0       	rjmp	.+476    	; 0x175a <__fp_nan>

0000157e <__divsf3x>:
    157e:	0f d1       	rcall	.+542    	; 0x179e <__fp_split3>
    1580:	98 f3       	brcs	.-26     	; 0x1568 <__divsf3+0x4>

00001582 <__divsf3_pse>:
    1582:	99 23       	and	r25, r25
    1584:	c9 f3       	breq	.-14     	; 0x1578 <__divsf3+0x14>
    1586:	55 23       	and	r21, r21
    1588:	b1 f3       	breq	.-20     	; 0x1576 <__divsf3+0x12>
    158a:	95 1b       	sub	r25, r21
    158c:	55 0b       	sbc	r21, r21
    158e:	bb 27       	eor	r27, r27
    1590:	aa 27       	eor	r26, r26
    1592:	62 17       	cp	r22, r18
    1594:	73 07       	cpc	r23, r19
    1596:	84 07       	cpc	r24, r20
    1598:	38 f0       	brcs	.+14     	; 0x15a8 <__divsf3_pse+0x26>
    159a:	9f 5f       	subi	r25, 0xFF	; 255
    159c:	5f 4f       	sbci	r21, 0xFF	; 255
    159e:	22 0f       	add	r18, r18
    15a0:	33 1f       	adc	r19, r19
    15a2:	44 1f       	adc	r20, r20
    15a4:	aa 1f       	adc	r26, r26
    15a6:	a9 f3       	breq	.-22     	; 0x1592 <__divsf3_pse+0x10>
    15a8:	33 d0       	rcall	.+102    	; 0x1610 <__divsf3_pse+0x8e>
    15aa:	0e 2e       	mov	r0, r30
    15ac:	3a f0       	brmi	.+14     	; 0x15bc <__divsf3_pse+0x3a>
    15ae:	e0 e8       	ldi	r30, 0x80	; 128
    15b0:	30 d0       	rcall	.+96     	; 0x1612 <__divsf3_pse+0x90>
    15b2:	91 50       	subi	r25, 0x01	; 1
    15b4:	50 40       	sbci	r21, 0x00	; 0
    15b6:	e6 95       	lsr	r30
    15b8:	00 1c       	adc	r0, r0
    15ba:	ca f7       	brpl	.-14     	; 0x15ae <__divsf3_pse+0x2c>
    15bc:	29 d0       	rcall	.+82     	; 0x1610 <__divsf3_pse+0x8e>
    15be:	fe 2f       	mov	r31, r30
    15c0:	27 d0       	rcall	.+78     	; 0x1610 <__divsf3_pse+0x8e>
    15c2:	66 0f       	add	r22, r22
    15c4:	77 1f       	adc	r23, r23
    15c6:	88 1f       	adc	r24, r24
    15c8:	bb 1f       	adc	r27, r27
    15ca:	26 17       	cp	r18, r22
    15cc:	37 07       	cpc	r19, r23
    15ce:	48 07       	cpc	r20, r24
    15d0:	ab 07       	cpc	r26, r27
    15d2:	b0 e8       	ldi	r27, 0x80	; 128
    15d4:	09 f0       	breq	.+2      	; 0x15d8 <__divsf3_pse+0x56>
    15d6:	bb 0b       	sbc	r27, r27
    15d8:	80 2d       	mov	r24, r0
    15da:	bf 01       	movw	r22, r30
    15dc:	ff 27       	eor	r31, r31
    15de:	93 58       	subi	r25, 0x83	; 131
    15e0:	5f 4f       	sbci	r21, 0xFF	; 255
    15e2:	2a f0       	brmi	.+10     	; 0x15ee <__divsf3_pse+0x6c>
    15e4:	9e 3f       	cpi	r25, 0xFE	; 254
    15e6:	51 05       	cpc	r21, r1
    15e8:	68 f0       	brcs	.+26     	; 0x1604 <__divsf3_pse+0x82>
    15ea:	b1 c0       	rjmp	.+354    	; 0x174e <__fp_inf>
    15ec:	fb c0       	rjmp	.+502    	; 0x17e4 <__fp_szero>
    15ee:	5f 3f       	cpi	r21, 0xFF	; 255
    15f0:	ec f3       	brlt	.-6      	; 0x15ec <__divsf3_pse+0x6a>
    15f2:	98 3e       	cpi	r25, 0xE8	; 232
    15f4:	dc f3       	brlt	.-10     	; 0x15ec <__divsf3_pse+0x6a>
    15f6:	86 95       	lsr	r24
    15f8:	77 95       	ror	r23
    15fa:	67 95       	ror	r22
    15fc:	b7 95       	ror	r27
    15fe:	f7 95       	ror	r31
    1600:	9f 5f       	subi	r25, 0xFF	; 255
    1602:	c9 f7       	brne	.-14     	; 0x15f6 <__divsf3_pse+0x74>
    1604:	88 0f       	add	r24, r24
    1606:	91 1d       	adc	r25, r1
    1608:	96 95       	lsr	r25
    160a:	87 95       	ror	r24
    160c:	97 f9       	bld	r25, 7
    160e:	08 95       	ret
    1610:	e1 e0       	ldi	r30, 0x01	; 1
    1612:	66 0f       	add	r22, r22
    1614:	77 1f       	adc	r23, r23
    1616:	88 1f       	adc	r24, r24
    1618:	bb 1f       	adc	r27, r27
    161a:	62 17       	cp	r22, r18
    161c:	73 07       	cpc	r23, r19
    161e:	84 07       	cpc	r24, r20
    1620:	ba 07       	cpc	r27, r26
    1622:	20 f0       	brcs	.+8      	; 0x162c <__divsf3_pse+0xaa>
    1624:	62 1b       	sub	r22, r18
    1626:	73 0b       	sbc	r23, r19
    1628:	84 0b       	sbc	r24, r20
    162a:	ba 0b       	sbc	r27, r26
    162c:	ee 1f       	adc	r30, r30
    162e:	88 f7       	brcc	.-30     	; 0x1612 <__divsf3_pse+0x90>
    1630:	e0 95       	com	r30
    1632:	08 95       	ret

00001634 <__fixunssfsi>:
    1634:	bc d0       	rcall	.+376    	; 0x17ae <__fp_splitA>
    1636:	88 f0       	brcs	.+34     	; 0x165a <__fixunssfsi+0x26>
    1638:	9f 57       	subi	r25, 0x7F	; 127
    163a:	90 f0       	brcs	.+36     	; 0x1660 <__fixunssfsi+0x2c>
    163c:	b9 2f       	mov	r27, r25
    163e:	99 27       	eor	r25, r25
    1640:	b7 51       	subi	r27, 0x17	; 23
    1642:	a0 f0       	brcs	.+40     	; 0x166c <__fixunssfsi+0x38>
    1644:	d1 f0       	breq	.+52     	; 0x167a <__fixunssfsi+0x46>
    1646:	66 0f       	add	r22, r22
    1648:	77 1f       	adc	r23, r23
    164a:	88 1f       	adc	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	1a f0       	brmi	.+6      	; 0x1656 <__fixunssfsi+0x22>
    1650:	ba 95       	dec	r27
    1652:	c9 f7       	brne	.-14     	; 0x1646 <__fixunssfsi+0x12>
    1654:	12 c0       	rjmp	.+36     	; 0x167a <__fixunssfsi+0x46>
    1656:	b1 30       	cpi	r27, 0x01	; 1
    1658:	81 f0       	breq	.+32     	; 0x167a <__fixunssfsi+0x46>
    165a:	c3 d0       	rcall	.+390    	; 0x17e2 <__fp_zero>
    165c:	b1 e0       	ldi	r27, 0x01	; 1
    165e:	08 95       	ret
    1660:	c0 c0       	rjmp	.+384    	; 0x17e2 <__fp_zero>
    1662:	67 2f       	mov	r22, r23
    1664:	78 2f       	mov	r23, r24
    1666:	88 27       	eor	r24, r24
    1668:	b8 5f       	subi	r27, 0xF8	; 248
    166a:	39 f0       	breq	.+14     	; 0x167a <__fixunssfsi+0x46>
    166c:	b9 3f       	cpi	r27, 0xF9	; 249
    166e:	cc f3       	brlt	.-14     	; 0x1662 <__fixunssfsi+0x2e>
    1670:	86 95       	lsr	r24
    1672:	77 95       	ror	r23
    1674:	67 95       	ror	r22
    1676:	b3 95       	inc	r27
    1678:	d9 f7       	brne	.-10     	; 0x1670 <__fixunssfsi+0x3c>
    167a:	3e f4       	brtc	.+14     	; 0x168a <__fixunssfsi+0x56>
    167c:	90 95       	com	r25
    167e:	80 95       	com	r24
    1680:	70 95       	com	r23
    1682:	61 95       	neg	r22
    1684:	7f 4f       	sbci	r23, 0xFF	; 255
    1686:	8f 4f       	sbci	r24, 0xFF	; 255
    1688:	9f 4f       	sbci	r25, 0xFF	; 255
    168a:	08 95       	ret

0000168c <__floatunsisf>:
    168c:	e8 94       	clt
    168e:	09 c0       	rjmp	.+18     	; 0x16a2 <__floatsisf+0x12>

00001690 <__floatsisf>:
    1690:	97 fb       	bst	r25, 7
    1692:	3e f4       	brtc	.+14     	; 0x16a2 <__floatsisf+0x12>
    1694:	90 95       	com	r25
    1696:	80 95       	com	r24
    1698:	70 95       	com	r23
    169a:	61 95       	neg	r22
    169c:	7f 4f       	sbci	r23, 0xFF	; 255
    169e:	8f 4f       	sbci	r24, 0xFF	; 255
    16a0:	9f 4f       	sbci	r25, 0xFF	; 255
    16a2:	99 23       	and	r25, r25
    16a4:	a9 f0       	breq	.+42     	; 0x16d0 <__floatsisf+0x40>
    16a6:	f9 2f       	mov	r31, r25
    16a8:	96 e9       	ldi	r25, 0x96	; 150
    16aa:	bb 27       	eor	r27, r27
    16ac:	93 95       	inc	r25
    16ae:	f6 95       	lsr	r31
    16b0:	87 95       	ror	r24
    16b2:	77 95       	ror	r23
    16b4:	67 95       	ror	r22
    16b6:	b7 95       	ror	r27
    16b8:	f1 11       	cpse	r31, r1
    16ba:	f8 cf       	rjmp	.-16     	; 0x16ac <__floatsisf+0x1c>
    16bc:	fa f4       	brpl	.+62     	; 0x16fc <__floatsisf+0x6c>
    16be:	bb 0f       	add	r27, r27
    16c0:	11 f4       	brne	.+4      	; 0x16c6 <__floatsisf+0x36>
    16c2:	60 ff       	sbrs	r22, 0
    16c4:	1b c0       	rjmp	.+54     	; 0x16fc <__floatsisf+0x6c>
    16c6:	6f 5f       	subi	r22, 0xFF	; 255
    16c8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ca:	8f 4f       	sbci	r24, 0xFF	; 255
    16cc:	9f 4f       	sbci	r25, 0xFF	; 255
    16ce:	16 c0       	rjmp	.+44     	; 0x16fc <__floatsisf+0x6c>
    16d0:	88 23       	and	r24, r24
    16d2:	11 f0       	breq	.+4      	; 0x16d8 <__floatsisf+0x48>
    16d4:	96 e9       	ldi	r25, 0x96	; 150
    16d6:	11 c0       	rjmp	.+34     	; 0x16fa <__floatsisf+0x6a>
    16d8:	77 23       	and	r23, r23
    16da:	21 f0       	breq	.+8      	; 0x16e4 <__floatsisf+0x54>
    16dc:	9e e8       	ldi	r25, 0x8E	; 142
    16de:	87 2f       	mov	r24, r23
    16e0:	76 2f       	mov	r23, r22
    16e2:	05 c0       	rjmp	.+10     	; 0x16ee <__floatsisf+0x5e>
    16e4:	66 23       	and	r22, r22
    16e6:	71 f0       	breq	.+28     	; 0x1704 <__floatsisf+0x74>
    16e8:	96 e8       	ldi	r25, 0x86	; 134
    16ea:	86 2f       	mov	r24, r22
    16ec:	70 e0       	ldi	r23, 0x00	; 0
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	2a f0       	brmi	.+10     	; 0x16fc <__floatsisf+0x6c>
    16f2:	9a 95       	dec	r25
    16f4:	66 0f       	add	r22, r22
    16f6:	77 1f       	adc	r23, r23
    16f8:	88 1f       	adc	r24, r24
    16fa:	da f7       	brpl	.-10     	; 0x16f2 <__floatsisf+0x62>
    16fc:	88 0f       	add	r24, r24
    16fe:	96 95       	lsr	r25
    1700:	87 95       	ror	r24
    1702:	97 f9       	bld	r25, 7
    1704:	08 95       	ret

00001706 <__fp_cmp>:
    1706:	99 0f       	add	r25, r25
    1708:	00 08       	sbc	r0, r0
    170a:	55 0f       	add	r21, r21
    170c:	aa 0b       	sbc	r26, r26
    170e:	e0 e8       	ldi	r30, 0x80	; 128
    1710:	fe ef       	ldi	r31, 0xFE	; 254
    1712:	16 16       	cp	r1, r22
    1714:	17 06       	cpc	r1, r23
    1716:	e8 07       	cpc	r30, r24
    1718:	f9 07       	cpc	r31, r25
    171a:	c0 f0       	brcs	.+48     	; 0x174c <__fp_cmp+0x46>
    171c:	12 16       	cp	r1, r18
    171e:	13 06       	cpc	r1, r19
    1720:	e4 07       	cpc	r30, r20
    1722:	f5 07       	cpc	r31, r21
    1724:	98 f0       	brcs	.+38     	; 0x174c <__fp_cmp+0x46>
    1726:	62 1b       	sub	r22, r18
    1728:	73 0b       	sbc	r23, r19
    172a:	84 0b       	sbc	r24, r20
    172c:	95 0b       	sbc	r25, r21
    172e:	39 f4       	brne	.+14     	; 0x173e <__fp_cmp+0x38>
    1730:	0a 26       	eor	r0, r26
    1732:	61 f0       	breq	.+24     	; 0x174c <__fp_cmp+0x46>
    1734:	23 2b       	or	r18, r19
    1736:	24 2b       	or	r18, r20
    1738:	25 2b       	or	r18, r21
    173a:	21 f4       	brne	.+8      	; 0x1744 <__fp_cmp+0x3e>
    173c:	08 95       	ret
    173e:	0a 26       	eor	r0, r26
    1740:	09 f4       	brne	.+2      	; 0x1744 <__fp_cmp+0x3e>
    1742:	a1 40       	sbci	r26, 0x01	; 1
    1744:	a6 95       	lsr	r26
    1746:	8f ef       	ldi	r24, 0xFF	; 255
    1748:	81 1d       	adc	r24, r1
    174a:	81 1d       	adc	r24, r1
    174c:	08 95       	ret

0000174e <__fp_inf>:
    174e:	97 f9       	bld	r25, 7
    1750:	9f 67       	ori	r25, 0x7F	; 127
    1752:	80 e8       	ldi	r24, 0x80	; 128
    1754:	70 e0       	ldi	r23, 0x00	; 0
    1756:	60 e0       	ldi	r22, 0x00	; 0
    1758:	08 95       	ret

0000175a <__fp_nan>:
    175a:	9f ef       	ldi	r25, 0xFF	; 255
    175c:	80 ec       	ldi	r24, 0xC0	; 192
    175e:	08 95       	ret

00001760 <__fp_pscA>:
    1760:	00 24       	eor	r0, r0
    1762:	0a 94       	dec	r0
    1764:	16 16       	cp	r1, r22
    1766:	17 06       	cpc	r1, r23
    1768:	18 06       	cpc	r1, r24
    176a:	09 06       	cpc	r0, r25
    176c:	08 95       	ret

0000176e <__fp_pscB>:
    176e:	00 24       	eor	r0, r0
    1770:	0a 94       	dec	r0
    1772:	12 16       	cp	r1, r18
    1774:	13 06       	cpc	r1, r19
    1776:	14 06       	cpc	r1, r20
    1778:	05 06       	cpc	r0, r21
    177a:	08 95       	ret

0000177c <__fp_round>:
    177c:	09 2e       	mov	r0, r25
    177e:	03 94       	inc	r0
    1780:	00 0c       	add	r0, r0
    1782:	11 f4       	brne	.+4      	; 0x1788 <__fp_round+0xc>
    1784:	88 23       	and	r24, r24
    1786:	52 f0       	brmi	.+20     	; 0x179c <__fp_round+0x20>
    1788:	bb 0f       	add	r27, r27
    178a:	40 f4       	brcc	.+16     	; 0x179c <__fp_round+0x20>
    178c:	bf 2b       	or	r27, r31
    178e:	11 f4       	brne	.+4      	; 0x1794 <__fp_round+0x18>
    1790:	60 ff       	sbrs	r22, 0
    1792:	04 c0       	rjmp	.+8      	; 0x179c <__fp_round+0x20>
    1794:	6f 5f       	subi	r22, 0xFF	; 255
    1796:	7f 4f       	sbci	r23, 0xFF	; 255
    1798:	8f 4f       	sbci	r24, 0xFF	; 255
    179a:	9f 4f       	sbci	r25, 0xFF	; 255
    179c:	08 95       	ret

0000179e <__fp_split3>:
    179e:	57 fd       	sbrc	r21, 7
    17a0:	90 58       	subi	r25, 0x80	; 128
    17a2:	44 0f       	add	r20, r20
    17a4:	55 1f       	adc	r21, r21
    17a6:	59 f0       	breq	.+22     	; 0x17be <__fp_splitA+0x10>
    17a8:	5f 3f       	cpi	r21, 0xFF	; 255
    17aa:	71 f0       	breq	.+28     	; 0x17c8 <__fp_splitA+0x1a>
    17ac:	47 95       	ror	r20

000017ae <__fp_splitA>:
    17ae:	88 0f       	add	r24, r24
    17b0:	97 fb       	bst	r25, 7
    17b2:	99 1f       	adc	r25, r25
    17b4:	61 f0       	breq	.+24     	; 0x17ce <__fp_splitA+0x20>
    17b6:	9f 3f       	cpi	r25, 0xFF	; 255
    17b8:	79 f0       	breq	.+30     	; 0x17d8 <__fp_splitA+0x2a>
    17ba:	87 95       	ror	r24
    17bc:	08 95       	ret
    17be:	12 16       	cp	r1, r18
    17c0:	13 06       	cpc	r1, r19
    17c2:	14 06       	cpc	r1, r20
    17c4:	55 1f       	adc	r21, r21
    17c6:	f2 cf       	rjmp	.-28     	; 0x17ac <__fp_split3+0xe>
    17c8:	46 95       	lsr	r20
    17ca:	f1 df       	rcall	.-30     	; 0x17ae <__fp_splitA>
    17cc:	08 c0       	rjmp	.+16     	; 0x17de <__fp_splitA+0x30>
    17ce:	16 16       	cp	r1, r22
    17d0:	17 06       	cpc	r1, r23
    17d2:	18 06       	cpc	r1, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	f1 cf       	rjmp	.-30     	; 0x17ba <__fp_splitA+0xc>
    17d8:	86 95       	lsr	r24
    17da:	71 05       	cpc	r23, r1
    17dc:	61 05       	cpc	r22, r1
    17de:	08 94       	sec
    17e0:	08 95       	ret

000017e2 <__fp_zero>:
    17e2:	e8 94       	clt

000017e4 <__fp_szero>:
    17e4:	bb 27       	eor	r27, r27
    17e6:	66 27       	eor	r22, r22
    17e8:	77 27       	eor	r23, r23
    17ea:	cb 01       	movw	r24, r22
    17ec:	97 f9       	bld	r25, 7
    17ee:	08 95       	ret

000017f0 <__gesf2>:
    17f0:	8a df       	rcall	.-236    	; 0x1706 <__fp_cmp>
    17f2:	08 f4       	brcc	.+2      	; 0x17f6 <__gesf2+0x6>
    17f4:	8f ef       	ldi	r24, 0xFF	; 255
    17f6:	08 95       	ret

000017f8 <__mulsf3>:
    17f8:	0b d0       	rcall	.+22     	; 0x1810 <__mulsf3x>
    17fa:	c0 cf       	rjmp	.-128    	; 0x177c <__fp_round>
    17fc:	b1 df       	rcall	.-158    	; 0x1760 <__fp_pscA>
    17fe:	28 f0       	brcs	.+10     	; 0x180a <__mulsf3+0x12>
    1800:	b6 df       	rcall	.-148    	; 0x176e <__fp_pscB>
    1802:	18 f0       	brcs	.+6      	; 0x180a <__mulsf3+0x12>
    1804:	95 23       	and	r25, r21
    1806:	09 f0       	breq	.+2      	; 0x180a <__mulsf3+0x12>
    1808:	a2 cf       	rjmp	.-188    	; 0x174e <__fp_inf>
    180a:	a7 cf       	rjmp	.-178    	; 0x175a <__fp_nan>
    180c:	11 24       	eor	r1, r1
    180e:	ea cf       	rjmp	.-44     	; 0x17e4 <__fp_szero>

00001810 <__mulsf3x>:
    1810:	c6 df       	rcall	.-116    	; 0x179e <__fp_split3>
    1812:	a0 f3       	brcs	.-24     	; 0x17fc <__mulsf3+0x4>

00001814 <__mulsf3_pse>:
    1814:	95 9f       	mul	r25, r21
    1816:	d1 f3       	breq	.-12     	; 0x180c <__mulsf3+0x14>
    1818:	95 0f       	add	r25, r21
    181a:	50 e0       	ldi	r21, 0x00	; 0
    181c:	55 1f       	adc	r21, r21
    181e:	62 9f       	mul	r22, r18
    1820:	f0 01       	movw	r30, r0
    1822:	72 9f       	mul	r23, r18
    1824:	bb 27       	eor	r27, r27
    1826:	f0 0d       	add	r31, r0
    1828:	b1 1d       	adc	r27, r1
    182a:	63 9f       	mul	r22, r19
    182c:	aa 27       	eor	r26, r26
    182e:	f0 0d       	add	r31, r0
    1830:	b1 1d       	adc	r27, r1
    1832:	aa 1f       	adc	r26, r26
    1834:	64 9f       	mul	r22, r20
    1836:	66 27       	eor	r22, r22
    1838:	b0 0d       	add	r27, r0
    183a:	a1 1d       	adc	r26, r1
    183c:	66 1f       	adc	r22, r22
    183e:	82 9f       	mul	r24, r18
    1840:	22 27       	eor	r18, r18
    1842:	b0 0d       	add	r27, r0
    1844:	a1 1d       	adc	r26, r1
    1846:	62 1f       	adc	r22, r18
    1848:	73 9f       	mul	r23, r19
    184a:	b0 0d       	add	r27, r0
    184c:	a1 1d       	adc	r26, r1
    184e:	62 1f       	adc	r22, r18
    1850:	83 9f       	mul	r24, r19
    1852:	a0 0d       	add	r26, r0
    1854:	61 1d       	adc	r22, r1
    1856:	22 1f       	adc	r18, r18
    1858:	74 9f       	mul	r23, r20
    185a:	33 27       	eor	r19, r19
    185c:	a0 0d       	add	r26, r0
    185e:	61 1d       	adc	r22, r1
    1860:	23 1f       	adc	r18, r19
    1862:	84 9f       	mul	r24, r20
    1864:	60 0d       	add	r22, r0
    1866:	21 1d       	adc	r18, r1
    1868:	82 2f       	mov	r24, r18
    186a:	76 2f       	mov	r23, r22
    186c:	6a 2f       	mov	r22, r26
    186e:	11 24       	eor	r1, r1
    1870:	9f 57       	subi	r25, 0x7F	; 127
    1872:	50 40       	sbci	r21, 0x00	; 0
    1874:	8a f0       	brmi	.+34     	; 0x1898 <__mulsf3_pse+0x84>
    1876:	e1 f0       	breq	.+56     	; 0x18b0 <__mulsf3_pse+0x9c>
    1878:	88 23       	and	r24, r24
    187a:	4a f0       	brmi	.+18     	; 0x188e <__mulsf3_pse+0x7a>
    187c:	ee 0f       	add	r30, r30
    187e:	ff 1f       	adc	r31, r31
    1880:	bb 1f       	adc	r27, r27
    1882:	66 1f       	adc	r22, r22
    1884:	77 1f       	adc	r23, r23
    1886:	88 1f       	adc	r24, r24
    1888:	91 50       	subi	r25, 0x01	; 1
    188a:	50 40       	sbci	r21, 0x00	; 0
    188c:	a9 f7       	brne	.-22     	; 0x1878 <__mulsf3_pse+0x64>
    188e:	9e 3f       	cpi	r25, 0xFE	; 254
    1890:	51 05       	cpc	r21, r1
    1892:	70 f0       	brcs	.+28     	; 0x18b0 <__mulsf3_pse+0x9c>
    1894:	5c cf       	rjmp	.-328    	; 0x174e <__fp_inf>
    1896:	a6 cf       	rjmp	.-180    	; 0x17e4 <__fp_szero>
    1898:	5f 3f       	cpi	r21, 0xFF	; 255
    189a:	ec f3       	brlt	.-6      	; 0x1896 <__mulsf3_pse+0x82>
    189c:	98 3e       	cpi	r25, 0xE8	; 232
    189e:	dc f3       	brlt	.-10     	; 0x1896 <__mulsf3_pse+0x82>
    18a0:	86 95       	lsr	r24
    18a2:	77 95       	ror	r23
    18a4:	67 95       	ror	r22
    18a6:	b7 95       	ror	r27
    18a8:	f7 95       	ror	r31
    18aa:	e7 95       	ror	r30
    18ac:	9f 5f       	subi	r25, 0xFF	; 255
    18ae:	c1 f7       	brne	.-16     	; 0x18a0 <__mulsf3_pse+0x8c>
    18b0:	fe 2b       	or	r31, r30
    18b2:	88 0f       	add	r24, r24
    18b4:	91 1d       	adc	r25, r1
    18b6:	96 95       	lsr	r25
    18b8:	87 95       	ror	r24
    18ba:	97 f9       	bld	r25, 7
    18bc:	08 95       	ret

000018be <calloc>:
    18be:	0f 93       	push	r16
    18c0:	1f 93       	push	r17
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	86 9f       	mul	r24, r22
    18c8:	80 01       	movw	r16, r0
    18ca:	87 9f       	mul	r24, r23
    18cc:	10 0d       	add	r17, r0
    18ce:	96 9f       	mul	r25, r22
    18d0:	10 0d       	add	r17, r0
    18d2:	11 24       	eor	r1, r1
    18d4:	c8 01       	movw	r24, r16
    18d6:	0d d0       	rcall	.+26     	; 0x18f2 <malloc>
    18d8:	ec 01       	movw	r28, r24
    18da:	00 97       	sbiw	r24, 0x00	; 0
    18dc:	21 f0       	breq	.+8      	; 0x18e6 <calloc+0x28>
    18de:	a8 01       	movw	r20, r16
    18e0:	60 e0       	ldi	r22, 0x00	; 0
    18e2:	70 e0       	ldi	r23, 0x00	; 0
    18e4:	33 d1       	rcall	.+614    	; 0x1b4c <memset>
    18e6:	ce 01       	movw	r24, r28
    18e8:	df 91       	pop	r29
    18ea:	cf 91       	pop	r28
    18ec:	1f 91       	pop	r17
    18ee:	0f 91       	pop	r16
    18f0:	08 95       	ret

000018f2 <malloc>:
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    18f6:	82 30       	cpi	r24, 0x02	; 2
    18f8:	91 05       	cpc	r25, r1
    18fa:	10 f4       	brcc	.+4      	; 0x1900 <malloc+0xe>
    18fc:	82 e0       	ldi	r24, 0x02	; 2
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	e0 91 b3 02 	lds	r30, 0x02B3
    1904:	f0 91 b4 02 	lds	r31, 0x02B4
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	c0 e0       	ldi	r28, 0x00	; 0
    190e:	d0 e0       	ldi	r29, 0x00	; 0
    1910:	30 97       	sbiw	r30, 0x00	; 0
    1912:	11 f1       	breq	.+68     	; 0x1958 <malloc+0x66>
    1914:	40 81       	ld	r20, Z
    1916:	51 81       	ldd	r21, Z+1	; 0x01
    1918:	48 17       	cp	r20, r24
    191a:	59 07       	cpc	r21, r25
    191c:	c0 f0       	brcs	.+48     	; 0x194e <malloc+0x5c>
    191e:	48 17       	cp	r20, r24
    1920:	59 07       	cpc	r21, r25
    1922:	61 f4       	brne	.+24     	; 0x193c <malloc+0x4a>
    1924:	82 81       	ldd	r24, Z+2	; 0x02
    1926:	93 81       	ldd	r25, Z+3	; 0x03
    1928:	20 97       	sbiw	r28, 0x00	; 0
    192a:	19 f0       	breq	.+6      	; 0x1932 <malloc+0x40>
    192c:	9b 83       	std	Y+3, r25	; 0x03
    192e:	8a 83       	std	Y+2, r24	; 0x02
    1930:	2b c0       	rjmp	.+86     	; 0x1988 <malloc+0x96>
    1932:	90 93 b4 02 	sts	0x02B4, r25
    1936:	80 93 b3 02 	sts	0x02B3, r24
    193a:	26 c0       	rjmp	.+76     	; 0x1988 <malloc+0x96>
    193c:	21 15       	cp	r18, r1
    193e:	31 05       	cpc	r19, r1
    1940:	19 f0       	breq	.+6      	; 0x1948 <malloc+0x56>
    1942:	42 17       	cp	r20, r18
    1944:	53 07       	cpc	r21, r19
    1946:	18 f4       	brcc	.+6      	; 0x194e <malloc+0x5c>
    1948:	9a 01       	movw	r18, r20
    194a:	be 01       	movw	r22, r28
    194c:	df 01       	movw	r26, r30
    194e:	ef 01       	movw	r28, r30
    1950:	02 80       	ldd	r0, Z+2	; 0x02
    1952:	f3 81       	ldd	r31, Z+3	; 0x03
    1954:	e0 2d       	mov	r30, r0
    1956:	dc cf       	rjmp	.-72     	; 0x1910 <malloc+0x1e>
    1958:	21 15       	cp	r18, r1
    195a:	31 05       	cpc	r19, r1
    195c:	09 f1       	breq	.+66     	; 0x19a0 <malloc+0xae>
    195e:	28 1b       	sub	r18, r24
    1960:	39 0b       	sbc	r19, r25
    1962:	24 30       	cpi	r18, 0x04	; 4
    1964:	31 05       	cpc	r19, r1
    1966:	90 f4       	brcc	.+36     	; 0x198c <malloc+0x9a>
    1968:	12 96       	adiw	r26, 0x02	; 2
    196a:	8d 91       	ld	r24, X+
    196c:	9c 91       	ld	r25, X
    196e:	13 97       	sbiw	r26, 0x03	; 3
    1970:	61 15       	cp	r22, r1
    1972:	71 05       	cpc	r23, r1
    1974:	21 f0       	breq	.+8      	; 0x197e <malloc+0x8c>
    1976:	fb 01       	movw	r30, r22
    1978:	93 83       	std	Z+3, r25	; 0x03
    197a:	82 83       	std	Z+2, r24	; 0x02
    197c:	04 c0       	rjmp	.+8      	; 0x1986 <malloc+0x94>
    197e:	90 93 b4 02 	sts	0x02B4, r25
    1982:	80 93 b3 02 	sts	0x02B3, r24
    1986:	fd 01       	movw	r30, r26
    1988:	32 96       	adiw	r30, 0x02	; 2
    198a:	44 c0       	rjmp	.+136    	; 0x1a14 <malloc+0x122>
    198c:	fd 01       	movw	r30, r26
    198e:	e2 0f       	add	r30, r18
    1990:	f3 1f       	adc	r31, r19
    1992:	81 93       	st	Z+, r24
    1994:	91 93       	st	Z+, r25
    1996:	22 50       	subi	r18, 0x02	; 2
    1998:	31 09       	sbc	r19, r1
    199a:	2d 93       	st	X+, r18
    199c:	3c 93       	st	X, r19
    199e:	3a c0       	rjmp	.+116    	; 0x1a14 <malloc+0x122>
    19a0:	20 91 b1 02 	lds	r18, 0x02B1
    19a4:	30 91 b2 02 	lds	r19, 0x02B2
    19a8:	23 2b       	or	r18, r19
    19aa:	41 f4       	brne	.+16     	; 0x19bc <malloc+0xca>
    19ac:	20 91 02 01 	lds	r18, 0x0102
    19b0:	30 91 03 01 	lds	r19, 0x0103
    19b4:	30 93 b2 02 	sts	0x02B2, r19
    19b8:	20 93 b1 02 	sts	0x02B1, r18
    19bc:	20 91 00 01 	lds	r18, 0x0100
    19c0:	30 91 01 01 	lds	r19, 0x0101
    19c4:	21 15       	cp	r18, r1
    19c6:	31 05       	cpc	r19, r1
    19c8:	41 f4       	brne	.+16     	; 0x19da <malloc+0xe8>
    19ca:	2d b7       	in	r18, 0x3d	; 61
    19cc:	3e b7       	in	r19, 0x3e	; 62
    19ce:	40 91 04 01 	lds	r20, 0x0104
    19d2:	50 91 05 01 	lds	r21, 0x0105
    19d6:	24 1b       	sub	r18, r20
    19d8:	35 0b       	sbc	r19, r21
    19da:	e0 91 b1 02 	lds	r30, 0x02B1
    19de:	f0 91 b2 02 	lds	r31, 0x02B2
    19e2:	e2 17       	cp	r30, r18
    19e4:	f3 07       	cpc	r31, r19
    19e6:	a0 f4       	brcc	.+40     	; 0x1a10 <malloc+0x11e>
    19e8:	2e 1b       	sub	r18, r30
    19ea:	3f 0b       	sbc	r19, r31
    19ec:	28 17       	cp	r18, r24
    19ee:	39 07       	cpc	r19, r25
    19f0:	78 f0       	brcs	.+30     	; 0x1a10 <malloc+0x11e>
    19f2:	ac 01       	movw	r20, r24
    19f4:	4e 5f       	subi	r20, 0xFE	; 254
    19f6:	5f 4f       	sbci	r21, 0xFF	; 255
    19f8:	24 17       	cp	r18, r20
    19fa:	35 07       	cpc	r19, r21
    19fc:	48 f0       	brcs	.+18     	; 0x1a10 <malloc+0x11e>
    19fe:	4e 0f       	add	r20, r30
    1a00:	5f 1f       	adc	r21, r31
    1a02:	50 93 b2 02 	sts	0x02B2, r21
    1a06:	40 93 b1 02 	sts	0x02B1, r20
    1a0a:	81 93       	st	Z+, r24
    1a0c:	91 93       	st	Z+, r25
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <malloc+0x122>
    1a10:	e0 e0       	ldi	r30, 0x00	; 0
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	cf 01       	movw	r24, r30
    1a16:	df 91       	pop	r29
    1a18:	cf 91       	pop	r28
    1a1a:	08 95       	ret

00001a1c <free>:
    1a1c:	0f 93       	push	r16
    1a1e:	1f 93       	push	r17
    1a20:	cf 93       	push	r28
    1a22:	df 93       	push	r29
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <free+0xe>
    1a28:	8c c0       	rjmp	.+280    	; 0x1b42 <free+0x126>
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	32 97       	sbiw	r30, 0x02	; 2
    1a2e:	13 82       	std	Z+3, r1	; 0x03
    1a30:	12 82       	std	Z+2, r1	; 0x02
    1a32:	00 91 b3 02 	lds	r16, 0x02B3
    1a36:	10 91 b4 02 	lds	r17, 0x02B4
    1a3a:	01 15       	cp	r16, r1
    1a3c:	11 05       	cpc	r17, r1
    1a3e:	81 f4       	brne	.+32     	; 0x1a60 <free+0x44>
    1a40:	20 81       	ld	r18, Z
    1a42:	31 81       	ldd	r19, Z+1	; 0x01
    1a44:	82 0f       	add	r24, r18
    1a46:	93 1f       	adc	r25, r19
    1a48:	20 91 b1 02 	lds	r18, 0x02B1
    1a4c:	30 91 b2 02 	lds	r19, 0x02B2
    1a50:	28 17       	cp	r18, r24
    1a52:	39 07       	cpc	r19, r25
    1a54:	79 f5       	brne	.+94     	; 0x1ab4 <free+0x98>
    1a56:	f0 93 b2 02 	sts	0x02B2, r31
    1a5a:	e0 93 b1 02 	sts	0x02B1, r30
    1a5e:	71 c0       	rjmp	.+226    	; 0x1b42 <free+0x126>
    1a60:	d8 01       	movw	r26, r16
    1a62:	40 e0       	ldi	r20, 0x00	; 0
    1a64:	50 e0       	ldi	r21, 0x00	; 0
    1a66:	ae 17       	cp	r26, r30
    1a68:	bf 07       	cpc	r27, r31
    1a6a:	50 f4       	brcc	.+20     	; 0x1a80 <free+0x64>
    1a6c:	12 96       	adiw	r26, 0x02	; 2
    1a6e:	2d 91       	ld	r18, X+
    1a70:	3c 91       	ld	r19, X
    1a72:	13 97       	sbiw	r26, 0x03	; 3
    1a74:	ad 01       	movw	r20, r26
    1a76:	21 15       	cp	r18, r1
    1a78:	31 05       	cpc	r19, r1
    1a7a:	09 f1       	breq	.+66     	; 0x1abe <free+0xa2>
    1a7c:	d9 01       	movw	r26, r18
    1a7e:	f3 cf       	rjmp	.-26     	; 0x1a66 <free+0x4a>
    1a80:	9d 01       	movw	r18, r26
    1a82:	da 01       	movw	r26, r20
    1a84:	33 83       	std	Z+3, r19	; 0x03
    1a86:	22 83       	std	Z+2, r18	; 0x02
    1a88:	60 81       	ld	r22, Z
    1a8a:	71 81       	ldd	r23, Z+1	; 0x01
    1a8c:	86 0f       	add	r24, r22
    1a8e:	97 1f       	adc	r25, r23
    1a90:	82 17       	cp	r24, r18
    1a92:	93 07       	cpc	r25, r19
    1a94:	69 f4       	brne	.+26     	; 0x1ab0 <free+0x94>
    1a96:	ec 01       	movw	r28, r24
    1a98:	28 81       	ld	r18, Y
    1a9a:	39 81       	ldd	r19, Y+1	; 0x01
    1a9c:	26 0f       	add	r18, r22
    1a9e:	37 1f       	adc	r19, r23
    1aa0:	2e 5f       	subi	r18, 0xFE	; 254
    1aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa4:	31 83       	std	Z+1, r19	; 0x01
    1aa6:	20 83       	st	Z, r18
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	9b 81       	ldd	r25, Y+3	; 0x03
    1aac:	93 83       	std	Z+3, r25	; 0x03
    1aae:	82 83       	std	Z+2, r24	; 0x02
    1ab0:	45 2b       	or	r20, r21
    1ab2:	29 f4       	brne	.+10     	; 0x1abe <free+0xa2>
    1ab4:	f0 93 b4 02 	sts	0x02B4, r31
    1ab8:	e0 93 b3 02 	sts	0x02B3, r30
    1abc:	42 c0       	rjmp	.+132    	; 0x1b42 <free+0x126>
    1abe:	13 96       	adiw	r26, 0x03	; 3
    1ac0:	fc 93       	st	X, r31
    1ac2:	ee 93       	st	-X, r30
    1ac4:	12 97       	sbiw	r26, 0x02	; 2
    1ac6:	ed 01       	movw	r28, r26
    1ac8:	49 91       	ld	r20, Y+
    1aca:	59 91       	ld	r21, Y+
    1acc:	9e 01       	movw	r18, r28
    1ace:	24 0f       	add	r18, r20
    1ad0:	35 1f       	adc	r19, r21
    1ad2:	e2 17       	cp	r30, r18
    1ad4:	f3 07       	cpc	r31, r19
    1ad6:	71 f4       	brne	.+28     	; 0x1af4 <free+0xd8>
    1ad8:	80 81       	ld	r24, Z
    1ada:	91 81       	ldd	r25, Z+1	; 0x01
    1adc:	84 0f       	add	r24, r20
    1ade:	95 1f       	adc	r25, r21
    1ae0:	02 96       	adiw	r24, 0x02	; 2
    1ae2:	11 96       	adiw	r26, 0x01	; 1
    1ae4:	9c 93       	st	X, r25
    1ae6:	8e 93       	st	-X, r24
    1ae8:	82 81       	ldd	r24, Z+2	; 0x02
    1aea:	93 81       	ldd	r25, Z+3	; 0x03
    1aec:	13 96       	adiw	r26, 0x03	; 3
    1aee:	9c 93       	st	X, r25
    1af0:	8e 93       	st	-X, r24
    1af2:	12 97       	sbiw	r26, 0x02	; 2
    1af4:	e0 e0       	ldi	r30, 0x00	; 0
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	d8 01       	movw	r26, r16
    1afa:	12 96       	adiw	r26, 0x02	; 2
    1afc:	8d 91       	ld	r24, X+
    1afe:	9c 91       	ld	r25, X
    1b00:	13 97       	sbiw	r26, 0x03	; 3
    1b02:	00 97       	sbiw	r24, 0x00	; 0
    1b04:	19 f0       	breq	.+6      	; 0x1b0c <free+0xf0>
    1b06:	f8 01       	movw	r30, r16
    1b08:	8c 01       	movw	r16, r24
    1b0a:	f6 cf       	rjmp	.-20     	; 0x1af8 <free+0xdc>
    1b0c:	8d 91       	ld	r24, X+
    1b0e:	9c 91       	ld	r25, X
    1b10:	98 01       	movw	r18, r16
    1b12:	2e 5f       	subi	r18, 0xFE	; 254
    1b14:	3f 4f       	sbci	r19, 0xFF	; 255
    1b16:	82 0f       	add	r24, r18
    1b18:	93 1f       	adc	r25, r19
    1b1a:	20 91 b1 02 	lds	r18, 0x02B1
    1b1e:	30 91 b2 02 	lds	r19, 0x02B2
    1b22:	28 17       	cp	r18, r24
    1b24:	39 07       	cpc	r19, r25
    1b26:	69 f4       	brne	.+26     	; 0x1b42 <free+0x126>
    1b28:	30 97       	sbiw	r30, 0x00	; 0
    1b2a:	29 f4       	brne	.+10     	; 0x1b36 <free+0x11a>
    1b2c:	10 92 b4 02 	sts	0x02B4, r1
    1b30:	10 92 b3 02 	sts	0x02B3, r1
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <free+0x11e>
    1b36:	13 82       	std	Z+3, r1	; 0x03
    1b38:	12 82       	std	Z+2, r1	; 0x02
    1b3a:	10 93 b2 02 	sts	0x02B2, r17
    1b3e:	00 93 b1 02 	sts	0x02B1, r16
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	1f 91       	pop	r17
    1b48:	0f 91       	pop	r16
    1b4a:	08 95       	ret

00001b4c <memset>:
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	01 c0       	rjmp	.+2      	; 0x1b52 <memset+0x6>
    1b50:	6d 93       	st	X+, r22
    1b52:	41 50       	subi	r20, 0x01	; 1
    1b54:	50 40       	sbci	r21, 0x00	; 0
    1b56:	e0 f7       	brcc	.-8      	; 0x1b50 <memset+0x4>
    1b58:	08 95       	ret

00001b5a <_exit>:
    1b5a:	f8 94       	cli

00001b5c <__stop_program>:
    1b5c:	ff cf       	rjmp	.-2      	; 0x1b5c <__stop_program>
