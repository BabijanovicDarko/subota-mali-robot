
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00001e2c  00001ec0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000147  00800112  00800112  00001ed2  2**0
                  ALLOC
  3 .debug_aranges 00000268  00000000  00000000  00001ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004e1  00000000  00000000  0000213a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019e2  00000000  00000000  0000261b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008fa  00000000  00000000  00003ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001afd  00000000  00000000  000048f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003b0  00000000  00000000  000063f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000072c  00000000  00000000  000067a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000220  00000000  00000000  00006ed0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	ICR3 = ((double)F_CPU) / (8 * f_pwm) - 0.5; // FREKVENCIJA PWMA JE ~19kHz
}//END OF servo_init


void servo_position1(unsigned char dutyCycle)
{
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}


unsigned char CAN_CheckRX(unsigned char nodeID)
{
       2:	00 00       	nop

    return 0;
}

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>

	return ODOMETRY_SUCCESS;
}

void stop(int8_t type)
{
       6:	00 00       	nop
unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    timer_callback = callback;
}
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);

	UBRR0H = temp >> 8;
	UBRR0L = temp;
}
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 6a 09 	jmp	0x12d4	; 0x12d4 <__vector_12>
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	bb c1       	rjmp	.+886    	; 0x3c0 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 07 0b 	jmp	0x160e	; 0x160e <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 90 0b 	jmp	0x1720	; 0x1720 <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ec e2       	ldi	r30, 0x2C	; 44
      a8:	fe e1       	ldi	r31, 0x1E	; 30
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a2 31       	cpi	r26, 0x12	; 18
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	a2 e1       	ldi	r26, 0x12	; 18
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a9 35       	cpi	r26, 0x59	; 89
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
#include <stdio.h>
#include "odometry.h"


int main()
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	6e 97       	sbiw	r28, 0x1e	; 30
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
	int i = 0;	
      e6:	1e 8e       	std	Y+30, r1	; 0x1e
      e8:	1d 8e       	std	Y+29, r1	; 0x1d
	
	system_init();
      ea:	0e 94 b6 09 	call	0x136c	; 0x136c <system_init>
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	aa e7       	ldi	r26, 0x7A	; 122
      f4:	b4 e4       	ldi	r27, 0x44	; 68
      f6:	89 8f       	std	Y+25, r24	; 0x19
      f8:	9a 8f       	std	Y+26, r25	; 0x1a
      fa:	ab 8f       	std	Y+27, r26	; 0x1b
      fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
      fe:	69 8d       	ldd	r22, Y+25	; 0x19
     100:	7a 8d       	ldd	r23, Y+26	; 0x1a
     102:	8b 8d       	ldd	r24, Y+27	; 0x1b
     104:	9c 8d       	ldd	r25, Y+28	; 0x1c
     106:	20 e0       	ldi	r18, 0x00	; 0
     108:	30 e4       	ldi	r19, 0x40	; 64
     10a:	4c e1       	ldi	r20, 0x1C	; 28
     10c:	55 e4       	ldi	r21, 0x45	; 69
     10e:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__mulsf3>
     112:	dc 01       	movw	r26, r24
     114:	cb 01       	movw	r24, r22
     116:	8d 8b       	std	Y+21, r24	; 0x15
     118:	9e 8b       	std	Y+22, r25	; 0x16
     11a:	af 8b       	std	Y+23, r26	; 0x17
     11c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     11e:	6d 89       	ldd	r22, Y+21	; 0x15
     120:	7e 89       	ldd	r23, Y+22	; 0x16
     122:	8f 89       	ldd	r24, Y+23	; 0x17
     124:	98 8d       	ldd	r25, Y+24	; 0x18
     126:	20 e0       	ldi	r18, 0x00	; 0
     128:	30 e0       	ldi	r19, 0x00	; 0
     12a:	40 e8       	ldi	r20, 0x80	; 128
     12c:	5f e3       	ldi	r21, 0x3F	; 63
     12e:	0e 94 3d 0c 	call	0x187a	; 0x187a <__cmpsf2>
     132:	88 23       	and	r24, r24
     134:	2c f4       	brge	.+10     	; 0x140 <main+0x6e>
		__ticks = 1;
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	9c 8b       	std	Y+20, r25	; 0x14
     13c:	8b 8b       	std	Y+19, r24	; 0x13
     13e:	3f c0       	rjmp	.+126    	; 0x1be <main+0xec>
	else if (__tmp > 65535)
     140:	6d 89       	ldd	r22, Y+21	; 0x15
     142:	7e 89       	ldd	r23, Y+22	; 0x16
     144:	8f 89       	ldd	r24, Y+23	; 0x17
     146:	98 8d       	ldd	r25, Y+24	; 0x18
     148:	20 e0       	ldi	r18, 0x00	; 0
     14a:	3f ef       	ldi	r19, 0xFF	; 255
     14c:	4f e7       	ldi	r20, 0x7F	; 127
     14e:	57 e4       	ldi	r21, 0x47	; 71
     150:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__gesf2>
     154:	18 16       	cp	r1, r24
     156:	4c f5       	brge	.+82     	; 0x1aa <main+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     158:	69 8d       	ldd	r22, Y+25	; 0x19
     15a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     15c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     15e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     160:	20 e0       	ldi	r18, 0x00	; 0
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	40 e2       	ldi	r20, 0x20	; 32
     166:	51 e4       	ldi	r21, 0x41	; 65
     168:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__mulsf3>
     16c:	dc 01       	movw	r26, r24
     16e:	cb 01       	movw	r24, r22
     170:	bc 01       	movw	r22, r24
     172:	cd 01       	movw	r24, r26
     174:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__fixunssfsi>
     178:	dc 01       	movw	r26, r24
     17a:	cb 01       	movw	r24, r22
     17c:	9c 8b       	std	Y+20, r25	; 0x14
     17e:	8b 8b       	std	Y+19, r24	; 0x13
     180:	0f c0       	rjmp	.+30     	; 0x1a0 <main+0xce>
     182:	8a ef       	ldi	r24, 0xFA	; 250
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	9a 8b       	std	Y+18, r25	; 0x12
     188:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     18a:	89 89       	ldd	r24, Y+17	; 0x11
     18c:	9a 89       	ldd	r25, Y+18	; 0x12
     18e:	01 97       	sbiw	r24, 0x01	; 1
     190:	f1 f7       	brne	.-4      	; 0x18e <main+0xbc>
     192:	9a 8b       	std	Y+18, r25	; 0x12
     194:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     196:	8b 89       	ldd	r24, Y+19	; 0x13
     198:	9c 89       	ldd	r25, Y+20	; 0x14
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	9c 8b       	std	Y+20, r25	; 0x14
     19e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1a0:	8b 89       	ldd	r24, Y+19	; 0x13
     1a2:	9c 89       	ldd	r25, Y+20	; 0x14
     1a4:	00 97       	sbiw	r24, 0x00	; 0
     1a6:	69 f7       	brne	.-38     	; 0x182 <main+0xb0>
     1a8:	98 c0       	rjmp	.+304    	; 0x2da <main+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1aa:	6d 89       	ldd	r22, Y+21	; 0x15
     1ac:	7e 89       	ldd	r23, Y+22	; 0x16
     1ae:	8f 89       	ldd	r24, Y+23	; 0x17
     1b0:	98 8d       	ldd	r25, Y+24	; 0x18
     1b2:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__fixunssfsi>
     1b6:	dc 01       	movw	r26, r24
     1b8:	cb 01       	movw	r24, r22
     1ba:	9c 8b       	std	Y+20, r25	; 0x14
     1bc:	8b 8b       	std	Y+19, r24	; 0x13
     1be:	8b 89       	ldd	r24, Y+19	; 0x13
     1c0:	9c 89       	ldd	r25, Y+20	; 0x14
     1c2:	98 8b       	std	Y+16, r25	; 0x10
     1c4:	8f 87       	std	Y+15, r24	; 0x0f
     1c6:	8f 85       	ldd	r24, Y+15	; 0x0f
     1c8:	98 89       	ldd	r25, Y+16	; 0x10
     1ca:	01 97       	sbiw	r24, 0x01	; 1
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <main+0xf8>
     1ce:	98 8b       	std	Y+16, r25	; 0x10
     1d0:	8f 87       	std	Y+15, r24	; 0x0f
     1d2:	83 c0       	rjmp	.+262    	; 0x2da <main+0x208>
	{
		_delay_ms(1000);
		//middle button
		while(i == 0)
		{
			gpio_register_pin(31,GPIO_DIRECTION_INPUT,true);
     1d4:	8f e1       	ldi	r24, 0x1F	; 31
     1d6:	60 e0       	ldi	r22, 0x00	; 0
     1d8:	41 e0       	ldi	r20, 0x01	; 1
     1da:	ef d3       	rcall	.+2014   	; 0x9ba <gpio_register_pin>
			gpio_debouncer();
     1dc:	ba d5       	rcall	.+2932   	; 0xd52 <gpio_debouncer>
			if(gpio_read_pin(31) == 1)
     1de:	8f e1       	ldi	r24, 0x1F	; 31
     1e0:	38 d5       	rcall	.+2672   	; 0xc52 <gpio_read_pin>
     1e2:	81 30       	cpi	r24, 0x01	; 1
     1e4:	09 f0       	breq	.+2      	; 0x1e8 <main+0x116>
     1e6:	77 c0       	rjmp	.+238    	; 0x2d6 <main+0x204>
			{
				i = 1;
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	9e 8f       	std	Y+30, r25	; 0x1e
     1ee:	8d 8f       	std	Y+29, r24	; 0x1d
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	aa e7       	ldi	r26, 0x7A	; 122
     1f6:	b4 e4       	ldi	r27, 0x44	; 68
     1f8:	8b 87       	std	Y+11, r24	; 0x0b
     1fa:	9c 87       	std	Y+12, r25	; 0x0c
     1fc:	ad 87       	std	Y+13, r26	; 0x0d
     1fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     200:	6b 85       	ldd	r22, Y+11	; 0x0b
     202:	7c 85       	ldd	r23, Y+12	; 0x0c
     204:	8d 85       	ldd	r24, Y+13	; 0x0d
     206:	9e 85       	ldd	r25, Y+14	; 0x0e
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e4       	ldi	r19, 0x40	; 64
     20c:	4c e1       	ldi	r20, 0x1C	; 28
     20e:	55 e4       	ldi	r21, 0x45	; 69
     210:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__mulsf3>
     214:	dc 01       	movw	r26, r24
     216:	cb 01       	movw	r24, r22
     218:	8f 83       	std	Y+7, r24	; 0x07
     21a:	98 87       	std	Y+8, r25	; 0x08
     21c:	a9 87       	std	Y+9, r26	; 0x09
     21e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     220:	6f 81       	ldd	r22, Y+7	; 0x07
     222:	78 85       	ldd	r23, Y+8	; 0x08
     224:	89 85       	ldd	r24, Y+9	; 0x09
     226:	9a 85       	ldd	r25, Y+10	; 0x0a
     228:	20 e0       	ldi	r18, 0x00	; 0
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	40 e8       	ldi	r20, 0x80	; 128
     22e:	5f e3       	ldi	r21, 0x3F	; 63
     230:	0e 94 3d 0c 	call	0x187a	; 0x187a <__cmpsf2>
     234:	88 23       	and	r24, r24
     236:	2c f4       	brge	.+10     	; 0x242 <main+0x170>
		__ticks = 1;
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	9e 83       	std	Y+6, r25	; 0x06
     23e:	8d 83       	std	Y+5, r24	; 0x05
     240:	3f c0       	rjmp	.+126    	; 0x2c0 <main+0x1ee>
	else if (__tmp > 65535)
     242:	6f 81       	ldd	r22, Y+7	; 0x07
     244:	78 85       	ldd	r23, Y+8	; 0x08
     246:	89 85       	ldd	r24, Y+9	; 0x09
     248:	9a 85       	ldd	r25, Y+10	; 0x0a
     24a:	20 e0       	ldi	r18, 0x00	; 0
     24c:	3f ef       	ldi	r19, 0xFF	; 255
     24e:	4f e7       	ldi	r20, 0x7F	; 127
     250:	57 e4       	ldi	r21, 0x47	; 71
     252:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__gesf2>
     256:	18 16       	cp	r1, r24
     258:	4c f5       	brge	.+82     	; 0x2ac <main+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     25a:	6b 85       	ldd	r22, Y+11	; 0x0b
     25c:	7c 85       	ldd	r23, Y+12	; 0x0c
     25e:	8d 85       	ldd	r24, Y+13	; 0x0d
     260:	9e 85       	ldd	r25, Y+14	; 0x0e
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 e2       	ldi	r20, 0x20	; 32
     268:	51 e4       	ldi	r21, 0x41	; 65
     26a:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__mulsf3>
     26e:	dc 01       	movw	r26, r24
     270:	cb 01       	movw	r24, r22
     272:	bc 01       	movw	r22, r24
     274:	cd 01       	movw	r24, r26
     276:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__fixunssfsi>
     27a:	dc 01       	movw	r26, r24
     27c:	cb 01       	movw	r24, r22
     27e:	9e 83       	std	Y+6, r25	; 0x06
     280:	8d 83       	std	Y+5, r24	; 0x05
     282:	0f c0       	rjmp	.+30     	; 0x2a2 <main+0x1d0>
     284:	8a ef       	ldi	r24, 0xFA	; 250
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	9c 83       	std	Y+4, r25	; 0x04
     28a:	8b 83       	std	Y+3, r24	; 0x03
     28c:	8b 81       	ldd	r24, Y+3	; 0x03
     28e:	9c 81       	ldd	r25, Y+4	; 0x04
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	f1 f7       	brne	.-4      	; 0x290 <main+0x1be>
     294:	9c 83       	std	Y+4, r25	; 0x04
     296:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     298:	8d 81       	ldd	r24, Y+5	; 0x05
     29a:	9e 81       	ldd	r25, Y+6	; 0x06
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	9e 83       	std	Y+6, r25	; 0x06
     2a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2a2:	8d 81       	ldd	r24, Y+5	; 0x05
     2a4:	9e 81       	ldd	r25, Y+6	; 0x06
     2a6:	00 97       	sbiw	r24, 0x00	; 0
     2a8:	69 f7       	brne	.-38     	; 0x284 <main+0x1b2>
     2aa:	17 c0       	rjmp	.+46     	; 0x2da <main+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2ac:	6f 81       	ldd	r22, Y+7	; 0x07
     2ae:	78 85       	ldd	r23, Y+8	; 0x08
     2b0:	89 85       	ldd	r24, Y+9	; 0x09
     2b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     2b4:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__fixunssfsi>
     2b8:	dc 01       	movw	r26, r24
     2ba:	cb 01       	movw	r24, r22
     2bc:	9e 83       	std	Y+6, r25	; 0x06
     2be:	8d 83       	std	Y+5, r24	; 0x05
     2c0:	8d 81       	ldd	r24, Y+5	; 0x05
     2c2:	9e 81       	ldd	r25, Y+6	; 0x06
     2c4:	9a 83       	std	Y+2, r25	; 0x02
     2c6:	89 83       	std	Y+1, r24	; 0x01
     2c8:	89 81       	ldd	r24, Y+1	; 0x01
     2ca:	9a 81       	ldd	r25, Y+2	; 0x02
     2cc:	01 97       	sbiw	r24, 0x01	; 1
     2ce:	f1 f7       	brne	.-4      	; 0x2cc <main+0x1fa>
     2d0:	9a 83       	std	Y+2, r25	; 0x02
     2d2:	89 83       	std	Y+1, r24	; 0x01
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <main+0x208>
				_delay_ms(1000);
			}
			else
			{
				i = 0;
     2d6:	1e 8e       	std	Y+30, r1	; 0x1e
     2d8:	1d 8e       	std	Y+29, r1	; 0x1d
	
	while(1)
	{
		_delay_ms(1000);
		//middle button
		while(i == 0)
     2da:	8d 8d       	ldd	r24, Y+29	; 0x1d
     2dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
     2de:	00 97       	sbiw	r24, 0x00	; 0
     2e0:	09 f4       	brne	.+2      	; 0x2e4 <main+0x212>
     2e2:	78 cf       	rjmp	.-272    	; 0x1d4 <main+0x102>
			else
			{
				i = 0;
			}
		}	
		if(i == 1)
     2e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     2e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     2e8:	81 30       	cpi	r24, 0x01	; 1
     2ea:	91 05       	cpc	r25, r1
     2ec:	09 f0       	breq	.+2      	; 0x2f0 <main+0x21e>
     2ee:	ff ce       	rjmp	.-514    	; 0xee <main+0x1c>
		{
			while(1)
			{
				PORTG = 0xff;
     2f0:	e4 e3       	ldi	r30, 0x34	; 52
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	8f ef       	ldi	r24, 0xFF	; 255
     2f6:	80 83       	st	Z, r24
				//greenside();
				odometry_move_straight(300,NORMAL_SPEED,NULL);
     2f8:	8c e2       	ldi	r24, 0x2C	; 44
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	61 e4       	ldi	r22, 0x41	; 65
     2fe:	40 e0       	ldi	r20, 0x00	; 0
     300:	50 e0       	ldi	r21, 0x00	; 0
     302:	07 d7       	rcall	.+3598   	; 0x1112 <odometry_move_straight>
     304:	ff cf       	rjmp	.-2      	; 0x304 <main+0x232>

00000306 <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
     306:	0f 93       	push	r16
     308:	1f 93       	push	r17
     30a:	df 93       	push	r29
     30c:	cf 93       	push	r28
     30e:	00 d0       	rcall	.+0      	; 0x310 <servo_init+0xa>
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
     314:	9a 83       	std	Y+2, r25	; 0x02
     316:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= (1 << PINE3) | (1 << PINE4) | (1 << PINE5);
     318:	ad e2       	ldi	r26, 0x2D	; 45
     31a:	b0 e0       	ldi	r27, 0x00	; 0
     31c:	ed e2       	ldi	r30, 0x2D	; 45
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	80 81       	ld	r24, Z
     322:	88 63       	ori	r24, 0x38	; 56
     324:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     326:	e4 e9       	ldi	r30, 0x94	; 148
     328:	f0 e0       	ldi	r31, 0x00	; 0
     32a:	11 82       	std	Z+1, r1	; 0x01
     32c:	10 82       	st	Z, r1
	OCR3A = 0;
     32e:	e8 e9       	ldi	r30, 0x98	; 152
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	11 82       	std	Z+1, r1	; 0x01
     334:	10 82       	st	Z, r1
	OCR3B = 0;
     336:	ea e9       	ldi	r30, 0x9A	; 154
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	11 82       	std	Z+1, r1	; 0x01
     33c:	10 82       	st	Z, r1
	OCR3C = 0;
     33e:	ec e9       	ldi	r30, 0x9C	; 156
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	11 82       	std	Z+1, r1	; 0x01
     344:	10 82       	st	Z, r1
	
	TCCR3A = (1 << COM3A1) | (1 << COM3A0) | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     346:	e0 e9       	ldi	r30, 0x90	; 144
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	8e ef       	ldi	r24, 0xFE	; 254
     34c:	80 83       	st	Z, r24
	TCCR3B = (1 << WGM32) | (1 << WGM33) | (1 << CS31); // PRESKALER = 1
     34e:	e1 e9       	ldi	r30, 0x91	; 145
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	8a e1       	ldi	r24, 0x1A	; 26
     354:	80 83       	st	Z, r24
	ICR3 = ((double)F_CPU) / (8 * f_pwm) - 0.5; // FREKVENCIJA PWMA JE ~19kHz
     356:	06 e9       	ldi	r16, 0x96	; 150
     358:	10 e0       	ldi	r17, 0x00	; 0
     35a:	89 81       	ldd	r24, Y+1	; 0x01
     35c:	9a 81       	ldd	r25, Y+2	; 0x02
     35e:	88 0f       	add	r24, r24
     360:	99 1f       	adc	r25, r25
     362:	88 0f       	add	r24, r24
     364:	99 1f       	adc	r25, r25
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	cc 01       	movw	r24, r24
     36c:	a0 e0       	ldi	r26, 0x00	; 0
     36e:	b0 e0       	ldi	r27, 0x00	; 0
     370:	bc 01       	movw	r22, r24
     372:	cd 01       	movw	r24, r26
     374:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__floatunsisf>
     378:	9b 01       	movw	r18, r22
     37a:	ac 01       	movw	r20, r24
     37c:	60 e8       	ldi	r22, 0x80	; 128
     37e:	76 e9       	ldi	r23, 0x96	; 150
     380:	88 e1       	ldi	r24, 0x18	; 24
     382:	9b e4       	ldi	r25, 0x4B	; 75
     384:	0e 94 41 0c 	call	0x1882	; 0x1882 <__divsf3>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	bc 01       	movw	r22, r24
     38e:	cd 01       	movw	r24, r26
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	40 e0       	ldi	r20, 0x00	; 0
     396:	5f e3       	ldi	r21, 0x3F	; 63
     398:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__subsf3>
     39c:	dc 01       	movw	r26, r24
     39e:	cb 01       	movw	r24, r22
     3a0:	bc 01       	movw	r22, r24
     3a2:	cd 01       	movw	r24, r26
     3a4:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__fixunssfsi>
     3a8:	dc 01       	movw	r26, r24
     3aa:	cb 01       	movw	r24, r22
     3ac:	f8 01       	movw	r30, r16
     3ae:	91 83       	std	Z+1, r25	; 0x01
     3b0:	80 83       	st	Z, r24
}//END OF servo_init
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	cf 91       	pop	r28
     3b8:	df 91       	pop	r29
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	08 95       	ret

000003c0 <__vector_18>:
static volatile unsigned char rxCounter[10];
volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     3c0:	1f 92       	push	r1
     3c2:	0f 92       	push	r0
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	0f 92       	push	r0
     3c8:	00 90 5b 00 	lds	r0, 0x005B
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	2f 93       	push	r18
     3d2:	3f 93       	push	r19
     3d4:	4f 93       	push	r20
     3d6:	5f 93       	push	r21
     3d8:	8f 93       	push	r24
     3da:	9f 93       	push	r25
     3dc:	af 93       	push	r26
     3de:	bf 93       	push	r27
     3e0:	ef 93       	push	r30
     3e2:	ff 93       	push	r31
     3e4:	df 93       	push	r29
     3e6:	cf 93       	push	r28
     3e8:	00 d0       	rcall	.+0      	; 0x3ea <__vector_18+0x2a>
     3ea:	00 d0       	rcall	.+0      	; 0x3ec <__vector_18+0x2c>
     3ec:	cd b7       	in	r28, 0x3d	; 61
     3ee:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     3f0:	ed ee       	ldi	r30, 0xED	; 237
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	80 81       	ld	r24, Z
     3f6:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     3f8:	1b 82       	std	Y+3, r1	; 0x03
     3fa:	9c c0       	rjmp	.+312    	; 0x534 <__vector_18+0x174>
	{
		CANPAGE = ch << 4;
     3fc:	ed ee       	ldi	r30, 0xED	; 237
     3fe:	f0 e0       	ldi	r31, 0x00	; 0
     400:	8b 81       	ldd	r24, Y+3	; 0x03
     402:	82 95       	swap	r24
     404:	80 7f       	andi	r24, 0xF0	; 240
     406:	80 83       	st	Z, r24

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     408:	ee ee       	ldi	r30, 0xEE	; 238
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	80 81       	ld	r24, Z
     40e:	82 95       	swap	r24
     410:	86 95       	lsr	r24
     412:	87 70       	andi	r24, 0x07	; 7
     414:	88 2f       	mov	r24, r24
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	81 70       	andi	r24, 0x01	; 1
     41a:	90 70       	andi	r25, 0x00	; 0
     41c:	88 23       	and	r24, r24
     41e:	09 f4       	brne	.+2      	; 0x422 <__vector_18+0x62>
     420:	6e c0       	rjmp	.+220    	; 0x4fe <__vector_18+0x13e>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     422:	ef ee       	ldi	r30, 0xEF	; 239
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	80 e8       	ldi	r24, 0x80	; 128
     428:	80 83       	st	Z, r24
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     42a:	ae ee       	ldi	r26, 0xEE	; 238
     42c:	b0 e0       	ldi	r27, 0x00	; 0
     42e:	ee ee       	ldi	r30, 0xEE	; 238
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	80 81       	ld	r24, Z
     434:	8f 7d       	andi	r24, 0xDF	; 223
     436:	8c 93       	st	X, r24

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     438:	e2 ef       	ldi	r30, 0xF2	; 242
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	80 81       	ld	r24, Z
     43e:	82 95       	swap	r24
     440:	86 95       	lsr	r24
     442:	87 70       	andi	r24, 0x07	; 7
     444:	28 2f       	mov	r18, r24
     446:	e3 ef       	ldi	r30, 0xF3	; 243
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	88 2f       	mov	r24, r24
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	88 0f       	add	r24, r24
     452:	99 1f       	adc	r25, r25
     454:	88 0f       	add	r24, r24
     456:	99 1f       	adc	r25, r25
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	82 2b       	or	r24, r18
     45e:	8a 83       	std	Y+2, r24	; 0x02

			for(i = 0; i < 8; ++i)
     460:	19 82       	std	Y+1, r1	; 0x01
     462:	2a c0       	rjmp	.+84     	; 0x4b8 <__vector_18+0xf8>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     464:	8a 81       	ldd	r24, Y+2	; 0x02
     466:	28 2f       	mov	r18, r24
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	82 1b       	sub	r24, r18
     470:	93 0b       	sbc	r25, r19
     472:	88 0f       	add	r24, r24
     474:	99 1f       	adc	r25, r25
     476:	90 95       	com	r25
     478:	81 95       	neg	r24
     47a:	9f 4f       	sbci	r25, 0xFF	; 255
     47c:	fc 01       	movw	r30, r24
     47e:	ee 5e       	subi	r30, 0xEE	; 238
     480:	fe 4f       	sbci	r31, 0xFE	; 254
     482:	40 81       	ld	r20, Z
     484:	51 81       	ldd	r21, Z+1	; 0x01
     486:	8a 81       	ldd	r24, Y+2	; 0x02
     488:	88 2f       	mov	r24, r24
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	fc 01       	movw	r30, r24
     490:	ea 5d       	subi	r30, 0xDA	; 218
     492:	fe 4f       	sbci	r31, 0xFE	; 254
     494:	80 81       	ld	r24, Z
     496:	28 2f       	mov	r18, r24
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	89 81       	ldd	r24, Y+1	; 0x01
     49c:	88 2f       	mov	r24, r24
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	82 0f       	add	r24, r18
     4a2:	93 1f       	adc	r25, r19
     4a4:	da 01       	movw	r26, r20
     4a6:	a8 0f       	add	r26, r24
     4a8:	b9 1f       	adc	r27, r25
     4aa:	ea ef       	ldi	r30, 0xFA	; 250
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	8c 93       	st	X, r24
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
     4b4:	8f 5f       	subi	r24, 0xFF	; 255
     4b6:	89 83       	std	Y+1, r24	; 0x01
     4b8:	89 81       	ldd	r24, Y+1	; 0x01
     4ba:	88 30       	cpi	r24, 0x08	; 8
     4bc:	98 f2       	brcs	.-90     	; 0x464 <__vector_18+0xa4>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     4be:	8a 81       	ldd	r24, Y+2	; 0x02
     4c0:	88 2f       	mov	r24, r24
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	01 97       	sbiw	r24, 0x01	; 1
     4c6:	fc 01       	movw	r30, r24
     4c8:	ea 5d       	subi	r30, 0xDA	; 218
     4ca:	fe 4f       	sbci	r31, 0xFE	; 254
     4cc:	80 81       	ld	r24, Z
     4ce:	8f 5f       	subi	r24, 0xFF	; 255
     4d0:	80 83       	st	Z, r24
     4d2:	80 81       	ld	r24, Z
     4d4:	85 30       	cpi	r24, 0x05	; 5
     4d6:	41 f4       	brne	.+16     	; 0x4e8 <__vector_18+0x128>
				*(rxWrIndex + ide - 1) = 0;
     4d8:	8a 81       	ldd	r24, Y+2	; 0x02
     4da:	88 2f       	mov	r24, r24
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	01 97       	sbiw	r24, 0x01	; 1
     4e0:	fc 01       	movw	r30, r24
     4e2:	ea 5d       	subi	r30, 0xDA	; 218
     4e4:	fe 4f       	sbci	r31, 0xFE	; 254
     4e6:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     4e8:	8a 81       	ldd	r24, Y+2	; 0x02
     4ea:	88 2f       	mov	r24, r24
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	01 97       	sbiw	r24, 0x01	; 1
     4f0:	fc 01       	movw	r30, r24
     4f2:	e6 5c       	subi	r30, 0xC6	; 198
     4f4:	fe 4f       	sbci	r31, 0xFE	; 254
     4f6:	80 81       	ld	r24, Z
     4f8:	8f 5f       	subi	r24, 0xFF	; 255
     4fa:	80 83       	st	Z, r24
     4fc:	1f c0       	rjmp	.+62     	; 0x53c <__vector_18+0x17c>

			break;
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     4fe:	ee ee       	ldi	r30, 0xEE	; 238
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	80 81       	ld	r24, Z
     504:	82 95       	swap	r24
     506:	86 95       	lsr	r24
     508:	86 95       	lsr	r24
     50a:	83 70       	andi	r24, 0x03	; 3
     50c:	88 2f       	mov	r24, r24
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	81 70       	andi	r24, 0x01	; 1
     512:	90 70       	andi	r25, 0x00	; 0
     514:	88 23       	and	r24, r24
     516:	59 f0       	breq	.+22     	; 0x52e <__vector_18+0x16e>
		{
			CANCDMOB = 0; // disable mob
     518:	ef ee       	ldi	r30, 0xEF	; 239
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     51e:	ae ee       	ldi	r26, 0xEE	; 238
     520:	b0 e0       	ldi	r27, 0x00	; 0
     522:	ee ee       	ldi	r30, 0xEE	; 238
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	80 81       	ld	r24, Z
     528:	8f 7b       	andi	r24, 0xBF	; 191
     52a:	8c 93       	st	X, r24
     52c:	07 c0       	rjmp	.+14     	; 0x53c <__vector_18+0x17c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     52e:	8b 81       	ldd	r24, Y+3	; 0x03
     530:	8f 5f       	subi	r24, 0xFF	; 255
     532:	8b 83       	std	Y+3, r24	; 0x03
     534:	8b 81       	ldd	r24, Y+3	; 0x03
     536:	8f 30       	cpi	r24, 0x0F	; 15
     538:	08 f4       	brcc	.+2      	; 0x53c <__vector_18+0x17c>
     53a:	60 cf       	rjmp	.-320    	; 0x3fc <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     53c:	ed ee       	ldi	r30, 0xED	; 237
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	8c 81       	ldd	r24, Y+4	; 0x04
     542:	80 83       	st	Z, r24
	CANGIT = CANGIT; // zato sto tako treba.
     544:	aa ed       	ldi	r26, 0xDA	; 218
     546:	b0 e0       	ldi	r27, 0x00	; 0
     548:	ea ed       	ldi	r30, 0xDA	; 218
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	80 81       	ld	r24, Z
     54e:	8c 93       	st	X, r24
}
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	cf 91       	pop	r28
     55a:	df 91       	pop	r29
     55c:	ff 91       	pop	r31
     55e:	ef 91       	pop	r30
     560:	bf 91       	pop	r27
     562:	af 91       	pop	r26
     564:	9f 91       	pop	r25
     566:	8f 91       	pop	r24
     568:	5f 91       	pop	r21
     56a:	4f 91       	pop	r20
     56c:	3f 91       	pop	r19
     56e:	2f 91       	pop	r18
     570:	0f 90       	pop	r0
     572:	00 92 5b 00 	sts	0x005B, r0
     576:	0f 90       	pop	r0
     578:	0f be       	out	0x3f, r0	; 63
     57a:	0f 90       	pop	r0
     57c:	1f 90       	pop	r1
     57e:	18 95       	reti

00000580 <CAN_InitModule>:


static void CAN_InitModule(void)
{
     580:	df 93       	push	r29
     582:	cf 93       	push	r28
     584:	00 d0       	rcall	.+0      	; 0x586 <CAN_InitModule+0x6>
     586:	cd b7       	in	r28, 0x3d	; 61
     588:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     58a:	e8 ed       	ldi	r30, 0xD8	; 216
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	80 83       	st	Z, r24

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     592:	1a 82       	std	Y+2, r1	; 0x02
     594:	32 c0       	rjmp	.+100    	; 0x5fa <CAN_InitModule+0x7a>
	{
		CANPAGE = ch << 4;
     596:	ed ee       	ldi	r30, 0xED	; 237
     598:	f0 e0       	ldi	r31, 0x00	; 0
     59a:	8a 81       	ldd	r24, Y+2	; 0x02
     59c:	82 95       	swap	r24
     59e:	80 7f       	andi	r24, 0xF0	; 240
     5a0:	80 83       	st	Z, r24

		CANSTMOB = 0;
     5a2:	ee ee       	ldi	r30, 0xEE	; 238
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	10 82       	st	Z, r1
		CANCDMOB = 0;
     5a8:	ef ee       	ldi	r30, 0xEF	; 239
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	10 82       	st	Z, r1

		CANIDT1 = 0;
     5ae:	e3 ef       	ldi	r30, 0xF3	; 243
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	10 82       	st	Z, r1
		CANIDT2 = 0;
     5b4:	e2 ef       	ldi	r30, 0xF2	; 242
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	10 82       	st	Z, r1
		CANIDT3 = 0;
     5ba:	e1 ef       	ldi	r30, 0xF1	; 241
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	10 82       	st	Z, r1
		CANIDT4 = 0;
     5c0:	e0 ef       	ldi	r30, 0xF0	; 240
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	10 82       	st	Z, r1
		CANIDM1 = 0;
     5c6:	e7 ef       	ldi	r30, 0xF7	; 247
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	10 82       	st	Z, r1
		CANIDM2 = 0;
     5cc:	e6 ef       	ldi	r30, 0xF6	; 246
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	10 82       	st	Z, r1
		CANIDM3 = 0;
     5d2:	e5 ef       	ldi	r30, 0xF5	; 245
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	10 82       	st	Z, r1
		CANIDM4 = 0;
     5d8:	e4 ef       	ldi	r30, 0xF4	; 244
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     5de:	19 82       	std	Y+1, r1	; 0x01
     5e0:	06 c0       	rjmp	.+12     	; 0x5ee <CAN_InitModule+0x6e>
			CANMSG = 0;
     5e2:	ea ef       	ldi	r30, 0xFA	; 250
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     5e8:	89 81       	ldd	r24, Y+1	; 0x01
     5ea:	8f 5f       	subi	r24, 0xFF	; 255
     5ec:	89 83       	std	Y+1, r24	; 0x01
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	88 30       	cpi	r24, 0x08	; 8
     5f2:	b8 f3       	brcs	.-18     	; 0x5e2 <CAN_InitModule+0x62>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     5f4:	8a 81       	ldd	r24, Y+2	; 0x02
     5f6:	8f 5f       	subi	r24, 0xFF	; 255
     5f8:	8a 83       	std	Y+2, r24	; 0x02
     5fa:	8a 81       	ldd	r24, Y+2	; 0x02
     5fc:	8f 30       	cpi	r24, 0x0F	; 15
     5fe:	58 f2       	brcs	.-106    	; 0x596 <CAN_InitModule+0x16>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     600:	e8 ed       	ldi	r30, 0xD8	; 216
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	82 e0       	ldi	r24, 0x02	; 2
     606:	80 83       	st	Z, r24

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     608:	e2 ee       	ldi	r30, 0xE2	; 226
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	80 83       	st	Z, r24
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     610:	e3 ee       	ldi	r30, 0xE3	; 227
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	88 e0       	ldi	r24, 0x08	; 8
     616:	80 83       	st	Z, r24
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     618:	e4 ee       	ldi	r30, 0xE4	; 228
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	8e e5       	ldi	r24, 0x5E	; 94
     61e:	80 83       	st	Z, r24

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     620:	e5 ee       	ldi	r30, 0xE5	; 229
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     626:	eb ed       	ldi	r30, 0xDB	; 219
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	80 eb       	ldi	r24, 0xB0	; 176
     62c:	80 83       	st	Z, r24
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     62e:	ef ed       	ldi	r30, 0xDF	; 223
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	8f e7       	ldi	r24, 0x7F	; 127
     634:	80 83       	st	Z, r24
	CANIE2 = 0xFF;
     636:	ee ed       	ldi	r30, 0xDE	; 222
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	8f ef       	ldi	r24, 0xFF	; 255
     63c:	80 83       	st	Z, r24
	sei();
     63e:	78 94       	sei
}
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	cf 91       	pop	r28
     646:	df 91       	pop	r29
     648:	08 95       	ret

0000064a <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
     64a:	df 93       	push	r29
     64c:	cf 93       	push	r28
     64e:	00 d0       	rcall	.+0      	; 0x650 <CAN_InitRxMob+0x6>
     650:	00 d0       	rcall	.+0      	; 0x652 <CAN_InitRxMob+0x8>
     652:	0f 92       	push	r0
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	9c 83       	std	Y+4, r25	; 0x04
     65a:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     65c:	ed ee       	ldi	r30, 0xED	; 237
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	80 81       	ld	r24, Z
     662:	89 83       	std	Y+1, r24	; 0x01

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     664:	e9 ed       	ldi	r30, 0xD9	; 217
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	80 81       	ld	r24, Z
     66a:	82 95       	swap	r24
     66c:	8f 70       	andi	r24, 0x0F	; 15
     66e:	88 2f       	mov	r24, r24
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	81 70       	andi	r24, 0x01	; 1
     674:	90 70       	andi	r25, 0x00	; 0
     676:	88 23       	and	r24, r24
     678:	a9 f7       	brne	.-22     	; 0x664 <CAN_InitRxMob+0x1a>
     67a:	e9 ed       	ldi	r30, 0xD9	; 217
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	80 81       	ld	r24, Z
     680:	86 95       	lsr	r24
     682:	86 95       	lsr	r24
     684:	86 95       	lsr	r24
     686:	88 2f       	mov	r24, r24
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	81 70       	andi	r24, 0x01	; 1
     68c:	90 70       	andi	r25, 0x00	; 0
     68e:	88 23       	and	r24, r24
     690:	49 f7       	brne	.-46     	; 0x664 <CAN_InitRxMob+0x1a>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     692:	1a 82       	std	Y+2, r1	; 0x02
     694:	3f c0       	rjmp	.+126    	; 0x714 <CAN_InitRxMob+0xca>
	{
		CANPAGE = ch << 4;
     696:	ed ee       	ldi	r30, 0xED	; 237
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	8a 81       	ldd	r24, Y+2	; 0x02
     69c:	82 95       	swap	r24
     69e:	80 7f       	andi	r24, 0xF0	; 240
     6a0:	80 83       	st	Z, r24

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     6a2:	ef ee       	ldi	r30, 0xEF	; 239
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	80 81       	ld	r24, Z
     6a8:	82 95       	swap	r24
     6aa:	86 95       	lsr	r24
     6ac:	86 95       	lsr	r24
     6ae:	83 70       	andi	r24, 0x03	; 3
     6b0:	88 23       	and	r24, r24
     6b2:	69 f5       	brne	.+90     	; 0x70e <CAN_InitRxMob+0xc4>
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     6b4:	ef ee       	ldi	r30, 0xEF	; 239
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	8f e0       	ldi	r24, 0x0F	; 15
     6ba:	80 83       	st	Z, r24

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     6bc:	e3 ef       	ldi	r30, 0xF3	; 243
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	8b 81       	ldd	r24, Y+3	; 0x03
     6c2:	9c 81       	ldd	r25, Y+4	; 0x04
     6c4:	90 70       	andi	r25, 0x00	; 0
     6c6:	96 95       	lsr	r25
     6c8:	87 95       	ror	r24
     6ca:	96 95       	lsr	r25
     6cc:	87 95       	ror	r24
     6ce:	96 95       	lsr	r25
     6d0:	87 95       	ror	r24
     6d2:	80 83       	st	Z, r24
		CANIDT2 = (ide & 0x00FF) << 5;
     6d4:	e2 ef       	ldi	r30, 0xF2	; 242
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	8b 81       	ldd	r24, Y+3	; 0x03
     6da:	82 95       	swap	r24
     6dc:	88 0f       	add	r24, r24
     6de:	80 7e       	andi	r24, 0xE0	; 224
     6e0:	80 83       	st	Z, r24

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     6e2:	e6 ef       	ldi	r30, 0xF6	; 246
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	80 ee       	ldi	r24, 0xE0	; 224
     6e8:	80 83       	st	Z, r24
		CANIDM1 = 0xFF;
     6ea:	e7 ef       	ldi	r30, 0xF7	; 247
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	8f ef       	ldi	r24, 0xFF	; 255
     6f0:	80 83       	st	Z, r24

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     6f2:	af ee       	ldi	r26, 0xEF	; 239
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef ee       	ldi	r30, 0xEF	; 239
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	80 68       	ori	r24, 0x80	; 128
     6fe:	8c 93       	st	X, r24

		CANPAGE = tempPage;
     700:	ed ee       	ldi	r30, 0xED	; 237
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	89 81       	ldd	r24, Y+1	; 0x01
     706:	80 83       	st	Z, r24

		return 1;
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	8d 83       	std	Y+5, r24	; 0x05
     70c:	0c c0       	rjmp	.+24     	; 0x726 <CAN_InitRxMob+0xdc>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     70e:	8a 81       	ldd	r24, Y+2	; 0x02
     710:	8f 5f       	subi	r24, 0xFF	; 255
     712:	8a 83       	std	Y+2, r24	; 0x02
     714:	8a 81       	ldd	r24, Y+2	; 0x02
     716:	8f 30       	cpi	r24, 0x0F	; 15
     718:	08 f4       	brcc	.+2      	; 0x71c <CAN_InitRxMob+0xd2>
     71a:	bd cf       	rjmp	.-134    	; 0x696 <CAN_InitRxMob+0x4c>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     71c:	ed ee       	ldi	r30, 0xED	; 237
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	89 81       	ldd	r24, Y+1	; 0x01
     722:	80 83       	st	Z, r24

	return 0;
     724:	1d 82       	std	Y+5, r1	; 0x05
     726:	8d 81       	ldd	r24, Y+5	; 0x05
}
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
     72c:	0f 90       	pop	r0
     72e:	0f 90       	pop	r0
     730:	0f 90       	pop	r0
     732:	cf 91       	pop	r28
     734:	df 91       	pop	r29
     736:	08 95       	ret

00000738 <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
     738:	0f 93       	push	r16
     73a:	1f 93       	push	r17
     73c:	df 93       	push	r29
     73e:	cf 93       	push	r28
     740:	00 d0       	rcall	.+0      	; 0x742 <CAN_Init+0xa>
     742:	cd b7       	in	r28, 0x3d	; 61
     744:	de b7       	in	r29, 0x3e	; 62
     746:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
     748:	1b df       	rcall	.-458    	; 0x580 <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     74a:	19 82       	std	Y+1, r1	; 0x01
     74c:	36 c0       	rjmp	.+108    	; 0x7ba <CAN_Init+0x82>
	{
		CAN_InitRxMob(i + 1);
     74e:	89 81       	ldd	r24, Y+1	; 0x01
     750:	88 2f       	mov	r24, r24
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	79 df       	rcall	.-270    	; 0x64a <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     758:	89 81       	ldd	r24, Y+1	; 0x01
     75a:	88 2f       	mov	r24, r24
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	88 0f       	add	r24, r24
     760:	99 1f       	adc	r25, r25
     762:	8c 01       	movw	r16, r24
     764:	0e 5e       	subi	r16, 0xEE	; 238
     766:	1e 4f       	sbci	r17, 0xFE	; 254
     768:	85 e0       	ldi	r24, 0x05	; 5
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	61 e0       	ldi	r22, 0x01	; 1
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <calloc>
     774:	f8 01       	movw	r30, r16
     776:	91 83       	std	Z+1, r25	; 0x01
     778:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	48 2f       	mov	r20, r24
     77e:	50 e0       	ldi	r21, 0x00	; 0
     780:	89 81       	ldd	r24, Y+1	; 0x01
     782:	28 2f       	mov	r18, r24
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	89 81       	ldd	r24, Y+1	; 0x01
     788:	88 2f       	mov	r24, r24
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	fc 01       	movw	r30, r24
     78e:	e6 5c       	subi	r30, 0xC6	; 198
     790:	fe 4f       	sbci	r31, 0xFE	; 254
     792:	10 82       	st	Z, r1
     794:	fc 01       	movw	r30, r24
     796:	e6 5c       	subi	r30, 0xC6	; 198
     798:	fe 4f       	sbci	r31, 0xFE	; 254
     79a:	80 81       	ld	r24, Z
     79c:	f9 01       	movw	r30, r18
     79e:	e0 5d       	subi	r30, 0xD0	; 208
     7a0:	fe 4f       	sbci	r31, 0xFE	; 254
     7a2:	80 83       	st	Z, r24
     7a4:	f9 01       	movw	r30, r18
     7a6:	e0 5d       	subi	r30, 0xD0	; 208
     7a8:	fe 4f       	sbci	r31, 0xFE	; 254
     7aa:	80 81       	ld	r24, Z
     7ac:	fa 01       	movw	r30, r20
     7ae:	ea 5d       	subi	r30, 0xDA	; 218
     7b0:	fe 4f       	sbci	r31, 0xFE	; 254
     7b2:	80 83       	st	Z, r24

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     7b4:	89 81       	ldd	r24, Y+1	; 0x01
     7b6:	8f 5f       	subi	r24, 0xFF	; 255
     7b8:	89 83       	std	Y+1, r24	; 0x01
     7ba:	99 81       	ldd	r25, Y+1	; 0x01
     7bc:	8a 81       	ldd	r24, Y+2	; 0x02
     7be:	98 17       	cp	r25, r24
     7c0:	30 f2       	brcs	.-116    	; 0x74e <CAN_Init+0x16>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	cf 91       	pop	r28
     7c8:	df 91       	pop	r29
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	08 95       	ret

000007d0 <CAN_Read>:
	return rxCounter[nodeID - 1];
}


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
     7d0:	df 93       	push	r29
     7d2:	cf 93       	push	r28
     7d4:	00 d0       	rcall	.+0      	; 0x7d6 <CAN_Read+0x6>
     7d6:	00 d0       	rcall	.+0      	; 0x7d8 <CAN_Read+0x8>
     7d8:	cd b7       	in	r28, 0x3d	; 61
     7da:	de b7       	in	r29, 0x3e	; 62
     7dc:	9b 83       	std	Y+3, r25	; 0x03
     7de:	8a 83       	std	Y+2, r24	; 0x02
     7e0:	6c 83       	std	Y+4, r22	; 0x04
    unsigned char i;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
     7e2:	8c 81       	ldd	r24, Y+4	; 0x04
     7e4:	88 2f       	mov	r24, r24
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	01 97       	sbiw	r24, 0x01	; 1
     7ea:	fc 01       	movw	r30, r24
     7ec:	e6 5c       	subi	r30, 0xC6	; 198
     7ee:	fe 4f       	sbci	r31, 0xFE	; 254
     7f0:	80 81       	ld	r24, Z
     7f2:	88 23       	and	r24, r24
     7f4:	b1 f3       	breq	.-20     	; 0x7e2 <CAN_Read+0x12>

	for(i = 0; i < 8; ++i)
     7f6:	19 82       	std	Y+1, r1	; 0x01
     7f8:	30 c0       	rjmp	.+96     	; 0x85a <CAN_Read+0x8a>
		*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
     7fc:	28 2f       	mov	r18, r24
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	8a 81       	ldd	r24, Y+2	; 0x02
     802:	9b 81       	ldd	r25, Y+3	; 0x03
     804:	dc 01       	movw	r26, r24
     806:	a2 0f       	add	r26, r18
     808:	b3 1f       	adc	r27, r19
     80a:	8c 81       	ldd	r24, Y+4	; 0x04
     80c:	28 2f       	mov	r18, r24
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	82 1b       	sub	r24, r18
     816:	93 0b       	sbc	r25, r19
     818:	88 0f       	add	r24, r24
     81a:	99 1f       	adc	r25, r25
     81c:	90 95       	com	r25
     81e:	81 95       	neg	r24
     820:	9f 4f       	sbci	r25, 0xFF	; 255
     822:	fc 01       	movw	r30, r24
     824:	ee 5e       	subi	r30, 0xEE	; 238
     826:	fe 4f       	sbci	r31, 0xFE	; 254
     828:	40 81       	ld	r20, Z
     82a:	51 81       	ldd	r21, Z+1	; 0x01
     82c:	8c 81       	ldd	r24, Y+4	; 0x04
     82e:	88 2f       	mov	r24, r24
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	01 97       	sbiw	r24, 0x01	; 1
     834:	fc 01       	movw	r30, r24
     836:	e0 5d       	subi	r30, 0xD0	; 208
     838:	fe 4f       	sbci	r31, 0xFE	; 254
     83a:	80 81       	ld	r24, Z
     83c:	28 2f       	mov	r18, r24
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	89 81       	ldd	r24, Y+1	; 0x01
     842:	88 2f       	mov	r24, r24
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	82 0f       	add	r24, r18
     848:	93 1f       	adc	r25, r19
     84a:	fa 01       	movw	r30, r20
     84c:	e8 0f       	add	r30, r24
     84e:	f9 1f       	adc	r31, r25
     850:	80 81       	ld	r24, Z
     852:	8c 93       	st	X, r24
{
    unsigned char i;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
     854:	89 81       	ldd	r24, Y+1	; 0x01
     856:	8f 5f       	subi	r24, 0xFF	; 255
     858:	89 83       	std	Y+1, r24	; 0x01
     85a:	89 81       	ldd	r24, Y+1	; 0x01
     85c:	88 30       	cpi	r24, 0x08	; 8
     85e:	68 f2       	brcs	.-102    	; 0x7fa <CAN_Read+0x2a>
		*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
     860:	8c 81       	ldd	r24, Y+4	; 0x04
     862:	88 2f       	mov	r24, r24
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	01 97       	sbiw	r24, 0x01	; 1
     868:	fc 01       	movw	r30, r24
     86a:	e0 5d       	subi	r30, 0xD0	; 208
     86c:	fe 4f       	sbci	r31, 0xFE	; 254
     86e:	80 81       	ld	r24, Z
     870:	8f 5f       	subi	r24, 0xFF	; 255
     872:	80 83       	st	Z, r24
     874:	80 81       	ld	r24, Z
     876:	85 30       	cpi	r24, 0x05	; 5
     878:	41 f4       	brne	.+16     	; 0x88a <CAN_Read+0xba>
		*(rxRdIndex + sendingNodeID - 1) = 0;
     87a:	8c 81       	ldd	r24, Y+4	; 0x04
     87c:	88 2f       	mov	r24, r24
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	01 97       	sbiw	r24, 0x01	; 1
     882:	fc 01       	movw	r30, r24
     884:	e0 5d       	subi	r30, 0xD0	; 208
     886:	fe 4f       	sbci	r31, 0xFE	; 254
     888:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
     88a:	8c 81       	ldd	r24, Y+4	; 0x04
     88c:	88 2f       	mov	r24, r24
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	9c 01       	movw	r18, r24
     892:	21 50       	subi	r18, 0x01	; 1
     894:	30 40       	sbci	r19, 0x00	; 0
     896:	f9 01       	movw	r30, r18
     898:	e6 5c       	subi	r30, 0xC6	; 198
     89a:	fe 4f       	sbci	r31, 0xFE	; 254
     89c:	80 81       	ld	r24, Z
     89e:	81 50       	subi	r24, 0x01	; 1
     8a0:	f9 01       	movw	r30, r18
     8a2:	e6 5c       	subi	r30, 0xC6	; 198
     8a4:	fe 4f       	sbci	r31, 0xFE	; 254
     8a6:	80 83       	st	Z, r24

	return 0;
     8a8:	80 e0       	ldi	r24, 0x00	; 0
}
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	cf 91       	pop	r28
     8b4:	df 91       	pop	r29
     8b6:	08 95       	ret

000008b8 <CAN_Write>:


char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
     8b8:	df 93       	push	r29
     8ba:	cf 93       	push	r28
     8bc:	cd b7       	in	r28, 0x3d	; 61
     8be:	de b7       	in	r29, 0x3e	; 62
     8c0:	27 97       	sbiw	r28, 0x07	; 7
     8c2:	0f b6       	in	r0, 0x3f	; 63
     8c4:	f8 94       	cli
     8c6:	de bf       	out	0x3e, r29	; 62
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	cd bf       	out	0x3d, r28	; 61
     8cc:	9d 83       	std	Y+5, r25	; 0x05
     8ce:	8c 83       	std	Y+4, r24	; 0x04
     8d0:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     8d2:	e9 ed       	ldi	r30, 0xD9	; 217
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	80 81       	ld	r24, Z
     8d8:	82 95       	swap	r24
     8da:	8f 70       	andi	r24, 0x0F	; 15
     8dc:	88 2f       	mov	r24, r24
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	81 70       	andi	r24, 0x01	; 1
     8e2:	90 70       	andi	r25, 0x00	; 0
     8e4:	88 23       	and	r24, r24
     8e6:	a9 f7       	brne	.-22     	; 0x8d2 <CAN_Write+0x1a>
     8e8:	e9 ed       	ldi	r30, 0xD9	; 217
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	80 81       	ld	r24, Z
     8ee:	86 95       	lsr	r24
     8f0:	86 95       	lsr	r24
     8f2:	86 95       	lsr	r24
     8f4:	88 2f       	mov	r24, r24
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	81 70       	andi	r24, 0x01	; 1
     8fa:	90 70       	andi	r25, 0x00	; 0
     8fc:	88 23       	and	r24, r24
     8fe:	49 f7       	brne	.-46     	; 0x8d2 <CAN_Write+0x1a>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     900:	ed ee       	ldi	r30, 0xED	; 237
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	80 81       	ld	r24, Z
     906:	89 83       	std	Y+1, r24	; 0x01

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     908:	1a 82       	std	Y+2, r1	; 0x02
     90a:	12 c0       	rjmp	.+36     	; 0x930 <CAN_Write+0x78>
	{
		CANPAGE = ch << 4;
     90c:	ed ee       	ldi	r30, 0xED	; 237
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	8a 81       	ldd	r24, Y+2	; 0x02
     912:	82 95       	swap	r24
     914:	80 7f       	andi	r24, 0xF0	; 240
     916:	80 83       	st	Z, r24

		if(!(CANCDMOB >> 6))
     918:	ef ee       	ldi	r30, 0xEF	; 239
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	80 81       	ld	r24, Z
     91e:	82 95       	swap	r24
     920:	86 95       	lsr	r24
     922:	86 95       	lsr	r24
     924:	83 70       	andi	r24, 0x03	; 3
     926:	88 23       	and	r24, r24
     928:	31 f0       	breq	.+12     	; 0x936 <CAN_Write+0x7e>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     92a:	8a 81       	ldd	r24, Y+2	; 0x02
     92c:	8f 5f       	subi	r24, 0xFF	; 255
     92e:	8a 83       	std	Y+2, r24	; 0x02
     930:	8a 81       	ldd	r24, Y+2	; 0x02
     932:	8f 30       	cpi	r24, 0x0F	; 15
     934:	58 f3       	brcs	.-42     	; 0x90c <CAN_Write+0x54>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
     936:	8a 81       	ldd	r24, Y+2	; 0x02
     938:	8f 30       	cpi	r24, 0x0F	; 15
     93a:	19 f4       	brne	.+6      	; 0x942 <CAN_Write+0x8a>
		return -1;
     93c:	8f ef       	ldi	r24, 0xFF	; 255
     93e:	8f 83       	std	Y+7, r24	; 0x07
     940:	32 c0       	rjmp	.+100    	; 0x9a6 <CAN_Write+0xee>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
     942:	e2 ef       	ldi	r30, 0xF2	; 242
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	8e 81       	ldd	r24, Y+6	; 0x06
     948:	82 95       	swap	r24
     94a:	88 0f       	add	r24, r24
     94c:	80 7e       	andi	r24, 0xE0	; 224
     94e:	80 83       	st	Z, r24
	CANIDT1 = (receivingNodeAddress) >> 3;
     950:	e3 ef       	ldi	r30, 0xF3	; 243
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	8e 81       	ldd	r24, Y+6	; 0x06
     956:	86 95       	lsr	r24
     958:	86 95       	lsr	r24
     95a:	86 95       	lsr	r24
     95c:	80 83       	st	Z, r24

	// DLC = 8
	CANCDMOB = 8;
     95e:	ef ee       	ldi	r30, 0xEF	; 239
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	88 e0       	ldi	r24, 0x08	; 8
     964:	80 83       	st	Z, r24

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     966:	1b 82       	std	Y+3, r1	; 0x03
     968:	0f c0       	rjmp	.+30     	; 0x988 <CAN_Write+0xd0>
		CANMSG = data[i];
     96a:	aa ef       	ldi	r26, 0xFA	; 250
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	8b 81       	ldd	r24, Y+3	; 0x03
     970:	28 2f       	mov	r18, r24
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	8c 81       	ldd	r24, Y+4	; 0x04
     976:	9d 81       	ldd	r25, Y+5	; 0x05
     978:	fc 01       	movw	r30, r24
     97a:	e2 0f       	add	r30, r18
     97c:	f3 1f       	adc	r31, r19
     97e:	80 81       	ld	r24, Z
     980:	8c 93       	st	X, r24

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     982:	8b 81       	ldd	r24, Y+3	; 0x03
     984:	8f 5f       	subi	r24, 0xFF	; 255
     986:	8b 83       	std	Y+3, r24	; 0x03
     988:	8b 81       	ldd	r24, Y+3	; 0x03
     98a:	88 30       	cpi	r24, 0x08	; 8
     98c:	70 f3       	brcs	.-36     	; 0x96a <CAN_Write+0xb2>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
     98e:	af ee       	ldi	r26, 0xEF	; 239
     990:	b0 e0       	ldi	r27, 0x00	; 0
     992:	ef ee       	ldi	r30, 0xEF	; 239
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	80 81       	ld	r24, Z
     998:	80 64       	ori	r24, 0x40	; 64
     99a:	8c 93       	st	X, r24

	CANPAGE = tempPage;
     99c:	ed ee       	ldi	r30, 0xED	; 237
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	89 81       	ldd	r24, Y+1	; 0x01
     9a2:	80 83       	st	Z, r24

	return 0;
     9a4:	1f 82       	std	Y+7, r1	; 0x07
     9a6:	8f 81       	ldd	r24, Y+7	; 0x07
}
     9a8:	27 96       	adiw	r28, 0x07	; 7
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	de bf       	out	0x3e, r29	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	cd bf       	out	0x3d, r28	; 61
     9b4:	cf 91       	pop	r28
     9b6:	df 91       	pop	r29
     9b8:	08 95       	ret

000009ba <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
     9ba:	df 93       	push	r29
     9bc:	cf 93       	push	r28
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
     9c2:	2c 97       	sbiw	r28, 0x0c	; 12
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	f8 94       	cli
     9c8:	de bf       	out	0x3e, r29	; 62
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	cd bf       	out	0x3d, r28	; 61
     9ce:	89 87       	std	Y+9, r24	; 0x09
     9d0:	6a 87       	std	Y+10, r22	; 0x0a
     9d2:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     9d4:	80 91 08 01 	lds	r24, 0x0108
     9d8:	90 91 09 01 	lds	r25, 0x0109
     9dc:	9c 83       	std	Y+4, r25	; 0x04
     9de:	8b 83       	std	Y+3, r24	; 0x03
     9e0:	8b 81       	ldd	r24, Y+3	; 0x03
     9e2:	9c 81       	ldd	r25, Y+4	; 0x04
     9e4:	06 97       	sbiw	r24, 0x06	; 6
     9e6:	98 87       	std	Y+8, r25	; 0x08
     9e8:	8f 83       	std	Y+7, r24	; 0x07
     9ea:	14 c0       	rjmp	.+40     	; 0xa14 <gpio_register_pin+0x5a>
    {
        if(input->pin == pin)
     9ec:	ef 81       	ldd	r30, Y+7	; 0x07
     9ee:	f8 85       	ldd	r31, Y+8	; 0x08
     9f0:	90 81       	ld	r25, Z
     9f2:	89 85       	ldd	r24, Y+9	; 0x09
     9f4:	98 17       	cp	r25, r24
     9f6:	19 f4       	brne	.+6      	; 0x9fe <gpio_register_pin+0x44>
            return 1;
     9f8:	21 e0       	ldi	r18, 0x01	; 1
     9fa:	2c 87       	std	Y+12, r18	; 0x0c
     9fc:	a7 c0       	rjmp	.+334    	; 0xb4c <gpio_register_pin+0x192>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     9fe:	ef 81       	ldd	r30, Y+7	; 0x07
     a00:	f8 85       	ldd	r31, Y+8	; 0x08
     a02:	80 85       	ldd	r24, Z+8	; 0x08
     a04:	91 85       	ldd	r25, Z+9	; 0x09
     a06:	9a 83       	std	Y+2, r25	; 0x02
     a08:	89 83       	std	Y+1, r24	; 0x01
     a0a:	89 81       	ldd	r24, Y+1	; 0x01
     a0c:	9a 81       	ldd	r25, Y+2	; 0x02
     a0e:	06 97       	sbiw	r24, 0x06	; 6
     a10:	98 87       	std	Y+8, r25	; 0x08
     a12:	8f 83       	std	Y+7, r24	; 0x07
     a14:	8f 81       	ldd	r24, Y+7	; 0x07
     a16:	98 85       	ldd	r25, Y+8	; 0x08
     a18:	06 96       	adiw	r24, 0x06	; 6
     a1a:	21 e0       	ldi	r18, 0x01	; 1
     a1c:	86 30       	cpi	r24, 0x06	; 6
     a1e:	92 07       	cpc	r25, r18
     a20:	29 f7       	brne	.-54     	; 0x9ec <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
     a22:	89 85       	ldd	r24, Y+9	; 0x09
     a24:	86 95       	lsr	r24
     a26:	86 95       	lsr	r24
     a28:	86 95       	lsr	r24
     a2a:	8f 5f       	subi	r24, 0xFF	; 255
     a2c:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pin_reg = pin % 8;
     a2e:	89 85       	ldd	r24, Y+9	; 0x09
     a30:	87 70       	andi	r24, 0x07	; 7
     a32:	8d 83       	std	Y+5, r24	; 0x05
	if(direction == GPIO_DIRECTION_OUTPUT)
     a34:	8a 85       	ldd	r24, Y+10	; 0x0a
     a36:	81 30       	cpi	r24, 0x01	; 1
     a38:	09 f0       	breq	.+2      	; 0xa3c <gpio_register_pin+0x82>
     a3a:	48 c0       	rjmp	.+144    	; 0xacc <gpio_register_pin+0x112>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
     a3c:	8e 81       	ldd	r24, Y+6	; 0x06
     a3e:	28 2f       	mov	r18, r24
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	c9 01       	movw	r24, r18
     a44:	88 0f       	add	r24, r24
     a46:	99 1f       	adc	r25, r25
     a48:	82 0f       	add	r24, r18
     a4a:	93 1f       	adc	r25, r19
     a4c:	4e 96       	adiw	r24, 0x1e	; 30
     a4e:	dc 01       	movw	r26, r24
     a50:	8e 81       	ldd	r24, Y+6	; 0x06
     a52:	28 2f       	mov	r18, r24
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	c9 01       	movw	r24, r18
     a58:	88 0f       	add	r24, r24
     a5a:	99 1f       	adc	r25, r25
     a5c:	82 0f       	add	r24, r18
     a5e:	93 1f       	adc	r25, r19
     a60:	4e 96       	adiw	r24, 0x1e	; 30
     a62:	fc 01       	movw	r30, r24
     a64:	80 81       	ld	r24, Z
     a66:	48 2f       	mov	r20, r24
     a68:	8d 81       	ldd	r24, Y+5	; 0x05
     a6a:	28 2f       	mov	r18, r24
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	02 c0       	rjmp	.+4      	; 0xa78 <gpio_register_pin+0xbe>
     a74:	88 0f       	add	r24, r24
     a76:	99 1f       	adc	r25, r25
     a78:	2a 95       	dec	r18
     a7a:	e2 f7       	brpl	.-8      	; 0xa74 <gpio_register_pin+0xba>
     a7c:	84 2b       	or	r24, r20
     a7e:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     a80:	8e 81       	ldd	r24, Y+6	; 0x06
     a82:	28 2f       	mov	r18, r24
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	c9 01       	movw	r24, r18
     a88:	88 0f       	add	r24, r24
     a8a:	99 1f       	adc	r25, r25
     a8c:	82 0f       	add	r24, r18
     a8e:	93 1f       	adc	r25, r19
     a90:	4f 96       	adiw	r24, 0x1f	; 31
     a92:	dc 01       	movw	r26, r24
     a94:	8e 81       	ldd	r24, Y+6	; 0x06
     a96:	28 2f       	mov	r18, r24
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	c9 01       	movw	r24, r18
     a9c:	88 0f       	add	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	82 0f       	add	r24, r18
     aa2:	93 1f       	adc	r25, r19
     aa4:	4f 96       	adiw	r24, 0x1f	; 31
     aa6:	fc 01       	movw	r30, r24
     aa8:	80 81       	ld	r24, Z
     aaa:	48 2f       	mov	r20, r24
     aac:	8d 81       	ldd	r24, Y+5	; 0x05
     aae:	28 2f       	mov	r18, r24
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	02 2e       	mov	r0, r18
     ab8:	02 c0       	rjmp	.+4      	; 0xabe <gpio_register_pin+0x104>
     aba:	88 0f       	add	r24, r24
     abc:	99 1f       	adc	r25, r25
     abe:	0a 94       	dec	r0
     ac0:	e2 f7       	brpl	.-8      	; 0xaba <gpio_register_pin+0x100>
     ac2:	80 95       	com	r24
     ac4:	84 23       	and	r24, r20
     ac6:	8c 93       	st	X, r24
        return 0;
     ac8:	1c 86       	std	Y+12, r1	; 0x0c
     aca:	40 c0       	rjmp	.+128    	; 0xb4c <gpio_register_pin+0x192>
	}
	else
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     acc:	8e 81       	ldd	r24, Y+6	; 0x06
     ace:	28 2f       	mov	r18, r24
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	c9 01       	movw	r24, r18
     ad4:	88 0f       	add	r24, r24
     ad6:	99 1f       	adc	r25, r25
     ad8:	82 0f       	add	r24, r18
     ada:	93 1f       	adc	r25, r19
     adc:	4e 96       	adiw	r24, 0x1e	; 30
     ade:	dc 01       	movw	r26, r24
     ae0:	8e 81       	ldd	r24, Y+6	; 0x06
     ae2:	28 2f       	mov	r18, r24
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	c9 01       	movw	r24, r18
     ae8:	88 0f       	add	r24, r24
     aea:	99 1f       	adc	r25, r25
     aec:	82 0f       	add	r24, r18
     aee:	93 1f       	adc	r25, r19
     af0:	4e 96       	adiw	r24, 0x1e	; 30
     af2:	fc 01       	movw	r30, r24
     af4:	80 81       	ld	r24, Z
     af6:	48 2f       	mov	r20, r24
     af8:	8d 81       	ldd	r24, Y+5	; 0x05
     afa:	28 2f       	mov	r18, r24
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	02 c0       	rjmp	.+4      	; 0xb08 <gpio_register_pin+0x14e>
     b04:	88 0f       	add	r24, r24
     b06:	99 1f       	adc	r25, r25
     b08:	2a 95       	dec	r18
     b0a:	e2 f7       	brpl	.-8      	; 0xb04 <gpio_register_pin+0x14a>
     b0c:	80 95       	com	r24
     b0e:	84 23       	and	r24, r20
     b10:	8c 93       	st	X, r24

    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
     b12:	8a e0       	ldi	r24, 0x0A	; 10
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <malloc>
     b1a:	98 87       	std	Y+8, r25	; 0x08
     b1c:	8f 83       	std	Y+7, r24	; 0x07
    if(input == NULL)
     b1e:	8f 81       	ldd	r24, Y+7	; 0x07
     b20:	98 85       	ldd	r25, Y+8	; 0x08
     b22:	00 97       	sbiw	r24, 0x00	; 0
     b24:	19 f4       	brne	.+6      	; 0xb2c <gpio_register_pin+0x172>
        return 1;
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	8c 87       	std	Y+12, r24	; 0x0c
     b2a:	10 c0       	rjmp	.+32     	; 0xb4c <gpio_register_pin+0x192>

    input->pin       = pin;
     b2c:	ef 81       	ldd	r30, Y+7	; 0x07
     b2e:	f8 85       	ldd	r31, Y+8	; 0x08
     b30:	89 85       	ldd	r24, Y+9	; 0x09
     b32:	80 83       	st	Z, r24
    input->pulled_up = pulled_up;
     b34:	ef 81       	ldd	r30, Y+7	; 0x07
     b36:	f8 85       	ldd	r31, Y+8	; 0x08
     b38:	8b 85       	ldd	r24, Y+11	; 0x0b
     b3a:	81 83       	std	Z+1, r24	; 0x01
    list_add(&input->list, &gpio_inputs);
     b3c:	8f 81       	ldd	r24, Y+7	; 0x07
     b3e:	98 85       	ldd	r25, Y+8	; 0x08
     b40:	06 96       	adiw	r24, 0x06	; 6
     b42:	26 e0       	ldi	r18, 0x06	; 6
     b44:	31 e0       	ldi	r19, 0x01	; 1
     b46:	b9 01       	movw	r22, r18
     b48:	0b d0       	rcall	.+22     	; 0xb60 <list_add>

    return 0;
     b4a:	1c 86       	std	Y+12, r1	; 0x0c
     b4c:	8c 85       	ldd	r24, Y+12	; 0x0c
}
     b4e:	2c 96       	adiw	r28, 0x0c	; 12
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	cf 91       	pop	r28
     b5c:	df 91       	pop	r29
     b5e:	08 95       	ret

00000b60 <list_add>:
    new->prev = prev;
    prev->next = new;
}

static inline void list_add(struct list_head* new, struct list_head* head)
{
     b60:	df 93       	push	r29
     b62:	cf 93       	push	r28
     b64:	00 d0       	rcall	.+0      	; 0xb66 <list_add+0x6>
     b66:	00 d0       	rcall	.+0      	; 0xb68 <list_add+0x8>
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	9a 83       	std	Y+2, r25	; 0x02
     b6e:	89 83       	std	Y+1, r24	; 0x01
     b70:	7c 83       	std	Y+4, r23	; 0x04
     b72:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
     b74:	eb 81       	ldd	r30, Y+3	; 0x03
     b76:	fc 81       	ldd	r31, Y+4	; 0x04
     b78:	42 81       	ldd	r20, Z+2	; 0x02
     b7a:	53 81       	ldd	r21, Z+3	; 0x03
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	9a 81       	ldd	r25, Y+2	; 0x02
     b80:	2b 81       	ldd	r18, Y+3	; 0x03
     b82:	3c 81       	ldd	r19, Y+4	; 0x04
     b84:	b9 01       	movw	r22, r18
     b86:	07 d0       	rcall	.+14     	; 0xb96 <__list_add>
}
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	0f 90       	pop	r0
     b8e:	0f 90       	pop	r0
     b90:	cf 91       	pop	r28
     b92:	df 91       	pop	r29
     b94:	08 95       	ret

00000b96 <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
     b96:	df 93       	push	r29
     b98:	cf 93       	push	r28
     b9a:	00 d0       	rcall	.+0      	; 0xb9c <__list_add+0x6>
     b9c:	00 d0       	rcall	.+0      	; 0xb9e <__list_add+0x8>
     b9e:	00 d0       	rcall	.+0      	; 0xba0 <__list_add+0xa>
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
     ba4:	9a 83       	std	Y+2, r25	; 0x02
     ba6:	89 83       	std	Y+1, r24	; 0x01
     ba8:	7c 83       	std	Y+4, r23	; 0x04
     baa:	6b 83       	std	Y+3, r22	; 0x03
     bac:	5e 83       	std	Y+6, r21	; 0x06
     bae:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
     bb0:	ed 81       	ldd	r30, Y+5	; 0x05
     bb2:	fe 81       	ldd	r31, Y+6	; 0x06
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	9a 81       	ldd	r25, Y+2	; 0x02
     bb8:	91 83       	std	Z+1, r25	; 0x01
     bba:	80 83       	st	Z, r24
    new->next = next;
     bbc:	e9 81       	ldd	r30, Y+1	; 0x01
     bbe:	fa 81       	ldd	r31, Y+2	; 0x02
     bc0:	8d 81       	ldd	r24, Y+5	; 0x05
     bc2:	9e 81       	ldd	r25, Y+6	; 0x06
     bc4:	93 83       	std	Z+3, r25	; 0x03
     bc6:	82 83       	std	Z+2, r24	; 0x02
    new->prev = prev;
     bc8:	e9 81       	ldd	r30, Y+1	; 0x01
     bca:	fa 81       	ldd	r31, Y+2	; 0x02
     bcc:	8b 81       	ldd	r24, Y+3	; 0x03
     bce:	9c 81       	ldd	r25, Y+4	; 0x04
     bd0:	91 83       	std	Z+1, r25	; 0x01
     bd2:	80 83       	st	Z, r24
    prev->next = new;
     bd4:	eb 81       	ldd	r30, Y+3	; 0x03
     bd6:	fc 81       	ldd	r31, Y+4	; 0x04
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	9a 81       	ldd	r25, Y+2	; 0x02
     bdc:	93 83       	std	Z+3, r25	; 0x03
     bde:	82 83       	std	Z+2, r24	; 0x02
}
     be0:	26 96       	adiw	r28, 0x06	; 6
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	f8 94       	cli
     be6:	de bf       	out	0x3e, r29	; 62
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	cd bf       	out	0x3d, r28	; 61
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	08 95       	ret

00000bf2 <__gpio_read_pin>:
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
	return 0;
}

static uint8_t __gpio_read_pin(uint8_t pin)
{
     bf2:	df 93       	push	r29
     bf4:	cf 93       	push	r28
     bf6:	00 d0       	rcall	.+0      	; 0xbf8 <__gpio_read_pin+0x6>
     bf8:	0f 92       	push	r0
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	86 95       	lsr	r24
     c04:	86 95       	lsr	r24
     c06:	86 95       	lsr	r24
     c08:	8f 5f       	subi	r24, 0xFF	; 255
     c0a:	8a 83       	std	Y+2, r24	; 0x02
    pin = pin % 8;
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	87 70       	andi	r24, 0x07	; 7
     c10:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	c9 01       	movw	r24, r18
     c1a:	88 0f       	add	r24, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	82 0f       	add	r24, r18
     c20:	93 1f       	adc	r25, r19
     c22:	4d 96       	adiw	r24, 0x1d	; 29
     c24:	fc 01       	movw	r30, r24
     c26:	80 81       	ld	r24, Z
     c28:	89 83       	std	Y+1, r24	; 0x01

    return ((temp >> pin) & 0x01);
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	88 2f       	mov	r24, r24
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	a9 01       	movw	r20, r18
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <__gpio_read_pin+0x4c>
     c3a:	55 95       	asr	r21
     c3c:	47 95       	ror	r20
     c3e:	8a 95       	dec	r24
     c40:	e2 f7       	brpl	.-8      	; 0xc3a <__gpio_read_pin+0x48>
     c42:	ca 01       	movw	r24, r20
     c44:	81 70       	andi	r24, 0x01	; 1
}
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	cf 91       	pop	r28
     c4e:	df 91       	pop	r29
     c50:	08 95       	ret

00000c52 <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
     c52:	df 93       	push	r29
     c54:	cf 93       	push	r28
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	2b 97       	sbiw	r28, 0x0b	; 11
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     c68:	80 91 08 01 	lds	r24, 0x0108
     c6c:	90 91 09 01 	lds	r25, 0x0109
     c70:	9e 83       	std	Y+6, r25	; 0x06
     c72:	8d 83       	std	Y+5, r24	; 0x05
     c74:	8d 81       	ldd	r24, Y+5	; 0x05
     c76:	9e 81       	ldd	r25, Y+6	; 0x06
     c78:	06 97       	sbiw	r24, 0x06	; 6
     c7a:	98 87       	std	Y+8, r25	; 0x08
     c7c:	8f 83       	std	Y+7, r24	; 0x07
     c7e:	55 c0       	rjmp	.+170    	; 0xd2a <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
     c80:	ef 81       	ldd	r30, Y+7	; 0x07
     c82:	f8 85       	ldd	r31, Y+8	; 0x08
     c84:	90 81       	ld	r25, Z
     c86:	89 85       	ldd	r24, Y+9	; 0x09
     c88:	98 17       	cp	r25, r24
     c8a:	09 f0       	breq	.+2      	; 0xc8e <gpio_read_pin+0x3c>
     c8c:	43 c0       	rjmp	.+134    	; 0xd14 <gpio_read_pin+0xc2>
        {
            uint8_t i = 0;
     c8e:	1c 82       	std	Y+4, r1	; 0x04
     c90:	21 c0       	rjmp	.+66     	; 0xcd4 <gpio_read_pin+0x82>
            while(i < GPIO_DEBOUNCE_COUNT - 1)
            {
                if(input->values[i] != input->values[i + 1])
     c92:	8c 81       	ldd	r24, Y+4	; 0x04
     c94:	28 2f       	mov	r18, r24
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	8f 81       	ldd	r24, Y+7	; 0x07
     c9a:	98 85       	ldd	r25, Y+8	; 0x08
     c9c:	82 0f       	add	r24, r18
     c9e:	93 1f       	adc	r25, r19
     ca0:	fc 01       	movw	r30, r24
     ca2:	32 96       	adiw	r30, 0x02	; 2
     ca4:	40 81       	ld	r20, Z
     ca6:	8c 81       	ldd	r24, Y+4	; 0x04
     ca8:	88 2f       	mov	r24, r24
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	9c 01       	movw	r18, r24
     cae:	2f 5f       	subi	r18, 0xFF	; 255
     cb0:	3f 4f       	sbci	r19, 0xFF	; 255
     cb2:	8f 81       	ldd	r24, Y+7	; 0x07
     cb4:	98 85       	ldd	r25, Y+8	; 0x08
     cb6:	82 0f       	add	r24, r18
     cb8:	93 1f       	adc	r25, r19
     cba:	fc 01       	movw	r30, r24
     cbc:	32 96       	adiw	r30, 0x02	; 2
     cbe:	80 81       	ld	r24, Z
     cc0:	48 17       	cp	r20, r24
     cc2:	29 f0       	breq	.+10     	; 0xcce <gpio_read_pin+0x7c>
                    return input->previous_state;
     cc4:	ef 81       	ldd	r30, Y+7	; 0x07
     cc6:	f8 85       	ldd	r31, Y+8	; 0x08
     cc8:	25 81       	ldd	r18, Z+5	; 0x05
     cca:	2b 87       	std	Y+11, r18	; 0x0b
     ccc:	38 c0       	rjmp	.+112    	; 0xd3e <gpio_read_pin+0xec>
                i++;
     cce:	8c 81       	ldd	r24, Y+4	; 0x04
     cd0:	8f 5f       	subi	r24, 0xFF	; 255
     cd2:	8c 83       	std	Y+4, r24	; 0x04
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
     cd4:	8c 81       	ldd	r24, Y+4	; 0x04
     cd6:	82 30       	cpi	r24, 0x02	; 2
     cd8:	e0 f2       	brcs	.-72     	; 0xc92 <gpio_read_pin+0x40>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
     cda:	ef 81       	ldd	r30, Y+7	; 0x07
     cdc:	f8 85       	ldd	r31, Y+8	; 0x08
     cde:	91 81       	ldd	r25, Z+1	; 0x01
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	89 27       	eor	r24, r25
     ce4:	88 23       	and	r24, r24
     ce6:	29 f0       	breq	.+10     	; 0xcf2 <gpio_read_pin+0xa0>
     ce8:	ef 81       	ldd	r30, Y+7	; 0x07
     cea:	f8 85       	ldd	r31, Y+8	; 0x08
     cec:	82 81       	ldd	r24, Z+2	; 0x02
     cee:	8a 87       	std	Y+10, r24	; 0x0a
     cf0:	08 c0       	rjmp	.+16     	; 0xd02 <gpio_read_pin+0xb0>
     cf2:	ef 81       	ldd	r30, Y+7	; 0x07
     cf4:	f8 85       	ldd	r31, Y+8	; 0x08
     cf6:	82 81       	ldd	r24, Z+2	; 0x02
     cf8:	1a 86       	std	Y+10, r1	; 0x0a
     cfa:	88 23       	and	r24, r24
     cfc:	11 f4       	brne	.+4      	; 0xd02 <gpio_read_pin+0xb0>
     cfe:	21 e0       	ldi	r18, 0x01	; 1
     d00:	2a 87       	std	Y+10, r18	; 0x0a
     d02:	8a 85       	ldd	r24, Y+10	; 0x0a
     d04:	8b 83       	std	Y+3, r24	; 0x03
            input->previous_state = state;
     d06:	ef 81       	ldd	r30, Y+7	; 0x07
     d08:	f8 85       	ldd	r31, Y+8	; 0x08
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	85 83       	std	Z+5, r24	; 0x05

            return state;
     d0e:	2b 81       	ldd	r18, Y+3	; 0x03
     d10:	2b 87       	std	Y+11, r18	; 0x0b
     d12:	15 c0       	rjmp	.+42     	; 0xd3e <gpio_read_pin+0xec>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     d14:	ef 81       	ldd	r30, Y+7	; 0x07
     d16:	f8 85       	ldd	r31, Y+8	; 0x08
     d18:	80 85       	ldd	r24, Z+8	; 0x08
     d1a:	91 85       	ldd	r25, Z+9	; 0x09
     d1c:	9a 83       	std	Y+2, r25	; 0x02
     d1e:	89 83       	std	Y+1, r24	; 0x01
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	9a 81       	ldd	r25, Y+2	; 0x02
     d24:	06 97       	sbiw	r24, 0x06	; 6
     d26:	98 87       	std	Y+8, r25	; 0x08
     d28:	8f 83       	std	Y+7, r24	; 0x07
     d2a:	8f 81       	ldd	r24, Y+7	; 0x07
     d2c:	98 85       	ldd	r25, Y+8	; 0x08
     d2e:	06 96       	adiw	r24, 0x06	; 6
     d30:	21 e0       	ldi	r18, 0x01	; 1
     d32:	86 30       	cpi	r24, 0x06	; 6
     d34:	92 07       	cpc	r25, r18
     d36:	09 f0       	breq	.+2      	; 0xd3a <gpio_read_pin+0xe8>
     d38:	a3 cf       	rjmp	.-186    	; 0xc80 <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	8b 87       	std	Y+11, r24	; 0x0b
     d3e:	8b 85       	ldd	r24, Y+11	; 0x0b
}
     d40:	2b 96       	adiw	r28, 0x0b	; 11
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	f8 94       	cli
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	cd bf       	out	0x3d, r28	; 61
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
     d52:	0f 93       	push	r16
     d54:	1f 93       	push	r17
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	00 d0       	rcall	.+0      	; 0xd5c <gpio_debouncer+0xa>
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <gpio_debouncer+0xc>
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <gpio_debouncer+0xe>
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     d64:	80 91 08 01 	lds	r24, 0x0108
     d68:	90 91 09 01 	lds	r25, 0x0109
     d6c:	9c 83       	std	Y+4, r25	; 0x04
     d6e:	8b 83       	std	Y+3, r24	; 0x03
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	9c 81       	ldd	r25, Y+4	; 0x04
     d74:	06 97       	sbiw	r24, 0x06	; 6
     d76:	9e 83       	std	Y+6, r25	; 0x06
     d78:	8d 83       	std	Y+5, r24	; 0x05
     d7a:	1b c0       	rjmp	.+54     	; 0xdb2 <gpio_debouncer+0x60>
    {
        input->values[count] = __gpio_read_pin(input->pin);
     d7c:	00 91 44 01 	lds	r16, 0x0144
     d80:	10 91 45 01 	lds	r17, 0x0145
     d84:	ed 81       	ldd	r30, Y+5	; 0x05
     d86:	fe 81       	ldd	r31, Y+6	; 0x06
     d88:	80 81       	ld	r24, Z
     d8a:	33 df       	rcall	.-410    	; 0xbf2 <__gpio_read_pin>
     d8c:	28 2f       	mov	r18, r24
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	80 0f       	add	r24, r16
     d94:	91 1f       	adc	r25, r17
     d96:	fc 01       	movw	r30, r24
     d98:	32 96       	adiw	r30, 0x02	; 2
     d9a:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     d9c:	ed 81       	ldd	r30, Y+5	; 0x05
     d9e:	fe 81       	ldd	r31, Y+6	; 0x06
     da0:	80 85       	ldd	r24, Z+8	; 0x08
     da2:	91 85       	ldd	r25, Z+9	; 0x09
     da4:	9a 83       	std	Y+2, r25	; 0x02
     da6:	89 83       	std	Y+1, r24	; 0x01
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	9a 81       	ldd	r25, Y+2	; 0x02
     dac:	06 97       	sbiw	r24, 0x06	; 6
     dae:	9e 83       	std	Y+6, r25	; 0x06
     db0:	8d 83       	std	Y+5, r24	; 0x05
     db2:	8d 81       	ldd	r24, Y+5	; 0x05
     db4:	9e 81       	ldd	r25, Y+6	; 0x06
     db6:	06 96       	adiw	r24, 0x06	; 6
     db8:	21 e0       	ldi	r18, 0x01	; 1
     dba:	86 30       	cpi	r24, 0x06	; 6
     dbc:	92 07       	cpc	r25, r18
     dbe:	f1 f6       	brne	.-68     	; 0xd7c <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
     dc0:	80 91 44 01 	lds	r24, 0x0144
     dc4:	90 91 45 01 	lds	r25, 0x0145
     dc8:	01 96       	adiw	r24, 0x01	; 1
     dca:	90 93 45 01 	sts	0x0145, r25
     dce:	80 93 44 01 	sts	0x0144, r24
     dd2:	80 91 44 01 	lds	r24, 0x0144
     dd6:	90 91 45 01 	lds	r25, 0x0145
     dda:	83 30       	cpi	r24, 0x03	; 3
     ddc:	91 05       	cpc	r25, r1
     dde:	21 f4       	brne	.+8      	; 0xde8 <gpio_debouncer+0x96>
        count = 0;
     de0:	10 92 45 01 	sts	0x0145, r1
     de4:	10 92 44 01 	sts	0x0144, r1
	
}
     de8:	26 96       	adiw	r28, 0x06	; 6
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	08 95       	ret

00000dfe <odometry_set_speed>:
	.angle = 0,
	.state = IDLE
};

void odometry_set_speed(uint8_t speed)
{
     dfe:	df 93       	push	r29
     e00:	cf 93       	push	r28
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	67 97       	sbiw	r28, 0x17	; 23
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
     e14:	90 91 46 01 	lds	r25, 0x0146
     e18:	8f 89       	ldd	r24, Y+23	; 0x17
     e1a:	89 17       	cp	r24, r25
     e1c:	09 f4       	brne	.+2      	; 0xe20 <odometry_set_speed+0x22>
     e1e:	7b c0       	rjmp	.+246    	; 0xf16 <odometry_set_speed+0x118>
		return;

	uint8_t buffer[8];
	buffer[0] = 'V';
     e20:	86 e5       	ldi	r24, 0x56	; 86
     e22:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
     e24:	8f 89       	ldd	r24, Y+23	; 0x17
     e26:	88 8b       	std	Y+16, r24	; 0x10
     e28:	6c c0       	rjmp	.+216    	; 0xf02 <odometry_set_speed+0x104>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	a8 e4       	ldi	r26, 0x48	; 72
     e30:	b2 e4       	ldi	r27, 0x42	; 66
     e32:	8b 87       	std	Y+11, r24	; 0x0b
     e34:	9c 87       	std	Y+12, r25	; 0x0c
     e36:	ad 87       	std	Y+13, r26	; 0x0d
     e38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e3a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e3c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e3e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e40:	9e 85       	ldd	r25, Y+14	; 0x0e
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e4       	ldi	r19, 0x40	; 64
     e46:	4c e1       	ldi	r20, 0x1C	; 28
     e48:	55 e4       	ldi	r21, 0x45	; 69
     e4a:	65 d6       	rcall	.+3274   	; 0x1b16 <__mulsf3>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	8f 83       	std	Y+7, r24	; 0x07
     e52:	98 87       	std	Y+8, r25	; 0x08
     e54:	a9 87       	std	Y+9, r26	; 0x09
     e56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e58:	6f 81       	ldd	r22, Y+7	; 0x07
     e5a:	78 85       	ldd	r23, Y+8	; 0x08
     e5c:	89 85       	ldd	r24, Y+9	; 0x09
     e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	40 e8       	ldi	r20, 0x80	; 128
     e66:	5f e3       	ldi	r21, 0x3F	; 63
     e68:	08 d5       	rcall	.+2576   	; 0x187a <__cmpsf2>
     e6a:	88 23       	and	r24, r24
     e6c:	2c f4       	brge	.+10     	; 0xe78 <odometry_set_speed+0x7a>
		__ticks = 1;
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	9e 83       	std	Y+6, r25	; 0x06
     e74:	8d 83       	std	Y+5, r24	; 0x05
     e76:	3b c0       	rjmp	.+118    	; 0xeee <odometry_set_speed+0xf0>
	else if (__tmp > 65535)
     e78:	6f 81       	ldd	r22, Y+7	; 0x07
     e7a:	78 85       	ldd	r23, Y+8	; 0x08
     e7c:	89 85       	ldd	r24, Y+9	; 0x09
     e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	3f ef       	ldi	r19, 0xFF	; 255
     e84:	4f e7       	ldi	r20, 0x7F	; 127
     e86:	57 e4       	ldi	r21, 0x47	; 71
     e88:	42 d6       	rcall	.+3204   	; 0x1b0e <__gesf2>
     e8a:	18 16       	cp	r1, r24
     e8c:	3c f5       	brge	.+78     	; 0xedc <odometry_set_speed+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e8e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e90:	7c 85       	ldd	r23, Y+12	; 0x0c
     e92:	8d 85       	ldd	r24, Y+13	; 0x0d
     e94:	9e 85       	ldd	r25, Y+14	; 0x0e
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	40 e2       	ldi	r20, 0x20	; 32
     e9c:	51 e4       	ldi	r21, 0x41	; 65
     e9e:	3b d6       	rcall	.+3190   	; 0x1b16 <__mulsf3>
     ea0:	dc 01       	movw	r26, r24
     ea2:	cb 01       	movw	r24, r22
     ea4:	bc 01       	movw	r22, r24
     ea6:	cd 01       	movw	r24, r26
     ea8:	54 d5       	rcall	.+2728   	; 0x1952 <__fixunssfsi>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
     eae:	9e 83       	std	Y+6, r25	; 0x06
     eb0:	8d 83       	std	Y+5, r24	; 0x05
     eb2:	0f c0       	rjmp	.+30     	; 0xed2 <odometry_set_speed+0xd4>
     eb4:	8a ef       	ldi	r24, 0xFA	; 250
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	9c 83       	std	Y+4, r25	; 0x04
     eba:	8b 83       	std	Y+3, r24	; 0x03
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	9c 81       	ldd	r25, Y+4	; 0x04
     ec0:	01 97       	sbiw	r24, 0x01	; 1
     ec2:	f1 f7       	brne	.-4      	; 0xec0 <odometry_set_speed+0xc2>
     ec4:	9c 83       	std	Y+4, r25	; 0x04
     ec6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec8:	8d 81       	ldd	r24, Y+5	; 0x05
     eca:	9e 81       	ldd	r25, Y+6	; 0x06
     ecc:	01 97       	sbiw	r24, 0x01	; 1
     ece:	9e 83       	std	Y+6, r25	; 0x06
     ed0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed2:	8d 81       	ldd	r24, Y+5	; 0x05
     ed4:	9e 81       	ldd	r25, Y+6	; 0x06
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	69 f7       	brne	.-38     	; 0xeb4 <odometry_set_speed+0xb6>
     eda:	13 c0       	rjmp	.+38     	; 0xf02 <odometry_set_speed+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     edc:	6f 81       	ldd	r22, Y+7	; 0x07
     ede:	78 85       	ldd	r23, Y+8	; 0x08
     ee0:	89 85       	ldd	r24, Y+9	; 0x09
     ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee4:	36 d5       	rcall	.+2668   	; 0x1952 <__fixunssfsi>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	9e 83       	std	Y+6, r25	; 0x06
     eec:	8d 83       	std	Y+5, r24	; 0x05
     eee:	8d 81       	ldd	r24, Y+5	; 0x05
     ef0:	9e 81       	ldd	r25, Y+6	; 0x06
     ef2:	9a 83       	std	Y+2, r25	; 0x02
     ef4:	89 83       	std	Y+1, r24	; 0x01
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	9a 81       	ldd	r25, Y+2	; 0x02
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	f1 f7       	brne	.-4      	; 0xefa <odometry_set_speed+0xfc>
     efe:	9a 83       	std	Y+2, r25	; 0x02
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	ce 01       	movw	r24, r28
     f04:	0f 96       	adiw	r24, 0x0f	; 15
     f06:	63 ec       	ldi	r22, 0xC3	; 195
     f08:	d7 dc       	rcall	.-1618   	; 0x8b8 <CAN_Write>
     f0a:	88 23       	and	r24, r24
     f0c:	09 f0       	breq	.+2      	; 0xf10 <odometry_set_speed+0x112>
     f0e:	8d cf       	rjmp	.-230    	; 0xe2a <odometry_set_speed+0x2c>
		_delay_ms(50);

	current_speed = speed;
     f10:	8f 89       	ldd	r24, Y+23	; 0x17
     f12:	80 93 46 01 	sts	0x0146, r24
}
     f16:	67 96       	adiw	r28, 0x17	; 23
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <odometry_query_position>:

static void odometry_query_position(void)
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	66 97       	sbiw	r28, 0x16	; 22
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	f8 94       	cli
     f36:	de bf       	out	0x3e, r29	; 62
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
     f3c:	80 e5       	ldi	r24, 0x50	; 80
     f3e:	8f 87       	std	Y+15, r24	; 0x0f
     f40:	6c c0       	rjmp	.+216    	; 0x101a <odometry_query_position+0xf2>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	a8 e4       	ldi	r26, 0x48	; 72
     f48:	b2 e4       	ldi	r27, 0x42	; 66
     f4a:	8b 87       	std	Y+11, r24	; 0x0b
     f4c:	9c 87       	std	Y+12, r25	; 0x0c
     f4e:	ad 87       	std	Y+13, r26	; 0x0d
     f50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f52:	6b 85       	ldd	r22, Y+11	; 0x0b
     f54:	7c 85       	ldd	r23, Y+12	; 0x0c
     f56:	8d 85       	ldd	r24, Y+13	; 0x0d
     f58:	9e 85       	ldd	r25, Y+14	; 0x0e
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e4       	ldi	r19, 0x40	; 64
     f5e:	4c e1       	ldi	r20, 0x1C	; 28
     f60:	55 e4       	ldi	r21, 0x45	; 69
     f62:	d9 d5       	rcall	.+2994   	; 0x1b16 <__mulsf3>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	8f 83       	std	Y+7, r24	; 0x07
     f6a:	98 87       	std	Y+8, r25	; 0x08
     f6c:	a9 87       	std	Y+9, r26	; 0x09
     f6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f70:	6f 81       	ldd	r22, Y+7	; 0x07
     f72:	78 85       	ldd	r23, Y+8	; 0x08
     f74:	89 85       	ldd	r24, Y+9	; 0x09
     f76:	9a 85       	ldd	r25, Y+10	; 0x0a
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	40 e8       	ldi	r20, 0x80	; 128
     f7e:	5f e3       	ldi	r21, 0x3F	; 63
     f80:	7c d4       	rcall	.+2296   	; 0x187a <__cmpsf2>
     f82:	88 23       	and	r24, r24
     f84:	2c f4       	brge	.+10     	; 0xf90 <odometry_query_position+0x68>
		__ticks = 1;
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	9e 83       	std	Y+6, r25	; 0x06
     f8c:	8d 83       	std	Y+5, r24	; 0x05
     f8e:	3b c0       	rjmp	.+118    	; 0x1006 <odometry_query_position+0xde>
	else if (__tmp > 65535)
     f90:	6f 81       	ldd	r22, Y+7	; 0x07
     f92:	78 85       	ldd	r23, Y+8	; 0x08
     f94:	89 85       	ldd	r24, Y+9	; 0x09
     f96:	9a 85       	ldd	r25, Y+10	; 0x0a
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	3f ef       	ldi	r19, 0xFF	; 255
     f9c:	4f e7       	ldi	r20, 0x7F	; 127
     f9e:	57 e4       	ldi	r21, 0x47	; 71
     fa0:	b6 d5       	rcall	.+2924   	; 0x1b0e <__gesf2>
     fa2:	18 16       	cp	r1, r24
     fa4:	3c f5       	brge	.+78     	; 0xff4 <odometry_query_position+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa6:	6b 85       	ldd	r22, Y+11	; 0x0b
     fa8:	7c 85       	ldd	r23, Y+12	; 0x0c
     faa:	8d 85       	ldd	r24, Y+13	; 0x0d
     fac:	9e 85       	ldd	r25, Y+14	; 0x0e
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	40 e2       	ldi	r20, 0x20	; 32
     fb4:	51 e4       	ldi	r21, 0x41	; 65
     fb6:	af d5       	rcall	.+2910   	; 0x1b16 <__mulsf3>
     fb8:	dc 01       	movw	r26, r24
     fba:	cb 01       	movw	r24, r22
     fbc:	bc 01       	movw	r22, r24
     fbe:	cd 01       	movw	r24, r26
     fc0:	c8 d4       	rcall	.+2448   	; 0x1952 <__fixunssfsi>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	9e 83       	std	Y+6, r25	; 0x06
     fc8:	8d 83       	std	Y+5, r24	; 0x05
     fca:	0f c0       	rjmp	.+30     	; 0xfea <odometry_query_position+0xc2>
     fcc:	8a ef       	ldi	r24, 0xFA	; 250
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	9c 83       	std	Y+4, r25	; 0x04
     fd2:	8b 83       	std	Y+3, r24	; 0x03
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	9c 81       	ldd	r25, Y+4	; 0x04
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	f1 f7       	brne	.-4      	; 0xfd8 <odometry_query_position+0xb0>
     fdc:	9c 83       	std	Y+4, r25	; 0x04
     fde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe0:	8d 81       	ldd	r24, Y+5	; 0x05
     fe2:	9e 81       	ldd	r25, Y+6	; 0x06
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	9e 83       	std	Y+6, r25	; 0x06
     fe8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fea:	8d 81       	ldd	r24, Y+5	; 0x05
     fec:	9e 81       	ldd	r25, Y+6	; 0x06
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	69 f7       	brne	.-38     	; 0xfcc <odometry_query_position+0xa4>
     ff2:	13 c0       	rjmp	.+38     	; 0x101a <odometry_query_position+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ff4:	6f 81       	ldd	r22, Y+7	; 0x07
     ff6:	78 85       	ldd	r23, Y+8	; 0x08
     ff8:	89 85       	ldd	r24, Y+9	; 0x09
     ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
     ffc:	aa d4       	rcall	.+2388   	; 0x1952 <__fixunssfsi>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	9e 83       	std	Y+6, r25	; 0x06
    1004:	8d 83       	std	Y+5, r24	; 0x05
    1006:	8d 81       	ldd	r24, Y+5	; 0x05
    1008:	9e 81       	ldd	r25, Y+6	; 0x06
    100a:	9a 83       	std	Y+2, r25	; 0x02
    100c:	89 83       	std	Y+1, r24	; 0x01
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	9a 81       	ldd	r25, Y+2	; 0x02
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	f1 f7       	brne	.-4      	; 0x1012 <odometry_query_position+0xea>
    1016:	9a 83       	std	Y+2, r25	; 0x02
    1018:	89 83       	std	Y+1, r24	; 0x01
    101a:	ce 01       	movw	r24, r28
    101c:	0f 96       	adiw	r24, 0x0f	; 15
    101e:	63 ec       	ldi	r22, 0xC3	; 195
    1020:	4b dc       	rcall	.-1898   	; 0x8b8 <CAN_Write>
    1022:	88 23       	and	r24, r24
    1024:	09 f0       	breq	.+2      	; 0x1028 <odometry_query_position+0x100>
    1026:	8d cf       	rjmp	.-230    	; 0xf42 <odometry_query_position+0x1a>
		_delay_ms(50);

	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    1028:	ce 01       	movw	r24, r28
    102a:	0f 96       	adiw	r24, 0x0f	; 15
    102c:	61 e0       	ldi	r22, 0x01	; 1
    102e:	d0 db       	rcall	.-2144   	; 0x7d0 <CAN_Read>

	position.state = buffer[0];
    1030:	8f 85       	ldd	r24, Y+15	; 0x0f
    1032:	80 93 10 01 	sts	0x0110, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    1036:	88 89       	ldd	r24, Y+16	; 0x10
    1038:	88 2f       	mov	r24, r24
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	38 2f       	mov	r19, r24
    103e:	22 27       	eor	r18, r18
    1040:	89 89       	ldd	r24, Y+17	; 0x11
    1042:	88 2f       	mov	r24, r24
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	82 2b       	or	r24, r18
    1048:	93 2b       	or	r25, r19
    104a:	90 93 0b 01 	sts	0x010B, r25
    104e:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    1052:	8a 89       	ldd	r24, Y+18	; 0x12
    1054:	88 2f       	mov	r24, r24
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	38 2f       	mov	r19, r24
    105a:	22 27       	eor	r18, r18
    105c:	8b 89       	ldd	r24, Y+19	; 0x13
    105e:	88 2f       	mov	r24, r24
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	82 2b       	or	r24, r18
    1064:	93 2b       	or	r25, r19
    1066:	90 93 0d 01 	sts	0x010D, r25
    106a:	80 93 0c 01 	sts	0x010C, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    106e:	8c 89       	ldd	r24, Y+20	; 0x14
    1070:	88 2f       	mov	r24, r24
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	38 2f       	mov	r19, r24
    1076:	22 27       	eor	r18, r18
    1078:	8d 89       	ldd	r24, Y+21	; 0x15
    107a:	88 2f       	mov	r24, r24
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	82 2b       	or	r24, r18
    1080:	93 2b       	or	r25, r19
    1082:	90 93 0f 01 	sts	0x010F, r25
    1086:	80 93 0e 01 	sts	0x010E, r24
}
    108a:	66 96       	adiw	r28, 0x16	; 22
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <odometry_wait_until_done>:

static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	27 97       	sbiw	r28, 0x07	; 7
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	cd bf       	out	0x3d, r28	; 61
    10b0:	9e 83       	std	Y+6, r25	; 0x06
    10b2:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    10b4:	5a d2       	rcall	.+1204   	; 0x156a <system_get_system_time>
    10b6:	aa 27       	eor	r26, r26
    10b8:	97 fd       	sbrc	r25, 7
    10ba:	a0 95       	com	r26
    10bc:	ba 2f       	mov	r27, r26
    10be:	89 83       	std	Y+1, r24	; 0x01
    10c0:	9a 83       	std	Y+2, r25	; 0x02
    10c2:	ab 83       	std	Y+3, r26	; 0x03
    10c4:	bc 83       	std	Y+4, r27	; 0x04
	do
	{
		odometry_query_position();
    10c6:	30 df       	rcall	.-416    	; 0xf28 <odometry_query_position>
		if(callback != NULL)
    10c8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ca:	9e 81       	ldd	r25, Y+6	; 0x06
    10cc:	00 97       	sbiw	r24, 0x00	; 0
    10ce:	71 f0       	breq	.+28     	; 0x10ec <odometry_wait_until_done+0x50>
		{
			if(callback(time) == 1)
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	9a 81       	ldd	r25, Y+2	; 0x02
    10d4:	ab 81       	ldd	r26, Y+3	; 0x03
    10d6:	bc 81       	ldd	r27, Y+4	; 0x04
    10d8:	ed 81       	ldd	r30, Y+5	; 0x05
    10da:	fe 81       	ldd	r31, Y+6	; 0x06
    10dc:	bc 01       	movw	r22, r24
    10de:	cd 01       	movw	r24, r26
    10e0:	09 95       	icall
    10e2:	81 30       	cpi	r24, 0x01	; 1
    10e4:	19 f4       	brne	.+6      	; 0x10ec <odometry_wait_until_done+0x50>
				return ODOMETRY_FAIL;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	8f 83       	std	Y+7, r24	; 0x07
    10ea:	09 c0       	rjmp	.+18     	; 0x10fe <odometry_wait_until_done+0x62>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    10ec:	80 91 10 01 	lds	r24, 0x0110
    10f0:	8d 34       	cpi	r24, 0x4D	; 77
    10f2:	49 f3       	breq	.-46     	; 0x10c6 <odometry_wait_until_done+0x2a>
    10f4:	80 91 10 01 	lds	r24, 0x0110
    10f8:	82 35       	cpi	r24, 0x52	; 82
    10fa:	29 f3       	breq	.-54     	; 0x10c6 <odometry_wait_until_done+0x2a>

	return ODOMETRY_SUCCESS;
    10fc:	1f 82       	std	Y+7, r1	; 0x07
    10fe:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1100:	27 96       	adiw	r28, 0x07	; 7
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <odometry_move_straight>:
		odometry_query_position();
	}while(position.state == MOVING || position.state == ROTATING);
}

uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	6b 97       	sbiw	r28, 0x1b	; 27
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	98 8f       	std	Y+24, r25	; 0x18
    1128:	8f 8b       	std	Y+23, r24	; 0x17
    112a:	69 8f       	std	Y+25, r22	; 0x19
    112c:	5b 8f       	std	Y+27, r21	; 0x1b
    112e:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    1130:	89 8d       	ldd	r24, Y+25	; 0x19
    1132:	65 de       	rcall	.-822    	; 0xdfe <odometry_set_speed>
	buffer[0] = 'D';
    1134:	84 e4       	ldi	r24, 0x44	; 68
    1136:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = distance >> 8;
    1138:	8f 89       	ldd	r24, Y+23	; 0x17
    113a:	98 8d       	ldd	r25, Y+24	; 0x18
    113c:	89 2f       	mov	r24, r25
    113e:	99 0f       	add	r25, r25
    1140:	99 0b       	sbc	r25, r25
    1142:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = distance & 0xFF;
    1144:	8f 89       	ldd	r24, Y+23	; 0x17
    1146:	89 8b       	std	Y+17, r24	; 0x11
    1148:	6c c0       	rjmp	.+216    	; 0x1222 <odometry_move_straight+0x110>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	a8 e4       	ldi	r26, 0x48	; 72
    1150:	b2 e4       	ldi	r27, 0x42	; 66
    1152:	8b 87       	std	Y+11, r24	; 0x0b
    1154:	9c 87       	std	Y+12, r25	; 0x0c
    1156:	ad 87       	std	Y+13, r26	; 0x0d
    1158:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    115a:	6b 85       	ldd	r22, Y+11	; 0x0b
    115c:	7c 85       	ldd	r23, Y+12	; 0x0c
    115e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1160:	9e 85       	ldd	r25, Y+14	; 0x0e
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e4       	ldi	r19, 0x40	; 64
    1166:	4c e1       	ldi	r20, 0x1C	; 28
    1168:	55 e4       	ldi	r21, 0x45	; 69
    116a:	d5 d4       	rcall	.+2474   	; 0x1b16 <__mulsf3>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	8f 83       	std	Y+7, r24	; 0x07
    1172:	98 87       	std	Y+8, r25	; 0x08
    1174:	a9 87       	std	Y+9, r26	; 0x09
    1176:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1178:	6f 81       	ldd	r22, Y+7	; 0x07
    117a:	78 85       	ldd	r23, Y+8	; 0x08
    117c:	89 85       	ldd	r24, Y+9	; 0x09
    117e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	40 e8       	ldi	r20, 0x80	; 128
    1186:	5f e3       	ldi	r21, 0x3F	; 63
    1188:	78 d3       	rcall	.+1776   	; 0x187a <__cmpsf2>
    118a:	88 23       	and	r24, r24
    118c:	2c f4       	brge	.+10     	; 0x1198 <odometry_move_straight+0x86>
		__ticks = 1;
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	9e 83       	std	Y+6, r25	; 0x06
    1194:	8d 83       	std	Y+5, r24	; 0x05
    1196:	3b c0       	rjmp	.+118    	; 0x120e <odometry_move_straight+0xfc>
	else if (__tmp > 65535)
    1198:	6f 81       	ldd	r22, Y+7	; 0x07
    119a:	78 85       	ldd	r23, Y+8	; 0x08
    119c:	89 85       	ldd	r24, Y+9	; 0x09
    119e:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	3f ef       	ldi	r19, 0xFF	; 255
    11a4:	4f e7       	ldi	r20, 0x7F	; 127
    11a6:	57 e4       	ldi	r21, 0x47	; 71
    11a8:	b2 d4       	rcall	.+2404   	; 0x1b0e <__gesf2>
    11aa:	18 16       	cp	r1, r24
    11ac:	3c f5       	brge	.+78     	; 0x11fc <odometry_move_straight+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    11b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	40 e2       	ldi	r20, 0x20	; 32
    11bc:	51 e4       	ldi	r21, 0x41	; 65
    11be:	ab d4       	rcall	.+2390   	; 0x1b16 <__mulsf3>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	bc 01       	movw	r22, r24
    11c6:	cd 01       	movw	r24, r26
    11c8:	c4 d3       	rcall	.+1928   	; 0x1952 <__fixunssfsi>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	9e 83       	std	Y+6, r25	; 0x06
    11d0:	8d 83       	std	Y+5, r24	; 0x05
    11d2:	0f c0       	rjmp	.+30     	; 0x11f2 <odometry_move_straight+0xe0>
    11d4:	8a ef       	ldi	r24, 0xFA	; 250
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	9c 83       	std	Y+4, r25	; 0x04
    11da:	8b 83       	std	Y+3, r24	; 0x03
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	9c 81       	ldd	r25, Y+4	; 0x04
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	f1 f7       	brne	.-4      	; 0x11e0 <odometry_move_straight+0xce>
    11e4:	9c 83       	std	Y+4, r25	; 0x04
    11e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	9e 81       	ldd	r25, Y+6	; 0x06
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	9e 83       	std	Y+6, r25	; 0x06
    11f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f2:	8d 81       	ldd	r24, Y+5	; 0x05
    11f4:	9e 81       	ldd	r25, Y+6	; 0x06
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	69 f7       	brne	.-38     	; 0x11d4 <odometry_move_straight+0xc2>
    11fa:	13 c0       	rjmp	.+38     	; 0x1222 <odometry_move_straight+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11fc:	6f 81       	ldd	r22, Y+7	; 0x07
    11fe:	78 85       	ldd	r23, Y+8	; 0x08
    1200:	89 85       	ldd	r24, Y+9	; 0x09
    1202:	9a 85       	ldd	r25, Y+10	; 0x0a
    1204:	a6 d3       	rcall	.+1868   	; 0x1952 <__fixunssfsi>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	9e 83       	std	Y+6, r25	; 0x06
    120c:	8d 83       	std	Y+5, r24	; 0x05
    120e:	8d 81       	ldd	r24, Y+5	; 0x05
    1210:	9e 81       	ldd	r25, Y+6	; 0x06
    1212:	9a 83       	std	Y+2, r25	; 0x02
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	9a 81       	ldd	r25, Y+2	; 0x02
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	f1 f7       	brne	.-4      	; 0x121a <odometry_move_straight+0x108>
    121e:	9a 83       	std	Y+2, r25	; 0x02
    1220:	89 83       	std	Y+1, r24	; 0x01
    1222:	ce 01       	movw	r24, r28
    1224:	0f 96       	adiw	r24, 0x0f	; 15
    1226:	63 ec       	ldi	r22, 0xC3	; 195
    1228:	47 db       	rcall	.-2418   	; 0x8b8 <CAN_Write>
    122a:	88 23       	and	r24, r24
    122c:	09 f0       	breq	.+2      	; 0x1230 <odometry_move_straight+0x11e>
    122e:	8d cf       	rjmp	.-230    	; 0x114a <odometry_move_straight+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1230:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1232:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1234:	33 df       	rcall	.-410    	; 0x109c <odometry_wait_until_done>
}
    1236:	6b 96       	adiw	r28, 0x1b	; 27
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <timer_init>:


void timer_init(unsigned int freq)
{
    1248:	0f 93       	push	r16
    124a:	1f 93       	push	r17
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	00 d0       	rcall	.+0      	; 0x1252 <timer_init+0xa>
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	9a 83       	std	Y+2, r25	; 0x02
    1258:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    125a:	e0 e8       	ldi	r30, 0x80	; 128
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    1260:	e1 e8       	ldi	r30, 0x81	; 129
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	89 e0       	ldi	r24, 0x09	; 9
    1266:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    1268:	08 e8       	ldi	r16, 0x88	; 136
    126a:	10 e0       	ldi	r17, 0x00	; 0
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	9a 81       	ldd	r25, Y+2	; 0x02
    1270:	cc 01       	movw	r24, r24
    1272:	a0 e0       	ldi	r26, 0x00	; 0
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	bc 01       	movw	r22, r24
    1278:	cd 01       	movw	r24, r26
    127a:	97 d3       	rcall	.+1838   	; 0x19aa <__floatunsisf>
    127c:	9b 01       	movw	r18, r22
    127e:	ac 01       	movw	r20, r24
    1280:	60 e8       	ldi	r22, 0x80	; 128
    1282:	76 e9       	ldi	r23, 0x96	; 150
    1284:	88 e1       	ldi	r24, 0x18	; 24
    1286:	9b e4       	ldi	r25, 0x4B	; 75
    1288:	fc d2       	rcall	.+1528   	; 0x1882 <__divsf3>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	bc 01       	movw	r22, r24
    1290:	cd 01       	movw	r24, r26
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	40 e0       	ldi	r20, 0x00	; 0
    1298:	5f e3       	ldi	r21, 0x3F	; 63
    129a:	8b d2       	rcall	.+1302   	; 0x17b2 <__addsf3>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	bc 01       	movw	r22, r24
    12a2:	cd 01       	movw	r24, r26
    12a4:	56 d3       	rcall	.+1708   	; 0x1952 <__fixunssfsi>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	f8 01       	movw	r30, r16
    12ac:	91 83       	std	Z+1, r25	; 0x01
    12ae:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    12b0:	ef e6       	ldi	r30, 0x6F	; 111
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	82 e0       	ldi	r24, 0x02	; 2
    12b6:	80 83       	st	Z, r24

	SREG |= 0x80;
    12b8:	af e5       	ldi	r26, 0x5F	; 95
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	ef e5       	ldi	r30, 0x5F	; 95
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	80 68       	ori	r24, 0x80	; 128
    12c4:	8c 93       	st	X, r24
}
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	1f 91       	pop	r17
    12d0:	0f 91       	pop	r16
    12d2:	08 95       	ret

000012d4 <__vector_12>:


ISR(TIMER1_COMPA_vect)
{
    12d4:	1f 92       	push	r1
    12d6:	0f 92       	push	r0
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	0f 92       	push	r0
    12dc:	00 90 5b 00 	lds	r0, 0x005B
    12e0:	0f 92       	push	r0
    12e2:	11 24       	eor	r1, r1
    12e4:	2f 93       	push	r18
    12e6:	3f 93       	push	r19
    12e8:	4f 93       	push	r20
    12ea:	5f 93       	push	r21
    12ec:	6f 93       	push	r22
    12ee:	7f 93       	push	r23
    12f0:	8f 93       	push	r24
    12f2:	9f 93       	push	r25
    12f4:	af 93       	push	r26
    12f6:	bf 93       	push	r27
    12f8:	ef 93       	push	r30
    12fa:	ff 93       	push	r31
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    1304:	80 91 47 01 	lds	r24, 0x0147
    1308:	90 91 48 01 	lds	r25, 0x0148
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	29 f0       	breq	.+10     	; 0x131a <__vector_12+0x46>
        timer_callback();
    1310:	e0 91 47 01 	lds	r30, 0x0147
    1314:	f0 91 48 01 	lds	r31, 0x0148
    1318:	09 95       	icall
	sys_time++;
    131a:	80 91 49 01 	lds	r24, 0x0149
    131e:	90 91 4a 01 	lds	r25, 0x014A
    1322:	a0 91 4b 01 	lds	r26, 0x014B
    1326:	b0 91 4c 01 	lds	r27, 0x014C
    132a:	01 96       	adiw	r24, 0x01	; 1
    132c:	a1 1d       	adc	r26, r1
    132e:	b1 1d       	adc	r27, r1
    1330:	80 93 49 01 	sts	0x0149, r24
    1334:	90 93 4a 01 	sts	0x014A, r25
    1338:	a0 93 4b 01 	sts	0x014B, r26
    133c:	b0 93 4c 01 	sts	0x014C, r27
}
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	ff 91       	pop	r31
    1346:	ef 91       	pop	r30
    1348:	bf 91       	pop	r27
    134a:	af 91       	pop	r26
    134c:	9f 91       	pop	r25
    134e:	8f 91       	pop	r24
    1350:	7f 91       	pop	r23
    1352:	6f 91       	pop	r22
    1354:	5f 91       	pop	r21
    1356:	4f 91       	pop	r20
    1358:	3f 91       	pop	r19
    135a:	2f 91       	pop	r18
    135c:	0f 90       	pop	r0
    135e:	00 92 5b 00 	sts	0x005B, r0
    1362:	0f 90       	pop	r0
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	0f 90       	pop	r0
    1368:	1f 90       	pop	r1
    136a:	18 95       	reti

0000136c <system_init>:

void system_init(void)
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	6c 97       	sbiw	r28, 0x1c	; 28
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	aa e7       	ldi	r26, 0x7A	; 122
    1386:	b4 e4       	ldi	r27, 0x44	; 68
    1388:	89 8f       	std	Y+25, r24	; 0x19
    138a:	9a 8f       	std	Y+26, r25	; 0x1a
    138c:	ab 8f       	std	Y+27, r26	; 0x1b
    138e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1390:	69 8d       	ldd	r22, Y+25	; 0x19
    1392:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1394:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1396:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e4       	ldi	r19, 0x40	; 64
    139c:	4c e1       	ldi	r20, 0x1C	; 28
    139e:	55 e4       	ldi	r21, 0x45	; 69
    13a0:	ba d3       	rcall	.+1908   	; 0x1b16 <__mulsf3>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	8d 8b       	std	Y+21, r24	; 0x15
    13a8:	9e 8b       	std	Y+22, r25	; 0x16
    13aa:	af 8b       	std	Y+23, r26	; 0x17
    13ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13ae:	6d 89       	ldd	r22, Y+21	; 0x15
    13b0:	7e 89       	ldd	r23, Y+22	; 0x16
    13b2:	8f 89       	ldd	r24, Y+23	; 0x17
    13b4:	98 8d       	ldd	r25, Y+24	; 0x18
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	40 e8       	ldi	r20, 0x80	; 128
    13bc:	5f e3       	ldi	r21, 0x3F	; 63
    13be:	5d d2       	rcall	.+1210   	; 0x187a <__cmpsf2>
    13c0:	88 23       	and	r24, r24
    13c2:	2c f4       	brge	.+10     	; 0x13ce <system_init+0x62>
		__ticks = 1;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	9c 8b       	std	Y+20, r25	; 0x14
    13ca:	8b 8b       	std	Y+19, r24	; 0x13
    13cc:	3b c0       	rjmp	.+118    	; 0x1444 <system_init+0xd8>
	else if (__tmp > 65535)
    13ce:	6d 89       	ldd	r22, Y+21	; 0x15
    13d0:	7e 89       	ldd	r23, Y+22	; 0x16
    13d2:	8f 89       	ldd	r24, Y+23	; 0x17
    13d4:	98 8d       	ldd	r25, Y+24	; 0x18
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	3f ef       	ldi	r19, 0xFF	; 255
    13da:	4f e7       	ldi	r20, 0x7F	; 127
    13dc:	57 e4       	ldi	r21, 0x47	; 71
    13de:	97 d3       	rcall	.+1838   	; 0x1b0e <__gesf2>
    13e0:	18 16       	cp	r1, r24
    13e2:	3c f5       	brge	.+78     	; 0x1432 <system_init+0xc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e4:	69 8d       	ldd	r22, Y+25	; 0x19
    13e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	40 e2       	ldi	r20, 0x20	; 32
    13f2:	51 e4       	ldi	r21, 0x41	; 65
    13f4:	90 d3       	rcall	.+1824   	; 0x1b16 <__mulsf3>
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	bc 01       	movw	r22, r24
    13fc:	cd 01       	movw	r24, r26
    13fe:	a9 d2       	rcall	.+1362   	; 0x1952 <__fixunssfsi>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	9c 8b       	std	Y+20, r25	; 0x14
    1406:	8b 8b       	std	Y+19, r24	; 0x13
    1408:	0f c0       	rjmp	.+30     	; 0x1428 <system_init+0xbc>
    140a:	8a ef       	ldi	r24, 0xFA	; 250
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	9a 8b       	std	Y+18, r25	; 0x12
    1410:	89 8b       	std	Y+17, r24	; 0x11
    1412:	89 89       	ldd	r24, Y+17	; 0x11
    1414:	9a 89       	ldd	r25, Y+18	; 0x12
    1416:	01 97       	sbiw	r24, 0x01	; 1
    1418:	f1 f7       	brne	.-4      	; 0x1416 <system_init+0xaa>
    141a:	9a 8b       	std	Y+18, r25	; 0x12
    141c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    141e:	8b 89       	ldd	r24, Y+19	; 0x13
    1420:	9c 89       	ldd	r25, Y+20	; 0x14
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	9c 8b       	std	Y+20, r25	; 0x14
    1426:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1428:	8b 89       	ldd	r24, Y+19	; 0x13
    142a:	9c 89       	ldd	r25, Y+20	; 0x14
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	69 f7       	brne	.-38     	; 0x140a <system_init+0x9e>
    1430:	13 c0       	rjmp	.+38     	; 0x1458 <system_init+0xec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1432:	6d 89       	ldd	r22, Y+21	; 0x15
    1434:	7e 89       	ldd	r23, Y+22	; 0x16
    1436:	8f 89       	ldd	r24, Y+23	; 0x17
    1438:	98 8d       	ldd	r25, Y+24	; 0x18
    143a:	8b d2       	rcall	.+1302   	; 0x1952 <__fixunssfsi>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	9c 8b       	std	Y+20, r25	; 0x14
    1442:	8b 8b       	std	Y+19, r24	; 0x13
    1444:	8b 89       	ldd	r24, Y+19	; 0x13
    1446:	9c 89       	ldd	r25, Y+20	; 0x14
    1448:	98 8b       	std	Y+16, r25	; 0x10
    144a:	8f 87       	std	Y+15, r24	; 0x0f
    144c:	8f 85       	ldd	r24, Y+15	; 0x0f
    144e:	98 89       	ldd	r25, Y+16	; 0x10
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	f1 f7       	brne	.-4      	; 0x1450 <system_init+0xe4>
    1454:	98 8b       	std	Y+16, r25	; 0x10
    1456:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	DDRG = 0xff;
    1458:	e3 e3       	ldi	r30, 0x33	; 51
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	8f ef       	ldi	r24, 0xFF	; 255
    145e:	80 83       	st	Z, r24
	PORTG = 0xFF;
    1460:	e4 e3       	ldi	r30, 0x34	; 52
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	8f ef       	ldi	r24, 0xFF	; 255
    1466:	80 83       	st	Z, r24
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	aa e7       	ldi	r26, 0x7A	; 122
    146e:	b4 e4       	ldi	r27, 0x44	; 68
    1470:	8b 87       	std	Y+11, r24	; 0x0b
    1472:	9c 87       	std	Y+12, r25	; 0x0c
    1474:	ad 87       	std	Y+13, r26	; 0x0d
    1476:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1478:	6b 85       	ldd	r22, Y+11	; 0x0b
    147a:	7c 85       	ldd	r23, Y+12	; 0x0c
    147c:	8d 85       	ldd	r24, Y+13	; 0x0d
    147e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e4       	ldi	r19, 0x40	; 64
    1484:	4c e1       	ldi	r20, 0x1C	; 28
    1486:	55 e4       	ldi	r21, 0x45	; 69
    1488:	46 d3       	rcall	.+1676   	; 0x1b16 <__mulsf3>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	8f 83       	std	Y+7, r24	; 0x07
    1490:	98 87       	std	Y+8, r25	; 0x08
    1492:	a9 87       	std	Y+9, r26	; 0x09
    1494:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1496:	6f 81       	ldd	r22, Y+7	; 0x07
    1498:	78 85       	ldd	r23, Y+8	; 0x08
    149a:	89 85       	ldd	r24, Y+9	; 0x09
    149c:	9a 85       	ldd	r25, Y+10	; 0x0a
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	40 e8       	ldi	r20, 0x80	; 128
    14a4:	5f e3       	ldi	r21, 0x3F	; 63
    14a6:	e9 d1       	rcall	.+978    	; 0x187a <__cmpsf2>
    14a8:	88 23       	and	r24, r24
    14aa:	2c f4       	brge	.+10     	; 0x14b6 <system_init+0x14a>
		__ticks = 1;
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	9e 83       	std	Y+6, r25	; 0x06
    14b2:	8d 83       	std	Y+5, r24	; 0x05
    14b4:	3b c0       	rjmp	.+118    	; 0x152c <system_init+0x1c0>
	else if (__tmp > 65535)
    14b6:	6f 81       	ldd	r22, Y+7	; 0x07
    14b8:	78 85       	ldd	r23, Y+8	; 0x08
    14ba:	89 85       	ldd	r24, Y+9	; 0x09
    14bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	3f ef       	ldi	r19, 0xFF	; 255
    14c2:	4f e7       	ldi	r20, 0x7F	; 127
    14c4:	57 e4       	ldi	r21, 0x47	; 71
    14c6:	23 d3       	rcall	.+1606   	; 0x1b0e <__gesf2>
    14c8:	18 16       	cp	r1, r24
    14ca:	3c f5       	brge	.+78     	; 0x151a <system_init+0x1ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    14d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e2       	ldi	r20, 0x20	; 32
    14da:	51 e4       	ldi	r21, 0x41	; 65
    14dc:	1c d3       	rcall	.+1592   	; 0x1b16 <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	bc 01       	movw	r22, r24
    14e4:	cd 01       	movw	r24, r26
    14e6:	35 d2       	rcall	.+1130   	; 0x1952 <__fixunssfsi>
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	9e 83       	std	Y+6, r25	; 0x06
    14ee:	8d 83       	std	Y+5, r24	; 0x05
    14f0:	0f c0       	rjmp	.+30     	; 0x1510 <system_init+0x1a4>
    14f2:	8a ef       	ldi	r24, 0xFA	; 250
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	9c 83       	std	Y+4, r25	; 0x04
    14f8:	8b 83       	std	Y+3, r24	; 0x03
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	9c 81       	ldd	r25, Y+4	; 0x04
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	f1 f7       	brne	.-4      	; 0x14fe <system_init+0x192>
    1502:	9c 83       	std	Y+4, r25	; 0x04
    1504:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1506:	8d 81       	ldd	r24, Y+5	; 0x05
    1508:	9e 81       	ldd	r25, Y+6	; 0x06
    150a:	01 97       	sbiw	r24, 0x01	; 1
    150c:	9e 83       	std	Y+6, r25	; 0x06
    150e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1510:	8d 81       	ldd	r24, Y+5	; 0x05
    1512:	9e 81       	ldd	r25, Y+6	; 0x06
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	69 f7       	brne	.-38     	; 0x14f2 <system_init+0x186>
    1518:	13 c0       	rjmp	.+38     	; 0x1540 <system_init+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151a:	6f 81       	ldd	r22, Y+7	; 0x07
    151c:	78 85       	ldd	r23, Y+8	; 0x08
    151e:	89 85       	ldd	r24, Y+9	; 0x09
    1520:	9a 85       	ldd	r25, Y+10	; 0x0a
    1522:	17 d2       	rcall	.+1070   	; 0x1952 <__fixunssfsi>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	9e 83       	std	Y+6, r25	; 0x06
    152a:	8d 83       	std	Y+5, r24	; 0x05
    152c:	8d 81       	ldd	r24, Y+5	; 0x05
    152e:	9e 81       	ldd	r25, Y+6	; 0x06
    1530:	9a 83       	std	Y+2, r25	; 0x02
    1532:	89 83       	std	Y+1, r24	; 0x01
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	9a 81       	ldd	r25, Y+2	; 0x02
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	f1 f7       	brne	.-4      	; 0x1538 <system_init+0x1cc>
    153c:	9a 83       	std	Y+2, r25	; 0x02
    153e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	PORTG = 0x00;
    1540:	e4 e3       	ldi	r30, 0x34	; 52
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	10 82       	st	Z, r1
	servo_init(50);
    1546:	82 e3       	ldi	r24, 0x32	; 50
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	0e 94 83 01 	call	0x306	; 0x306 <servo_init>
	timer_init(1000);
    154e:	88 ee       	ldi	r24, 0xE8	; 232
    1550:	93 e0       	ldi	r25, 0x03	; 3
    1552:	7a de       	rcall	.-780    	; 0x1248 <timer_init>
	CAN_Init(1);
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	f0 d8       	rcall	.-3616   	; 0x738 <CAN_Init>
}
    1558:	6c 96       	adiw	r28, 0x1c	; 28
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <system_get_system_time>:
uint32_t system_get_system_time(void)
{
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    1572:	80 91 49 01 	lds	r24, 0x0149
    1576:	90 91 4a 01 	lds	r25, 0x014A
    157a:	a0 91 4b 01 	lds	r26, 0x014B
    157e:	b0 91 4c 01 	lds	r27, 0x014C
}
    1582:	bc 01       	movw	r22, r24
    1584:	cd 01       	movw	r24, r26
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    158c:	1f 92       	push	r1
    158e:	0f 92       	push	r0
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	0f 92       	push	r0
    1594:	00 90 5b 00 	lds	r0, 0x005B
    1598:	0f 92       	push	r0
    159a:	11 24       	eor	r1, r1
    159c:	8f 93       	push	r24
    159e:	9f 93       	push	r25
    15a0:	af 93       	push	r26
    15a2:	bf 93       	push	r27
    15a4:	ef 93       	push	r30
    15a6:	ff 93       	push	r31
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    15b0:	80 91 4d 01 	lds	r24, 0x014D
    15b4:	88 23       	and	r24, r24
    15b6:	d9 f0       	breq	.+54     	; 0x15ee <__vector_23+0x62>
	{
		tx0_counter--;
    15b8:	80 91 4d 01 	lds	r24, 0x014D
    15bc:	81 50       	subi	r24, 0x01	; 1
    15be:	80 93 4d 01 	sts	0x014D, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    15c2:	a6 ec       	ldi	r26, 0xC6	; 198
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	80 91 4e 01 	lds	r24, 0x014E
    15ca:	88 2f       	mov	r24, r24
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	fc 01       	movw	r30, r24
    15d0:	eb 5a       	subi	r30, 0xAB	; 171
    15d2:	fe 4f       	sbci	r31, 0xFE	; 254
    15d4:	80 81       	ld	r24, Z
    15d6:	8c 93       	st	X, r24
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    15d8:	80 91 4e 01 	lds	r24, 0x014E
    15dc:	8f 5f       	subi	r24, 0xFF	; 255
    15de:	80 93 4e 01 	sts	0x014E, r24
    15e2:	80 91 4e 01 	lds	r24, 0x014E
    15e6:	80 34       	cpi	r24, 0x40	; 64
    15e8:	11 f4       	brne	.+4      	; 0x15ee <__vector_23+0x62>
			tx0_rd_index = 0;
    15ea:	10 92 4e 01 	sts	0x014E, r1
	}
}
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	ff 91       	pop	r31
    15f4:	ef 91       	pop	r30
    15f6:	bf 91       	pop	r27
    15f8:	af 91       	pop	r26
    15fa:	9f 91       	pop	r25
    15fc:	8f 91       	pop	r24
    15fe:	0f 90       	pop	r0
    1600:	00 92 5b 00 	sts	0x005B, r0
    1604:	0f 90       	pop	r0
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	0f 90       	pop	r0
    160a:	1f 90       	pop	r1
    160c:	18 95       	reti

0000160e <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    160e:	1f 92       	push	r1
    1610:	0f 92       	push	r0
    1612:	0f b6       	in	r0, 0x3f	; 63
    1614:	0f 92       	push	r0
    1616:	00 90 5b 00 	lds	r0, 0x005B
    161a:	0f 92       	push	r0
    161c:	11 24       	eor	r1, r1
    161e:	2f 93       	push	r18
    1620:	8f 93       	push	r24
    1622:	9f 93       	push	r25
    1624:	ef 93       	push	r30
    1626:	ff 93       	push	r31
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	0f 92       	push	r0
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    1632:	e0 ec       	ldi	r30, 0xC0	; 192
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	88 2f       	mov	r24, r24
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	8c 71       	andi	r24, 0x1C	; 28
    1642:	90 70       	andi	r25, 0x00	; 0
    1644:	00 97       	sbiw	r24, 0x00	; 0
    1646:	d9 f4       	brne	.+54     	; 0x167e <__vector_21+0x70>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    1648:	80 91 4f 01 	lds	r24, 0x014F
    164c:	88 2f       	mov	r24, r24
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	e6 ec       	ldi	r30, 0xC6	; 198
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	20 81       	ld	r18, Z
    1656:	fc 01       	movw	r30, r24
    1658:	eb 56       	subi	r30, 0x6B	; 107
    165a:	fe 4f       	sbci	r31, 0xFE	; 254
    165c:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    165e:	80 91 4f 01 	lds	r24, 0x014F
    1662:	8f 5f       	subi	r24, 0xFF	; 255
    1664:	80 93 4f 01 	sts	0x014F, r24
    1668:	80 91 4f 01 	lds	r24, 0x014F
    166c:	80 34       	cpi	r24, 0x40	; 64
    166e:	11 f4       	brne	.+4      	; 0x1674 <__vector_21+0x66>
			rx0_wr_index = 0;
    1670:	10 92 4f 01 	sts	0x014F, r1

		rx0_counter++;
    1674:	80 91 50 01 	lds	r24, 0x0150
    1678:	8f 5f       	subi	r24, 0xFF	; 255
    167a:	80 93 50 01 	sts	0x0150, r24
	}
}
    167e:	0f 90       	pop	r0
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	ff 91       	pop	r31
    1686:	ef 91       	pop	r30
    1688:	9f 91       	pop	r25
    168a:	8f 91       	pop	r24
    168c:	2f 91       	pop	r18
    168e:	0f 90       	pop	r0
    1690:	00 92 5b 00 	sts	0x005B, r0
    1694:	0f 90       	pop	r0
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	0f 90       	pop	r0
    169a:	1f 90       	pop	r1
    169c:	18 95       	reti

0000169e <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    169e:	1f 92       	push	r1
    16a0:	0f 92       	push	r0
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	0f 92       	push	r0
    16a6:	00 90 5b 00 	lds	r0, 0x005B
    16aa:	0f 92       	push	r0
    16ac:	11 24       	eor	r1, r1
    16ae:	8f 93       	push	r24
    16b0:	9f 93       	push	r25
    16b2:	af 93       	push	r26
    16b4:	bf 93       	push	r27
    16b6:	ef 93       	push	r30
    16b8:	ff 93       	push	r31
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    16c2:	80 91 51 01 	lds	r24, 0x0151
    16c6:	88 23       	and	r24, r24
    16c8:	d9 f0       	breq	.+54     	; 0x1700 <__vector_34+0x62>
	{
		tx1_counter--;
    16ca:	80 91 51 01 	lds	r24, 0x0151
    16ce:	81 50       	subi	r24, 0x01	; 1
    16d0:	80 93 51 01 	sts	0x0151, r24
		UDR1=tx1_buffer[tx1_rd_index];
    16d4:	ae ec       	ldi	r26, 0xCE	; 206
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	80 91 52 01 	lds	r24, 0x0152
    16dc:	88 2f       	mov	r24, r24
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	fc 01       	movw	r30, r24
    16e2:	eb 52       	subi	r30, 0x2B	; 43
    16e4:	fe 4f       	sbci	r31, 0xFE	; 254
    16e6:	80 81       	ld	r24, Z
    16e8:	8c 93       	st	X, r24
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    16ea:	80 91 52 01 	lds	r24, 0x0152
    16ee:	8f 5f       	subi	r24, 0xFF	; 255
    16f0:	80 93 52 01 	sts	0x0152, r24
    16f4:	80 91 52 01 	lds	r24, 0x0152
    16f8:	80 34       	cpi	r24, 0x40	; 64
    16fa:	11 f4       	brne	.+4      	; 0x1700 <__vector_34+0x62>
			tx1_rd_index = 0;
    16fc:	10 92 52 01 	sts	0x0152, r1
	}
}
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	ff 91       	pop	r31
    1706:	ef 91       	pop	r30
    1708:	bf 91       	pop	r27
    170a:	af 91       	pop	r26
    170c:	9f 91       	pop	r25
    170e:	8f 91       	pop	r24
    1710:	0f 90       	pop	r0
    1712:	00 92 5b 00 	sts	0x005B, r0
    1716:	0f 90       	pop	r0
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	0f 90       	pop	r0
    171c:	1f 90       	pop	r1
    171e:	18 95       	reti

00001720 <__vector_32>:

ISR(USART1_RX_vect)
{
    1720:	1f 92       	push	r1
    1722:	0f 92       	push	r0
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	0f 92       	push	r0
    1728:	00 90 5b 00 	lds	r0, 0x005B
    172c:	0f 92       	push	r0
    172e:	11 24       	eor	r1, r1
    1730:	2f 93       	push	r18
    1732:	8f 93       	push	r24
    1734:	9f 93       	push	r25
    1736:	ef 93       	push	r30
    1738:	ff 93       	push	r31
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	0f 92       	push	r0
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    1744:	e8 ec       	ldi	r30, 0xC8	; 200
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	88 2f       	mov	r24, r24
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	8c 71       	andi	r24, 0x1C	; 28
    1754:	90 70       	andi	r25, 0x00	; 0
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	d9 f4       	brne	.+54     	; 0x1790 <__vector_32+0x70>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    175a:	80 91 53 01 	lds	r24, 0x0153
    175e:	88 2f       	mov	r24, r24
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	ee ec       	ldi	r30, 0xCE	; 206
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	20 81       	ld	r18, Z
    1768:	fc 01       	movw	r30, r24
    176a:	eb 5e       	subi	r30, 0xEB	; 235
    176c:	fd 4f       	sbci	r31, 0xFD	; 253
    176e:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    1770:	80 91 53 01 	lds	r24, 0x0153
    1774:	8f 5f       	subi	r24, 0xFF	; 255
    1776:	80 93 53 01 	sts	0x0153, r24
    177a:	80 91 53 01 	lds	r24, 0x0153
    177e:	80 34       	cpi	r24, 0x40	; 64
    1780:	11 f4       	brne	.+4      	; 0x1786 <__vector_32+0x66>
		rx1_wr_index = 0;
    1782:	10 92 53 01 	sts	0x0153, r1

		rx1_counter++;
    1786:	80 91 54 01 	lds	r24, 0x0154
    178a:	8f 5f       	subi	r24, 0xFF	; 255
    178c:	80 93 54 01 	sts	0x0154, r24
	}
}
    1790:	0f 90       	pop	r0
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	ff 91       	pop	r31
    1798:	ef 91       	pop	r30
    179a:	9f 91       	pop	r25
    179c:	8f 91       	pop	r24
    179e:	2f 91       	pop	r18
    17a0:	0f 90       	pop	r0
    17a2:	00 92 5b 00 	sts	0x005B, r0
    17a6:	0f 90       	pop	r0
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	0f 90       	pop	r0
    17ac:	1f 90       	pop	r1
    17ae:	18 95       	reti

000017b0 <__subsf3>:
    17b0:	50 58       	subi	r21, 0x80	; 128

000017b2 <__addsf3>:
    17b2:	bb 27       	eor	r27, r27
    17b4:	aa 27       	eor	r26, r26
    17b6:	0e d0       	rcall	.+28     	; 0x17d4 <__addsf3x>
    17b8:	70 c1       	rjmp	.+736    	; 0x1a9a <__fp_round>
    17ba:	61 d1       	rcall	.+706    	; 0x1a7e <__fp_pscA>
    17bc:	30 f0       	brcs	.+12     	; 0x17ca <__addsf3+0x18>
    17be:	66 d1       	rcall	.+716    	; 0x1a8c <__fp_pscB>
    17c0:	20 f0       	brcs	.+8      	; 0x17ca <__addsf3+0x18>
    17c2:	31 f4       	brne	.+12     	; 0x17d0 <__addsf3+0x1e>
    17c4:	9f 3f       	cpi	r25, 0xFF	; 255
    17c6:	11 f4       	brne	.+4      	; 0x17cc <__addsf3+0x1a>
    17c8:	1e f4       	brtc	.+6      	; 0x17d0 <__addsf3+0x1e>
    17ca:	56 c1       	rjmp	.+684    	; 0x1a78 <__fp_nan>
    17cc:	0e f4       	brtc	.+2      	; 0x17d0 <__addsf3+0x1e>
    17ce:	e0 95       	com	r30
    17d0:	e7 fb       	bst	r30, 7
    17d2:	4c c1       	rjmp	.+664    	; 0x1a6c <__fp_inf>

000017d4 <__addsf3x>:
    17d4:	e9 2f       	mov	r30, r25
    17d6:	72 d1       	rcall	.+740    	; 0x1abc <__fp_split3>
    17d8:	80 f3       	brcs	.-32     	; 0x17ba <__addsf3+0x8>
    17da:	ba 17       	cp	r27, r26
    17dc:	62 07       	cpc	r22, r18
    17de:	73 07       	cpc	r23, r19
    17e0:	84 07       	cpc	r24, r20
    17e2:	95 07       	cpc	r25, r21
    17e4:	18 f0       	brcs	.+6      	; 0x17ec <__addsf3x+0x18>
    17e6:	71 f4       	brne	.+28     	; 0x1804 <__addsf3x+0x30>
    17e8:	9e f5       	brtc	.+102    	; 0x1850 <__addsf3x+0x7c>
    17ea:	8a c1       	rjmp	.+788    	; 0x1b00 <__fp_zero>
    17ec:	0e f4       	brtc	.+2      	; 0x17f0 <__addsf3x+0x1c>
    17ee:	e0 95       	com	r30
    17f0:	0b 2e       	mov	r0, r27
    17f2:	ba 2f       	mov	r27, r26
    17f4:	a0 2d       	mov	r26, r0
    17f6:	0b 01       	movw	r0, r22
    17f8:	b9 01       	movw	r22, r18
    17fa:	90 01       	movw	r18, r0
    17fc:	0c 01       	movw	r0, r24
    17fe:	ca 01       	movw	r24, r20
    1800:	a0 01       	movw	r20, r0
    1802:	11 24       	eor	r1, r1
    1804:	ff 27       	eor	r31, r31
    1806:	59 1b       	sub	r21, r25
    1808:	99 f0       	breq	.+38     	; 0x1830 <__addsf3x+0x5c>
    180a:	59 3f       	cpi	r21, 0xF9	; 249
    180c:	50 f4       	brcc	.+20     	; 0x1822 <__addsf3x+0x4e>
    180e:	50 3e       	cpi	r21, 0xE0	; 224
    1810:	68 f1       	brcs	.+90     	; 0x186c <__addsf3x+0x98>
    1812:	1a 16       	cp	r1, r26
    1814:	f0 40       	sbci	r31, 0x00	; 0
    1816:	a2 2f       	mov	r26, r18
    1818:	23 2f       	mov	r18, r19
    181a:	34 2f       	mov	r19, r20
    181c:	44 27       	eor	r20, r20
    181e:	58 5f       	subi	r21, 0xF8	; 248
    1820:	f3 cf       	rjmp	.-26     	; 0x1808 <__addsf3x+0x34>
    1822:	46 95       	lsr	r20
    1824:	37 95       	ror	r19
    1826:	27 95       	ror	r18
    1828:	a7 95       	ror	r26
    182a:	f0 40       	sbci	r31, 0x00	; 0
    182c:	53 95       	inc	r21
    182e:	c9 f7       	brne	.-14     	; 0x1822 <__addsf3x+0x4e>
    1830:	7e f4       	brtc	.+30     	; 0x1850 <__addsf3x+0x7c>
    1832:	1f 16       	cp	r1, r31
    1834:	ba 0b       	sbc	r27, r26
    1836:	62 0b       	sbc	r22, r18
    1838:	73 0b       	sbc	r23, r19
    183a:	84 0b       	sbc	r24, r20
    183c:	ba f0       	brmi	.+46     	; 0x186c <__addsf3x+0x98>
    183e:	91 50       	subi	r25, 0x01	; 1
    1840:	a1 f0       	breq	.+40     	; 0x186a <__addsf3x+0x96>
    1842:	ff 0f       	add	r31, r31
    1844:	bb 1f       	adc	r27, r27
    1846:	66 1f       	adc	r22, r22
    1848:	77 1f       	adc	r23, r23
    184a:	88 1f       	adc	r24, r24
    184c:	c2 f7       	brpl	.-16     	; 0x183e <__addsf3x+0x6a>
    184e:	0e c0       	rjmp	.+28     	; 0x186c <__addsf3x+0x98>
    1850:	ba 0f       	add	r27, r26
    1852:	62 1f       	adc	r22, r18
    1854:	73 1f       	adc	r23, r19
    1856:	84 1f       	adc	r24, r20
    1858:	48 f4       	brcc	.+18     	; 0x186c <__addsf3x+0x98>
    185a:	87 95       	ror	r24
    185c:	77 95       	ror	r23
    185e:	67 95       	ror	r22
    1860:	b7 95       	ror	r27
    1862:	f7 95       	ror	r31
    1864:	9e 3f       	cpi	r25, 0xFE	; 254
    1866:	08 f0       	brcs	.+2      	; 0x186a <__addsf3x+0x96>
    1868:	b3 cf       	rjmp	.-154    	; 0x17d0 <__addsf3+0x1e>
    186a:	93 95       	inc	r25
    186c:	88 0f       	add	r24, r24
    186e:	08 f0       	brcs	.+2      	; 0x1872 <__addsf3x+0x9e>
    1870:	99 27       	eor	r25, r25
    1872:	ee 0f       	add	r30, r30
    1874:	97 95       	ror	r25
    1876:	87 95       	ror	r24
    1878:	08 95       	ret

0000187a <__cmpsf2>:
    187a:	d4 d0       	rcall	.+424    	; 0x1a24 <__fp_cmp>
    187c:	08 f4       	brcc	.+2      	; 0x1880 <__cmpsf2+0x6>
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	08 95       	ret

00001882 <__divsf3>:
    1882:	0c d0       	rcall	.+24     	; 0x189c <__divsf3x>
    1884:	0a c1       	rjmp	.+532    	; 0x1a9a <__fp_round>
    1886:	02 d1       	rcall	.+516    	; 0x1a8c <__fp_pscB>
    1888:	40 f0       	brcs	.+16     	; 0x189a <__divsf3+0x18>
    188a:	f9 d0       	rcall	.+498    	; 0x1a7e <__fp_pscA>
    188c:	30 f0       	brcs	.+12     	; 0x189a <__divsf3+0x18>
    188e:	21 f4       	brne	.+8      	; 0x1898 <__divsf3+0x16>
    1890:	5f 3f       	cpi	r21, 0xFF	; 255
    1892:	19 f0       	breq	.+6      	; 0x189a <__divsf3+0x18>
    1894:	eb c0       	rjmp	.+470    	; 0x1a6c <__fp_inf>
    1896:	51 11       	cpse	r21, r1
    1898:	34 c1       	rjmp	.+616    	; 0x1b02 <__fp_szero>
    189a:	ee c0       	rjmp	.+476    	; 0x1a78 <__fp_nan>

0000189c <__divsf3x>:
    189c:	0f d1       	rcall	.+542    	; 0x1abc <__fp_split3>
    189e:	98 f3       	brcs	.-26     	; 0x1886 <__divsf3+0x4>

000018a0 <__divsf3_pse>:
    18a0:	99 23       	and	r25, r25
    18a2:	c9 f3       	breq	.-14     	; 0x1896 <__divsf3+0x14>
    18a4:	55 23       	and	r21, r21
    18a6:	b1 f3       	breq	.-20     	; 0x1894 <__divsf3+0x12>
    18a8:	95 1b       	sub	r25, r21
    18aa:	55 0b       	sbc	r21, r21
    18ac:	bb 27       	eor	r27, r27
    18ae:	aa 27       	eor	r26, r26
    18b0:	62 17       	cp	r22, r18
    18b2:	73 07       	cpc	r23, r19
    18b4:	84 07       	cpc	r24, r20
    18b6:	38 f0       	brcs	.+14     	; 0x18c6 <__divsf3_pse+0x26>
    18b8:	9f 5f       	subi	r25, 0xFF	; 255
    18ba:	5f 4f       	sbci	r21, 0xFF	; 255
    18bc:	22 0f       	add	r18, r18
    18be:	33 1f       	adc	r19, r19
    18c0:	44 1f       	adc	r20, r20
    18c2:	aa 1f       	adc	r26, r26
    18c4:	a9 f3       	breq	.-22     	; 0x18b0 <__divsf3_pse+0x10>
    18c6:	33 d0       	rcall	.+102    	; 0x192e <__divsf3_pse+0x8e>
    18c8:	0e 2e       	mov	r0, r30
    18ca:	3a f0       	brmi	.+14     	; 0x18da <__divsf3_pse+0x3a>
    18cc:	e0 e8       	ldi	r30, 0x80	; 128
    18ce:	30 d0       	rcall	.+96     	; 0x1930 <__divsf3_pse+0x90>
    18d0:	91 50       	subi	r25, 0x01	; 1
    18d2:	50 40       	sbci	r21, 0x00	; 0
    18d4:	e6 95       	lsr	r30
    18d6:	00 1c       	adc	r0, r0
    18d8:	ca f7       	brpl	.-14     	; 0x18cc <__divsf3_pse+0x2c>
    18da:	29 d0       	rcall	.+82     	; 0x192e <__divsf3_pse+0x8e>
    18dc:	fe 2f       	mov	r31, r30
    18de:	27 d0       	rcall	.+78     	; 0x192e <__divsf3_pse+0x8e>
    18e0:	66 0f       	add	r22, r22
    18e2:	77 1f       	adc	r23, r23
    18e4:	88 1f       	adc	r24, r24
    18e6:	bb 1f       	adc	r27, r27
    18e8:	26 17       	cp	r18, r22
    18ea:	37 07       	cpc	r19, r23
    18ec:	48 07       	cpc	r20, r24
    18ee:	ab 07       	cpc	r26, r27
    18f0:	b0 e8       	ldi	r27, 0x80	; 128
    18f2:	09 f0       	breq	.+2      	; 0x18f6 <__divsf3_pse+0x56>
    18f4:	bb 0b       	sbc	r27, r27
    18f6:	80 2d       	mov	r24, r0
    18f8:	bf 01       	movw	r22, r30
    18fa:	ff 27       	eor	r31, r31
    18fc:	93 58       	subi	r25, 0x83	; 131
    18fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1900:	2a f0       	brmi	.+10     	; 0x190c <__divsf3_pse+0x6c>
    1902:	9e 3f       	cpi	r25, 0xFE	; 254
    1904:	51 05       	cpc	r21, r1
    1906:	68 f0       	brcs	.+26     	; 0x1922 <__divsf3_pse+0x82>
    1908:	b1 c0       	rjmp	.+354    	; 0x1a6c <__fp_inf>
    190a:	fb c0       	rjmp	.+502    	; 0x1b02 <__fp_szero>
    190c:	5f 3f       	cpi	r21, 0xFF	; 255
    190e:	ec f3       	brlt	.-6      	; 0x190a <__divsf3_pse+0x6a>
    1910:	98 3e       	cpi	r25, 0xE8	; 232
    1912:	dc f3       	brlt	.-10     	; 0x190a <__divsf3_pse+0x6a>
    1914:	86 95       	lsr	r24
    1916:	77 95       	ror	r23
    1918:	67 95       	ror	r22
    191a:	b7 95       	ror	r27
    191c:	f7 95       	ror	r31
    191e:	9f 5f       	subi	r25, 0xFF	; 255
    1920:	c9 f7       	brne	.-14     	; 0x1914 <__divsf3_pse+0x74>
    1922:	88 0f       	add	r24, r24
    1924:	91 1d       	adc	r25, r1
    1926:	96 95       	lsr	r25
    1928:	87 95       	ror	r24
    192a:	97 f9       	bld	r25, 7
    192c:	08 95       	ret
    192e:	e1 e0       	ldi	r30, 0x01	; 1
    1930:	66 0f       	add	r22, r22
    1932:	77 1f       	adc	r23, r23
    1934:	88 1f       	adc	r24, r24
    1936:	bb 1f       	adc	r27, r27
    1938:	62 17       	cp	r22, r18
    193a:	73 07       	cpc	r23, r19
    193c:	84 07       	cpc	r24, r20
    193e:	ba 07       	cpc	r27, r26
    1940:	20 f0       	brcs	.+8      	; 0x194a <__divsf3_pse+0xaa>
    1942:	62 1b       	sub	r22, r18
    1944:	73 0b       	sbc	r23, r19
    1946:	84 0b       	sbc	r24, r20
    1948:	ba 0b       	sbc	r27, r26
    194a:	ee 1f       	adc	r30, r30
    194c:	88 f7       	brcc	.-30     	; 0x1930 <__divsf3_pse+0x90>
    194e:	e0 95       	com	r30
    1950:	08 95       	ret

00001952 <__fixunssfsi>:
    1952:	bc d0       	rcall	.+376    	; 0x1acc <__fp_splitA>
    1954:	88 f0       	brcs	.+34     	; 0x1978 <__fixunssfsi+0x26>
    1956:	9f 57       	subi	r25, 0x7F	; 127
    1958:	90 f0       	brcs	.+36     	; 0x197e <__fixunssfsi+0x2c>
    195a:	b9 2f       	mov	r27, r25
    195c:	99 27       	eor	r25, r25
    195e:	b7 51       	subi	r27, 0x17	; 23
    1960:	a0 f0       	brcs	.+40     	; 0x198a <__fixunssfsi+0x38>
    1962:	d1 f0       	breq	.+52     	; 0x1998 <__fixunssfsi+0x46>
    1964:	66 0f       	add	r22, r22
    1966:	77 1f       	adc	r23, r23
    1968:	88 1f       	adc	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	1a f0       	brmi	.+6      	; 0x1974 <__fixunssfsi+0x22>
    196e:	ba 95       	dec	r27
    1970:	c9 f7       	brne	.-14     	; 0x1964 <__fixunssfsi+0x12>
    1972:	12 c0       	rjmp	.+36     	; 0x1998 <__fixunssfsi+0x46>
    1974:	b1 30       	cpi	r27, 0x01	; 1
    1976:	81 f0       	breq	.+32     	; 0x1998 <__fixunssfsi+0x46>
    1978:	c3 d0       	rcall	.+390    	; 0x1b00 <__fp_zero>
    197a:	b1 e0       	ldi	r27, 0x01	; 1
    197c:	08 95       	ret
    197e:	c0 c0       	rjmp	.+384    	; 0x1b00 <__fp_zero>
    1980:	67 2f       	mov	r22, r23
    1982:	78 2f       	mov	r23, r24
    1984:	88 27       	eor	r24, r24
    1986:	b8 5f       	subi	r27, 0xF8	; 248
    1988:	39 f0       	breq	.+14     	; 0x1998 <__fixunssfsi+0x46>
    198a:	b9 3f       	cpi	r27, 0xF9	; 249
    198c:	cc f3       	brlt	.-14     	; 0x1980 <__fixunssfsi+0x2e>
    198e:	86 95       	lsr	r24
    1990:	77 95       	ror	r23
    1992:	67 95       	ror	r22
    1994:	b3 95       	inc	r27
    1996:	d9 f7       	brne	.-10     	; 0x198e <__fixunssfsi+0x3c>
    1998:	3e f4       	brtc	.+14     	; 0x19a8 <__fixunssfsi+0x56>
    199a:	90 95       	com	r25
    199c:	80 95       	com	r24
    199e:	70 95       	com	r23
    19a0:	61 95       	neg	r22
    19a2:	7f 4f       	sbci	r23, 0xFF	; 255
    19a4:	8f 4f       	sbci	r24, 0xFF	; 255
    19a6:	9f 4f       	sbci	r25, 0xFF	; 255
    19a8:	08 95       	ret

000019aa <__floatunsisf>:
    19aa:	e8 94       	clt
    19ac:	09 c0       	rjmp	.+18     	; 0x19c0 <__floatsisf+0x12>

000019ae <__floatsisf>:
    19ae:	97 fb       	bst	r25, 7
    19b0:	3e f4       	brtc	.+14     	; 0x19c0 <__floatsisf+0x12>
    19b2:	90 95       	com	r25
    19b4:	80 95       	com	r24
    19b6:	70 95       	com	r23
    19b8:	61 95       	neg	r22
    19ba:	7f 4f       	sbci	r23, 0xFF	; 255
    19bc:	8f 4f       	sbci	r24, 0xFF	; 255
    19be:	9f 4f       	sbci	r25, 0xFF	; 255
    19c0:	99 23       	and	r25, r25
    19c2:	a9 f0       	breq	.+42     	; 0x19ee <__floatsisf+0x40>
    19c4:	f9 2f       	mov	r31, r25
    19c6:	96 e9       	ldi	r25, 0x96	; 150
    19c8:	bb 27       	eor	r27, r27
    19ca:	93 95       	inc	r25
    19cc:	f6 95       	lsr	r31
    19ce:	87 95       	ror	r24
    19d0:	77 95       	ror	r23
    19d2:	67 95       	ror	r22
    19d4:	b7 95       	ror	r27
    19d6:	f1 11       	cpse	r31, r1
    19d8:	f8 cf       	rjmp	.-16     	; 0x19ca <__floatsisf+0x1c>
    19da:	fa f4       	brpl	.+62     	; 0x1a1a <__floatsisf+0x6c>
    19dc:	bb 0f       	add	r27, r27
    19de:	11 f4       	brne	.+4      	; 0x19e4 <__floatsisf+0x36>
    19e0:	60 ff       	sbrs	r22, 0
    19e2:	1b c0       	rjmp	.+54     	; 0x1a1a <__floatsisf+0x6c>
    19e4:	6f 5f       	subi	r22, 0xFF	; 255
    19e6:	7f 4f       	sbci	r23, 0xFF	; 255
    19e8:	8f 4f       	sbci	r24, 0xFF	; 255
    19ea:	9f 4f       	sbci	r25, 0xFF	; 255
    19ec:	16 c0       	rjmp	.+44     	; 0x1a1a <__floatsisf+0x6c>
    19ee:	88 23       	and	r24, r24
    19f0:	11 f0       	breq	.+4      	; 0x19f6 <__floatsisf+0x48>
    19f2:	96 e9       	ldi	r25, 0x96	; 150
    19f4:	11 c0       	rjmp	.+34     	; 0x1a18 <__floatsisf+0x6a>
    19f6:	77 23       	and	r23, r23
    19f8:	21 f0       	breq	.+8      	; 0x1a02 <__floatsisf+0x54>
    19fa:	9e e8       	ldi	r25, 0x8E	; 142
    19fc:	87 2f       	mov	r24, r23
    19fe:	76 2f       	mov	r23, r22
    1a00:	05 c0       	rjmp	.+10     	; 0x1a0c <__floatsisf+0x5e>
    1a02:	66 23       	and	r22, r22
    1a04:	71 f0       	breq	.+28     	; 0x1a22 <__floatsisf+0x74>
    1a06:	96 e8       	ldi	r25, 0x86	; 134
    1a08:	86 2f       	mov	r24, r22
    1a0a:	70 e0       	ldi	r23, 0x00	; 0
    1a0c:	60 e0       	ldi	r22, 0x00	; 0
    1a0e:	2a f0       	brmi	.+10     	; 0x1a1a <__floatsisf+0x6c>
    1a10:	9a 95       	dec	r25
    1a12:	66 0f       	add	r22, r22
    1a14:	77 1f       	adc	r23, r23
    1a16:	88 1f       	adc	r24, r24
    1a18:	da f7       	brpl	.-10     	; 0x1a10 <__floatsisf+0x62>
    1a1a:	88 0f       	add	r24, r24
    1a1c:	96 95       	lsr	r25
    1a1e:	87 95       	ror	r24
    1a20:	97 f9       	bld	r25, 7
    1a22:	08 95       	ret

00001a24 <__fp_cmp>:
    1a24:	99 0f       	add	r25, r25
    1a26:	00 08       	sbc	r0, r0
    1a28:	55 0f       	add	r21, r21
    1a2a:	aa 0b       	sbc	r26, r26
    1a2c:	e0 e8       	ldi	r30, 0x80	; 128
    1a2e:	fe ef       	ldi	r31, 0xFE	; 254
    1a30:	16 16       	cp	r1, r22
    1a32:	17 06       	cpc	r1, r23
    1a34:	e8 07       	cpc	r30, r24
    1a36:	f9 07       	cpc	r31, r25
    1a38:	c0 f0       	brcs	.+48     	; 0x1a6a <__fp_cmp+0x46>
    1a3a:	12 16       	cp	r1, r18
    1a3c:	13 06       	cpc	r1, r19
    1a3e:	e4 07       	cpc	r30, r20
    1a40:	f5 07       	cpc	r31, r21
    1a42:	98 f0       	brcs	.+38     	; 0x1a6a <__fp_cmp+0x46>
    1a44:	62 1b       	sub	r22, r18
    1a46:	73 0b       	sbc	r23, r19
    1a48:	84 0b       	sbc	r24, r20
    1a4a:	95 0b       	sbc	r25, r21
    1a4c:	39 f4       	brne	.+14     	; 0x1a5c <__fp_cmp+0x38>
    1a4e:	0a 26       	eor	r0, r26
    1a50:	61 f0       	breq	.+24     	; 0x1a6a <__fp_cmp+0x46>
    1a52:	23 2b       	or	r18, r19
    1a54:	24 2b       	or	r18, r20
    1a56:	25 2b       	or	r18, r21
    1a58:	21 f4       	brne	.+8      	; 0x1a62 <__fp_cmp+0x3e>
    1a5a:	08 95       	ret
    1a5c:	0a 26       	eor	r0, r26
    1a5e:	09 f4       	brne	.+2      	; 0x1a62 <__fp_cmp+0x3e>
    1a60:	a1 40       	sbci	r26, 0x01	; 1
    1a62:	a6 95       	lsr	r26
    1a64:	8f ef       	ldi	r24, 0xFF	; 255
    1a66:	81 1d       	adc	r24, r1
    1a68:	81 1d       	adc	r24, r1
    1a6a:	08 95       	ret

00001a6c <__fp_inf>:
    1a6c:	97 f9       	bld	r25, 7
    1a6e:	9f 67       	ori	r25, 0x7F	; 127
    1a70:	80 e8       	ldi	r24, 0x80	; 128
    1a72:	70 e0       	ldi	r23, 0x00	; 0
    1a74:	60 e0       	ldi	r22, 0x00	; 0
    1a76:	08 95       	ret

00001a78 <__fp_nan>:
    1a78:	9f ef       	ldi	r25, 0xFF	; 255
    1a7a:	80 ec       	ldi	r24, 0xC0	; 192
    1a7c:	08 95       	ret

00001a7e <__fp_pscA>:
    1a7e:	00 24       	eor	r0, r0
    1a80:	0a 94       	dec	r0
    1a82:	16 16       	cp	r1, r22
    1a84:	17 06       	cpc	r1, r23
    1a86:	18 06       	cpc	r1, r24
    1a88:	09 06       	cpc	r0, r25
    1a8a:	08 95       	ret

00001a8c <__fp_pscB>:
    1a8c:	00 24       	eor	r0, r0
    1a8e:	0a 94       	dec	r0
    1a90:	12 16       	cp	r1, r18
    1a92:	13 06       	cpc	r1, r19
    1a94:	14 06       	cpc	r1, r20
    1a96:	05 06       	cpc	r0, r21
    1a98:	08 95       	ret

00001a9a <__fp_round>:
    1a9a:	09 2e       	mov	r0, r25
    1a9c:	03 94       	inc	r0
    1a9e:	00 0c       	add	r0, r0
    1aa0:	11 f4       	brne	.+4      	; 0x1aa6 <__fp_round+0xc>
    1aa2:	88 23       	and	r24, r24
    1aa4:	52 f0       	brmi	.+20     	; 0x1aba <__fp_round+0x20>
    1aa6:	bb 0f       	add	r27, r27
    1aa8:	40 f4       	brcc	.+16     	; 0x1aba <__fp_round+0x20>
    1aaa:	bf 2b       	or	r27, r31
    1aac:	11 f4       	brne	.+4      	; 0x1ab2 <__fp_round+0x18>
    1aae:	60 ff       	sbrs	r22, 0
    1ab0:	04 c0       	rjmp	.+8      	; 0x1aba <__fp_round+0x20>
    1ab2:	6f 5f       	subi	r22, 0xFF	; 255
    1ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aba:	08 95       	ret

00001abc <__fp_split3>:
    1abc:	57 fd       	sbrc	r21, 7
    1abe:	90 58       	subi	r25, 0x80	; 128
    1ac0:	44 0f       	add	r20, r20
    1ac2:	55 1f       	adc	r21, r21
    1ac4:	59 f0       	breq	.+22     	; 0x1adc <__fp_splitA+0x10>
    1ac6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ac8:	71 f0       	breq	.+28     	; 0x1ae6 <__fp_splitA+0x1a>
    1aca:	47 95       	ror	r20

00001acc <__fp_splitA>:
    1acc:	88 0f       	add	r24, r24
    1ace:	97 fb       	bst	r25, 7
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	61 f0       	breq	.+24     	; 0x1aec <__fp_splitA+0x20>
    1ad4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ad6:	79 f0       	breq	.+30     	; 0x1af6 <__fp_splitA+0x2a>
    1ad8:	87 95       	ror	r24
    1ada:	08 95       	ret
    1adc:	12 16       	cp	r1, r18
    1ade:	13 06       	cpc	r1, r19
    1ae0:	14 06       	cpc	r1, r20
    1ae2:	55 1f       	adc	r21, r21
    1ae4:	f2 cf       	rjmp	.-28     	; 0x1aca <__fp_split3+0xe>
    1ae6:	46 95       	lsr	r20
    1ae8:	f1 df       	rcall	.-30     	; 0x1acc <__fp_splitA>
    1aea:	08 c0       	rjmp	.+16     	; 0x1afc <__fp_splitA+0x30>
    1aec:	16 16       	cp	r1, r22
    1aee:	17 06       	cpc	r1, r23
    1af0:	18 06       	cpc	r1, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	f1 cf       	rjmp	.-30     	; 0x1ad8 <__fp_splitA+0xc>
    1af6:	86 95       	lsr	r24
    1af8:	71 05       	cpc	r23, r1
    1afa:	61 05       	cpc	r22, r1
    1afc:	08 94       	sec
    1afe:	08 95       	ret

00001b00 <__fp_zero>:
    1b00:	e8 94       	clt

00001b02 <__fp_szero>:
    1b02:	bb 27       	eor	r27, r27
    1b04:	66 27       	eor	r22, r22
    1b06:	77 27       	eor	r23, r23
    1b08:	cb 01       	movw	r24, r22
    1b0a:	97 f9       	bld	r25, 7
    1b0c:	08 95       	ret

00001b0e <__gesf2>:
    1b0e:	8a df       	rcall	.-236    	; 0x1a24 <__fp_cmp>
    1b10:	08 f4       	brcc	.+2      	; 0x1b14 <__gesf2+0x6>
    1b12:	8f ef       	ldi	r24, 0xFF	; 255
    1b14:	08 95       	ret

00001b16 <__mulsf3>:
    1b16:	0b d0       	rcall	.+22     	; 0x1b2e <__mulsf3x>
    1b18:	c0 cf       	rjmp	.-128    	; 0x1a9a <__fp_round>
    1b1a:	b1 df       	rcall	.-158    	; 0x1a7e <__fp_pscA>
    1b1c:	28 f0       	brcs	.+10     	; 0x1b28 <__mulsf3+0x12>
    1b1e:	b6 df       	rcall	.-148    	; 0x1a8c <__fp_pscB>
    1b20:	18 f0       	brcs	.+6      	; 0x1b28 <__mulsf3+0x12>
    1b22:	95 23       	and	r25, r21
    1b24:	09 f0       	breq	.+2      	; 0x1b28 <__mulsf3+0x12>
    1b26:	a2 cf       	rjmp	.-188    	; 0x1a6c <__fp_inf>
    1b28:	a7 cf       	rjmp	.-178    	; 0x1a78 <__fp_nan>
    1b2a:	11 24       	eor	r1, r1
    1b2c:	ea cf       	rjmp	.-44     	; 0x1b02 <__fp_szero>

00001b2e <__mulsf3x>:
    1b2e:	c6 df       	rcall	.-116    	; 0x1abc <__fp_split3>
    1b30:	a0 f3       	brcs	.-24     	; 0x1b1a <__mulsf3+0x4>

00001b32 <__mulsf3_pse>:
    1b32:	95 9f       	mul	r25, r21
    1b34:	d1 f3       	breq	.-12     	; 0x1b2a <__mulsf3+0x14>
    1b36:	95 0f       	add	r25, r21
    1b38:	50 e0       	ldi	r21, 0x00	; 0
    1b3a:	55 1f       	adc	r21, r21
    1b3c:	62 9f       	mul	r22, r18
    1b3e:	f0 01       	movw	r30, r0
    1b40:	72 9f       	mul	r23, r18
    1b42:	bb 27       	eor	r27, r27
    1b44:	f0 0d       	add	r31, r0
    1b46:	b1 1d       	adc	r27, r1
    1b48:	63 9f       	mul	r22, r19
    1b4a:	aa 27       	eor	r26, r26
    1b4c:	f0 0d       	add	r31, r0
    1b4e:	b1 1d       	adc	r27, r1
    1b50:	aa 1f       	adc	r26, r26
    1b52:	64 9f       	mul	r22, r20
    1b54:	66 27       	eor	r22, r22
    1b56:	b0 0d       	add	r27, r0
    1b58:	a1 1d       	adc	r26, r1
    1b5a:	66 1f       	adc	r22, r22
    1b5c:	82 9f       	mul	r24, r18
    1b5e:	22 27       	eor	r18, r18
    1b60:	b0 0d       	add	r27, r0
    1b62:	a1 1d       	adc	r26, r1
    1b64:	62 1f       	adc	r22, r18
    1b66:	73 9f       	mul	r23, r19
    1b68:	b0 0d       	add	r27, r0
    1b6a:	a1 1d       	adc	r26, r1
    1b6c:	62 1f       	adc	r22, r18
    1b6e:	83 9f       	mul	r24, r19
    1b70:	a0 0d       	add	r26, r0
    1b72:	61 1d       	adc	r22, r1
    1b74:	22 1f       	adc	r18, r18
    1b76:	74 9f       	mul	r23, r20
    1b78:	33 27       	eor	r19, r19
    1b7a:	a0 0d       	add	r26, r0
    1b7c:	61 1d       	adc	r22, r1
    1b7e:	23 1f       	adc	r18, r19
    1b80:	84 9f       	mul	r24, r20
    1b82:	60 0d       	add	r22, r0
    1b84:	21 1d       	adc	r18, r1
    1b86:	82 2f       	mov	r24, r18
    1b88:	76 2f       	mov	r23, r22
    1b8a:	6a 2f       	mov	r22, r26
    1b8c:	11 24       	eor	r1, r1
    1b8e:	9f 57       	subi	r25, 0x7F	; 127
    1b90:	50 40       	sbci	r21, 0x00	; 0
    1b92:	8a f0       	brmi	.+34     	; 0x1bb6 <__mulsf3_pse+0x84>
    1b94:	e1 f0       	breq	.+56     	; 0x1bce <__mulsf3_pse+0x9c>
    1b96:	88 23       	and	r24, r24
    1b98:	4a f0       	brmi	.+18     	; 0x1bac <__mulsf3_pse+0x7a>
    1b9a:	ee 0f       	add	r30, r30
    1b9c:	ff 1f       	adc	r31, r31
    1b9e:	bb 1f       	adc	r27, r27
    1ba0:	66 1f       	adc	r22, r22
    1ba2:	77 1f       	adc	r23, r23
    1ba4:	88 1f       	adc	r24, r24
    1ba6:	91 50       	subi	r25, 0x01	; 1
    1ba8:	50 40       	sbci	r21, 0x00	; 0
    1baa:	a9 f7       	brne	.-22     	; 0x1b96 <__mulsf3_pse+0x64>
    1bac:	9e 3f       	cpi	r25, 0xFE	; 254
    1bae:	51 05       	cpc	r21, r1
    1bb0:	70 f0       	brcs	.+28     	; 0x1bce <__mulsf3_pse+0x9c>
    1bb2:	5c cf       	rjmp	.-328    	; 0x1a6c <__fp_inf>
    1bb4:	a6 cf       	rjmp	.-180    	; 0x1b02 <__fp_szero>
    1bb6:	5f 3f       	cpi	r21, 0xFF	; 255
    1bb8:	ec f3       	brlt	.-6      	; 0x1bb4 <__mulsf3_pse+0x82>
    1bba:	98 3e       	cpi	r25, 0xE8	; 232
    1bbc:	dc f3       	brlt	.-10     	; 0x1bb4 <__mulsf3_pse+0x82>
    1bbe:	86 95       	lsr	r24
    1bc0:	77 95       	ror	r23
    1bc2:	67 95       	ror	r22
    1bc4:	b7 95       	ror	r27
    1bc6:	f7 95       	ror	r31
    1bc8:	e7 95       	ror	r30
    1bca:	9f 5f       	subi	r25, 0xFF	; 255
    1bcc:	c1 f7       	brne	.-16     	; 0x1bbe <__mulsf3_pse+0x8c>
    1bce:	fe 2b       	or	r31, r30
    1bd0:	88 0f       	add	r24, r24
    1bd2:	91 1d       	adc	r25, r1
    1bd4:	96 95       	lsr	r25
    1bd6:	87 95       	ror	r24
    1bd8:	97 f9       	bld	r25, 7
    1bda:	08 95       	ret

00001bdc <calloc>:
    1bdc:	0f 93       	push	r16
    1bde:	1f 93       	push	r17
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	68 9f       	mul	r22, r24
    1be6:	80 01       	movw	r16, r0
    1be8:	69 9f       	mul	r22, r25
    1bea:	10 0d       	add	r17, r0
    1bec:	78 9f       	mul	r23, r24
    1bee:	10 0d       	add	r17, r0
    1bf0:	11 24       	eor	r1, r1
    1bf2:	c8 01       	movw	r24, r16
    1bf4:	0d d0       	rcall	.+26     	; 0x1c10 <malloc>
    1bf6:	ec 01       	movw	r28, r24
    1bf8:	00 97       	sbiw	r24, 0x00	; 0
    1bfa:	21 f0       	breq	.+8      	; 0x1c04 <calloc+0x28>
    1bfc:	60 e0       	ldi	r22, 0x00	; 0
    1bfe:	70 e0       	ldi	r23, 0x00	; 0
    1c00:	a8 01       	movw	r20, r16
    1c02:	0b d1       	rcall	.+534    	; 0x1e1a <memset>
    1c04:	ce 01       	movw	r24, r28
    1c06:	df 91       	pop	r29
    1c08:	cf 91       	pop	r28
    1c0a:	1f 91       	pop	r17
    1c0c:	0f 91       	pop	r16
    1c0e:	08 95       	ret

00001c10 <malloc>:
    1c10:	cf 93       	push	r28
    1c12:	df 93       	push	r29
    1c14:	bc 01       	movw	r22, r24
    1c16:	82 30       	cpi	r24, 0x02	; 2
    1c18:	91 05       	cpc	r25, r1
    1c1a:	10 f4       	brcc	.+4      	; 0x1c20 <malloc+0x10>
    1c1c:	62 e0       	ldi	r22, 0x02	; 2
    1c1e:	70 e0       	ldi	r23, 0x00	; 0
    1c20:	a0 91 57 02 	lds	r26, 0x0257
    1c24:	b0 91 58 02 	lds	r27, 0x0258
    1c28:	ed 01       	movw	r28, r26
    1c2a:	e0 e0       	ldi	r30, 0x00	; 0
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	40 e0       	ldi	r20, 0x00	; 0
    1c30:	50 e0       	ldi	r21, 0x00	; 0
    1c32:	21 c0       	rjmp	.+66     	; 0x1c76 <malloc+0x66>
    1c34:	88 81       	ld	r24, Y
    1c36:	99 81       	ldd	r25, Y+1	; 0x01
    1c38:	86 17       	cp	r24, r22
    1c3a:	97 07       	cpc	r25, r23
    1c3c:	69 f4       	brne	.+26     	; 0x1c58 <malloc+0x48>
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	9b 81       	ldd	r25, Y+3	; 0x03
    1c42:	30 97       	sbiw	r30, 0x00	; 0
    1c44:	19 f0       	breq	.+6      	; 0x1c4c <malloc+0x3c>
    1c46:	93 83       	std	Z+3, r25	; 0x03
    1c48:	82 83       	std	Z+2, r24	; 0x02
    1c4a:	04 c0       	rjmp	.+8      	; 0x1c54 <malloc+0x44>
    1c4c:	90 93 58 02 	sts	0x0258, r25
    1c50:	80 93 57 02 	sts	0x0257, r24
    1c54:	fe 01       	movw	r30, r28
    1c56:	34 c0       	rjmp	.+104    	; 0x1cc0 <malloc+0xb0>
    1c58:	68 17       	cp	r22, r24
    1c5a:	79 07       	cpc	r23, r25
    1c5c:	38 f4       	brcc	.+14     	; 0x1c6c <malloc+0x5c>
    1c5e:	41 15       	cp	r20, r1
    1c60:	51 05       	cpc	r21, r1
    1c62:	19 f0       	breq	.+6      	; 0x1c6a <malloc+0x5a>
    1c64:	84 17       	cp	r24, r20
    1c66:	95 07       	cpc	r25, r21
    1c68:	08 f4       	brcc	.+2      	; 0x1c6c <malloc+0x5c>
    1c6a:	ac 01       	movw	r20, r24
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	9b 81       	ldd	r25, Y+3	; 0x03
    1c72:	9c 01       	movw	r18, r24
    1c74:	e9 01       	movw	r28, r18
    1c76:	20 97       	sbiw	r28, 0x00	; 0
    1c78:	e9 f6       	brne	.-70     	; 0x1c34 <malloc+0x24>
    1c7a:	41 15       	cp	r20, r1
    1c7c:	51 05       	cpc	r21, r1
    1c7e:	a9 f1       	breq	.+106    	; 0x1cea <malloc+0xda>
    1c80:	ca 01       	movw	r24, r20
    1c82:	86 1b       	sub	r24, r22
    1c84:	97 0b       	sbc	r25, r23
    1c86:	04 97       	sbiw	r24, 0x04	; 4
    1c88:	08 f4       	brcc	.+2      	; 0x1c8c <malloc+0x7c>
    1c8a:	ba 01       	movw	r22, r20
    1c8c:	e0 e0       	ldi	r30, 0x00	; 0
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	2a c0       	rjmp	.+84     	; 0x1ce6 <malloc+0xd6>
    1c92:	8d 91       	ld	r24, X+
    1c94:	9c 91       	ld	r25, X
    1c96:	11 97       	sbiw	r26, 0x01	; 1
    1c98:	84 17       	cp	r24, r20
    1c9a:	95 07       	cpc	r25, r21
    1c9c:	f9 f4       	brne	.+62     	; 0x1cdc <malloc+0xcc>
    1c9e:	64 17       	cp	r22, r20
    1ca0:	75 07       	cpc	r23, r21
    1ca2:	81 f4       	brne	.+32     	; 0x1cc4 <malloc+0xb4>
    1ca4:	12 96       	adiw	r26, 0x02	; 2
    1ca6:	8d 91       	ld	r24, X+
    1ca8:	9c 91       	ld	r25, X
    1caa:	13 97       	sbiw	r26, 0x03	; 3
    1cac:	30 97       	sbiw	r30, 0x00	; 0
    1cae:	19 f0       	breq	.+6      	; 0x1cb6 <malloc+0xa6>
    1cb0:	93 83       	std	Z+3, r25	; 0x03
    1cb2:	82 83       	std	Z+2, r24	; 0x02
    1cb4:	04 c0       	rjmp	.+8      	; 0x1cbe <malloc+0xae>
    1cb6:	90 93 58 02 	sts	0x0258, r25
    1cba:	80 93 57 02 	sts	0x0257, r24
    1cbe:	fd 01       	movw	r30, r26
    1cc0:	32 96       	adiw	r30, 0x02	; 2
    1cc2:	4f c0       	rjmp	.+158    	; 0x1d62 <malloc+0x152>
    1cc4:	ca 01       	movw	r24, r20
    1cc6:	86 1b       	sub	r24, r22
    1cc8:	97 0b       	sbc	r25, r23
    1cca:	fd 01       	movw	r30, r26
    1ccc:	e8 0f       	add	r30, r24
    1cce:	f9 1f       	adc	r31, r25
    1cd0:	61 93       	st	Z+, r22
    1cd2:	71 93       	st	Z+, r23
    1cd4:	02 97       	sbiw	r24, 0x02	; 2
    1cd6:	8d 93       	st	X+, r24
    1cd8:	9c 93       	st	X, r25
    1cda:	43 c0       	rjmp	.+134    	; 0x1d62 <malloc+0x152>
    1cdc:	fd 01       	movw	r30, r26
    1cde:	82 81       	ldd	r24, Z+2	; 0x02
    1ce0:	93 81       	ldd	r25, Z+3	; 0x03
    1ce2:	9c 01       	movw	r18, r24
    1ce4:	d9 01       	movw	r26, r18
    1ce6:	10 97       	sbiw	r26, 0x00	; 0
    1ce8:	a1 f6       	brne	.-88     	; 0x1c92 <malloc+0x82>
    1cea:	80 91 55 02 	lds	r24, 0x0255
    1cee:	90 91 56 02 	lds	r25, 0x0256
    1cf2:	89 2b       	or	r24, r25
    1cf4:	41 f4       	brne	.+16     	; 0x1d06 <malloc+0xf6>
    1cf6:	80 91 02 01 	lds	r24, 0x0102
    1cfa:	90 91 03 01 	lds	r25, 0x0103
    1cfe:	90 93 56 02 	sts	0x0256, r25
    1d02:	80 93 55 02 	sts	0x0255, r24
    1d06:	40 91 04 01 	lds	r20, 0x0104
    1d0a:	50 91 05 01 	lds	r21, 0x0105
    1d0e:	41 15       	cp	r20, r1
    1d10:	51 05       	cpc	r21, r1
    1d12:	41 f4       	brne	.+16     	; 0x1d24 <malloc+0x114>
    1d14:	4d b7       	in	r20, 0x3d	; 61
    1d16:	5e b7       	in	r21, 0x3e	; 62
    1d18:	80 91 00 01 	lds	r24, 0x0100
    1d1c:	90 91 01 01 	lds	r25, 0x0101
    1d20:	48 1b       	sub	r20, r24
    1d22:	59 0b       	sbc	r21, r25
    1d24:	20 91 55 02 	lds	r18, 0x0255
    1d28:	30 91 56 02 	lds	r19, 0x0256
    1d2c:	24 17       	cp	r18, r20
    1d2e:	35 07       	cpc	r19, r21
    1d30:	b0 f4       	brcc	.+44     	; 0x1d5e <malloc+0x14e>
    1d32:	ca 01       	movw	r24, r20
    1d34:	82 1b       	sub	r24, r18
    1d36:	93 0b       	sbc	r25, r19
    1d38:	86 17       	cp	r24, r22
    1d3a:	97 07       	cpc	r25, r23
    1d3c:	80 f0       	brcs	.+32     	; 0x1d5e <malloc+0x14e>
    1d3e:	ab 01       	movw	r20, r22
    1d40:	4e 5f       	subi	r20, 0xFE	; 254
    1d42:	5f 4f       	sbci	r21, 0xFF	; 255
    1d44:	84 17       	cp	r24, r20
    1d46:	95 07       	cpc	r25, r21
    1d48:	50 f0       	brcs	.+20     	; 0x1d5e <malloc+0x14e>
    1d4a:	42 0f       	add	r20, r18
    1d4c:	53 1f       	adc	r21, r19
    1d4e:	50 93 56 02 	sts	0x0256, r21
    1d52:	40 93 55 02 	sts	0x0255, r20
    1d56:	f9 01       	movw	r30, r18
    1d58:	61 93       	st	Z+, r22
    1d5a:	71 93       	st	Z+, r23
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <malloc+0x152>
    1d5e:	e0 e0       	ldi	r30, 0x00	; 0
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	cf 01       	movw	r24, r30
    1d64:	df 91       	pop	r29
    1d66:	cf 91       	pop	r28
    1d68:	08 95       	ret

00001d6a <free>:
    1d6a:	cf 93       	push	r28
    1d6c:	df 93       	push	r29
    1d6e:	00 97       	sbiw	r24, 0x00	; 0
    1d70:	09 f4       	brne	.+2      	; 0x1d74 <free+0xa>
    1d72:	50 c0       	rjmp	.+160    	; 0x1e14 <free+0xaa>
    1d74:	ec 01       	movw	r28, r24
    1d76:	22 97       	sbiw	r28, 0x02	; 2
    1d78:	1b 82       	std	Y+3, r1	; 0x03
    1d7a:	1a 82       	std	Y+2, r1	; 0x02
    1d7c:	a0 91 57 02 	lds	r26, 0x0257
    1d80:	b0 91 58 02 	lds	r27, 0x0258
    1d84:	10 97       	sbiw	r26, 0x00	; 0
    1d86:	09 f1       	breq	.+66     	; 0x1dca <free+0x60>
    1d88:	40 e0       	ldi	r20, 0x00	; 0
    1d8a:	50 e0       	ldi	r21, 0x00	; 0
    1d8c:	ac 17       	cp	r26, r28
    1d8e:	bd 07       	cpc	r27, r29
    1d90:	08 f1       	brcs	.+66     	; 0x1dd4 <free+0x6a>
    1d92:	bb 83       	std	Y+3, r27	; 0x03
    1d94:	aa 83       	std	Y+2, r26	; 0x02
    1d96:	fe 01       	movw	r30, r28
    1d98:	21 91       	ld	r18, Z+
    1d9a:	31 91       	ld	r19, Z+
    1d9c:	e2 0f       	add	r30, r18
    1d9e:	f3 1f       	adc	r31, r19
    1da0:	ae 17       	cp	r26, r30
    1da2:	bf 07       	cpc	r27, r31
    1da4:	79 f4       	brne	.+30     	; 0x1dc4 <free+0x5a>
    1da6:	8d 91       	ld	r24, X+
    1da8:	9c 91       	ld	r25, X
    1daa:	11 97       	sbiw	r26, 0x01	; 1
    1dac:	28 0f       	add	r18, r24
    1dae:	39 1f       	adc	r19, r25
    1db0:	2e 5f       	subi	r18, 0xFE	; 254
    1db2:	3f 4f       	sbci	r19, 0xFF	; 255
    1db4:	39 83       	std	Y+1, r19	; 0x01
    1db6:	28 83       	st	Y, r18
    1db8:	12 96       	adiw	r26, 0x02	; 2
    1dba:	8d 91       	ld	r24, X+
    1dbc:	9c 91       	ld	r25, X
    1dbe:	13 97       	sbiw	r26, 0x03	; 3
    1dc0:	9b 83       	std	Y+3, r25	; 0x03
    1dc2:	8a 83       	std	Y+2, r24	; 0x02
    1dc4:	41 15       	cp	r20, r1
    1dc6:	51 05       	cpc	r21, r1
    1dc8:	71 f4       	brne	.+28     	; 0x1de6 <free+0x7c>
    1dca:	d0 93 58 02 	sts	0x0258, r29
    1dce:	c0 93 57 02 	sts	0x0257, r28
    1dd2:	20 c0       	rjmp	.+64     	; 0x1e14 <free+0xaa>
    1dd4:	12 96       	adiw	r26, 0x02	; 2
    1dd6:	8d 91       	ld	r24, X+
    1dd8:	9c 91       	ld	r25, X
    1dda:	13 97       	sbiw	r26, 0x03	; 3
    1ddc:	ad 01       	movw	r20, r26
    1dde:	00 97       	sbiw	r24, 0x00	; 0
    1de0:	11 f0       	breq	.+4      	; 0x1de6 <free+0x7c>
    1de2:	dc 01       	movw	r26, r24
    1de4:	d3 cf       	rjmp	.-90     	; 0x1d8c <free+0x22>
    1de6:	fa 01       	movw	r30, r20
    1de8:	d3 83       	std	Z+3, r29	; 0x03
    1dea:	c2 83       	std	Z+2, r28	; 0x02
    1dec:	21 91       	ld	r18, Z+
    1dee:	31 91       	ld	r19, Z+
    1df0:	e2 0f       	add	r30, r18
    1df2:	f3 1f       	adc	r31, r19
    1df4:	ce 17       	cp	r28, r30
    1df6:	df 07       	cpc	r29, r31
    1df8:	69 f4       	brne	.+26     	; 0x1e14 <free+0xaa>
    1dfa:	88 81       	ld	r24, Y
    1dfc:	99 81       	ldd	r25, Y+1	; 0x01
    1dfe:	28 0f       	add	r18, r24
    1e00:	39 1f       	adc	r19, r25
    1e02:	2e 5f       	subi	r18, 0xFE	; 254
    1e04:	3f 4f       	sbci	r19, 0xFF	; 255
    1e06:	fa 01       	movw	r30, r20
    1e08:	31 83       	std	Z+1, r19	; 0x01
    1e0a:	20 83       	st	Z, r18
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e10:	93 83       	std	Z+3, r25	; 0x03
    1e12:	82 83       	std	Z+2, r24	; 0x02
    1e14:	df 91       	pop	r29
    1e16:	cf 91       	pop	r28
    1e18:	08 95       	ret

00001e1a <memset>:
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	01 c0       	rjmp	.+2      	; 0x1e20 <memset+0x6>
    1e1e:	6d 93       	st	X+, r22
    1e20:	41 50       	subi	r20, 0x01	; 1
    1e22:	50 40       	sbci	r21, 0x00	; 0
    1e24:	e0 f7       	brcc	.-8      	; 0x1e1e <memset+0x4>
    1e26:	08 95       	ret

00001e28 <_exit>:
    1e28:	f8 94       	cli

00001e2a <__stop_program>:
    1e2a:	ff cf       	rjmp	.-2      	; 0x1e2a <__stop_program>
