
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000163e  000016d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000163e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000144  00800106  00800106  000016d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001708  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d07  00000000  00000000  000018a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000501  00000000  00000000  000025af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e70  00000000  00000000  00002ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000554  00000000  00000000  00003920  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ef  00000000  00000000  00003e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b3d  00000000  00000000  00004363  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004ea0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	2f c5       	rjmp	.+2654   	; 0xa90 <__vector_12>
      32:	00 00       	nop
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	aa c2       	rjmp	.+1364   	; 0x59e <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	af c6       	rjmp	.+3422   	; 0xdb4 <__vector_21>
      56:	00 00       	nop
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	69 c6       	rjmp	.+3282   	; 0xd30 <__vector_23>
      5e:	00 00       	nop
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c7       	rjmp	.+3662   	; 0xed0 <__vector_32>
      82:	00 00       	nop
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	e1 c6       	rjmp	.+3522   	; 0xe4c <__vector_34>
      8a:	00 00       	nop
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ee e3       	ldi	r30, 0x3E	; 62
      a8:	f6 e1       	ldi	r31, 0x16	; 22
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a6 30       	cpi	r26, 0x06	; 6
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	22 e0       	ldi	r18, 0x02	; 2
      bc:	a6 e0       	ldi	r26, 0x06	; 6
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	aa 34       	cpi	r26, 0x4A	; 74
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
#include <stdio.h>
#include "odometry.h"
#include "actuators.h"

int main()
{
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	ae 97       	sbiw	r28, 0x2e	; 46
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
	int i = 0;	
      e6:	1a 82       	std	Y+2, r1	; 0x02
      e8:	19 82       	std	Y+1, r1	; 0x01
	int angle = 0;
      ea:	1c 82       	std	Y+4, r1	; 0x04
      ec:	1b 82       	std	Y+3, r1	; 0x03
	system_init();
      ee:	1f d5       	rcall	.+2622   	; 0xb2e <system_init>
	PORTG = 0xff;
      f0:	84 e3       	ldi	r24, 0x34	; 52
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	2f ef       	ldi	r18, 0xFF	; 255
      f6:	fc 01       	movw	r30, r24
      f8:	20 83       	st	Z, r18
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	90 e8       	ldi	r25, 0x80	; 128
      fe:	ab eb       	ldi	r26, 0xBB	; 187
     100:	b4 e4       	ldi	r27, 0x44	; 68
     102:	8d 83       	std	Y+5, r24	; 0x05
     104:	9e 83       	std	Y+6, r25	; 0x06
     106:	af 83       	std	Y+7, r26	; 0x07
     108:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     10a:	20 e0       	ldi	r18, 0x00	; 0
     10c:	30 e4       	ldi	r19, 0x40	; 64
     10e:	4c e1       	ldi	r20, 0x1C	; 28
     110:	55 e4       	ldi	r21, 0x45	; 69
     112:	6d 81       	ldd	r22, Y+5	; 0x05
     114:	7e 81       	ldd	r23, Y+6	; 0x06
     116:	8f 81       	ldd	r24, Y+7	; 0x07
     118:	98 85       	ldd	r25, Y+8	; 0x08
     11a:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__mulsf3>
     11e:	dc 01       	movw	r26, r24
     120:	cb 01       	movw	r24, r22
     122:	89 87       	std	Y+9, r24	; 0x09
     124:	9a 87       	std	Y+10, r25	; 0x0a
     126:	ab 87       	std	Y+11, r26	; 0x0b
     128:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     12a:	20 e0       	ldi	r18, 0x00	; 0
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	40 e8       	ldi	r20, 0x80	; 128
     130:	5f e3       	ldi	r21, 0x3F	; 63
     132:	69 85       	ldd	r22, Y+9	; 0x09
     134:	7a 85       	ldd	r23, Y+10	; 0x0a
     136:	8b 85       	ldd	r24, Y+11	; 0x0b
     138:	9c 85       	ldd	r25, Y+12	; 0x0c
     13a:	7b d7       	rcall	.+3830   	; 0x1032 <__cmpsf2>
     13c:	88 23       	and	r24, r24
     13e:	2c f4       	brge	.+10     	; 0x14a <main+0x78>
		__ticks = 1;
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	9e 87       	std	Y+14, r25	; 0x0e
     146:	8d 87       	std	Y+13, r24	; 0x0d
     148:	3d c0       	rjmp	.+122    	; 0x1c4 <main+0xf2>
	else if (__tmp > 65535)
     14a:	20 e0       	ldi	r18, 0x00	; 0
     14c:	3f ef       	ldi	r19, 0xFF	; 255
     14e:	4f e7       	ldi	r20, 0x7F	; 127
     150:	57 e4       	ldi	r21, 0x47	; 71
     152:	69 85       	ldd	r22, Y+9	; 0x09
     154:	7a 85       	ldd	r23, Y+10	; 0x0a
     156:	8b 85       	ldd	r24, Y+11	; 0x0b
     158:	9c 85       	ldd	r25, Y+12	; 0x0c
     15a:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__gesf2>
     15e:	18 16       	cp	r1, r24
     160:	44 f5       	brge	.+80     	; 0x1b2 <main+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     162:	20 e0       	ldi	r18, 0x00	; 0
     164:	30 e0       	ldi	r19, 0x00	; 0
     166:	40 e2       	ldi	r20, 0x20	; 32
     168:	51 e4       	ldi	r21, 0x41	; 65
     16a:	6d 81       	ldd	r22, Y+5	; 0x05
     16c:	7e 81       	ldd	r23, Y+6	; 0x06
     16e:	8f 81       	ldd	r24, Y+7	; 0x07
     170:	98 85       	ldd	r25, Y+8	; 0x08
     172:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__mulsf3>
     176:	dc 01       	movw	r26, r24
     178:	cb 01       	movw	r24, r22
     17a:	bc 01       	movw	r22, r24
     17c:	cd 01       	movw	r24, r26
     17e:	ca d7       	rcall	.+3988   	; 0x1114 <__fixunssfsi>
     180:	dc 01       	movw	r26, r24
     182:	cb 01       	movw	r24, r22
     184:	9e 87       	std	Y+14, r25	; 0x0e
     186:	8d 87       	std	Y+13, r24	; 0x0d
     188:	0f c0       	rjmp	.+30     	; 0x1a8 <main+0xd6>
     18a:	8a ef       	ldi	r24, 0xFA	; 250
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	98 8b       	std	Y+16, r25	; 0x10
     190:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     192:	8f 85       	ldd	r24, Y+15	; 0x0f
     194:	98 89       	ldd	r25, Y+16	; 0x10
     196:	01 97       	sbiw	r24, 0x01	; 1
     198:	f1 f7       	brne	.-4      	; 0x196 <main+0xc4>
     19a:	98 8b       	std	Y+16, r25	; 0x10
     19c:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     19e:	8d 85       	ldd	r24, Y+13	; 0x0d
     1a0:	9e 85       	ldd	r25, Y+14	; 0x0e
     1a2:	01 97       	sbiw	r24, 0x01	; 1
     1a4:	9e 87       	std	Y+14, r25	; 0x0e
     1a6:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1a8:	8d 85       	ldd	r24, Y+13	; 0x0d
     1aa:	9e 85       	ldd	r25, Y+14	; 0x0e
     1ac:	89 2b       	or	r24, r25
     1ae:	69 f7       	brne	.-38     	; 0x18a <main+0xb8>
     1b0:	13 c0       	rjmp	.+38     	; 0x1d8 <main+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1b2:	69 85       	ldd	r22, Y+9	; 0x09
     1b4:	7a 85       	ldd	r23, Y+10	; 0x0a
     1b6:	8b 85       	ldd	r24, Y+11	; 0x0b
     1b8:	9c 85       	ldd	r25, Y+12	; 0x0c
     1ba:	ac d7       	rcall	.+3928   	; 0x1114 <__fixunssfsi>
     1bc:	dc 01       	movw	r26, r24
     1be:	cb 01       	movw	r24, r22
     1c0:	9e 87       	std	Y+14, r25	; 0x0e
     1c2:	8d 87       	std	Y+13, r24	; 0x0d
     1c4:	8d 85       	ldd	r24, Y+13	; 0x0d
     1c6:	9e 85       	ldd	r25, Y+14	; 0x0e
     1c8:	9a 8b       	std	Y+18, r25	; 0x12
     1ca:	89 8b       	std	Y+17, r24	; 0x11
     1cc:	89 89       	ldd	r24, Y+17	; 0x11
     1ce:	9a 89       	ldd	r25, Y+18	; 0x12
     1d0:	01 97       	sbiw	r24, 0x01	; 1
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <main+0xfe>
     1d4:	9a 8b       	std	Y+18, r25	; 0x12
     1d6:	89 8b       	std	Y+17, r24	; 0x11
	while(1)
	{
		_delay_ms(1500);
		servo_set_position(-40);
     1d8:	88 ed       	ldi	r24, 0xD8	; 216
     1da:	a2 d1       	rcall	.+836    	; 0x520 <servo_set_position>
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	90 e8       	ldi	r25, 0x80	; 128
     1e0:	ab eb       	ldi	r26, 0xBB	; 187
     1e2:	b4 e4       	ldi	r27, 0x44	; 68
     1e4:	8b 8b       	std	Y+19, r24	; 0x13
     1e6:	9c 8b       	std	Y+20, r25	; 0x14
     1e8:	ad 8b       	std	Y+21, r26	; 0x15
     1ea:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     1ec:	20 e0       	ldi	r18, 0x00	; 0
     1ee:	30 e4       	ldi	r19, 0x40	; 64
     1f0:	4c e1       	ldi	r20, 0x1C	; 28
     1f2:	55 e4       	ldi	r21, 0x45	; 69
     1f4:	6b 89       	ldd	r22, Y+19	; 0x13
     1f6:	7c 89       	ldd	r23, Y+20	; 0x14
     1f8:	8d 89       	ldd	r24, Y+21	; 0x15
     1fa:	9e 89       	ldd	r25, Y+22	; 0x16
     1fc:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__mulsf3>
     200:	dc 01       	movw	r26, r24
     202:	cb 01       	movw	r24, r22
     204:	8f 8b       	std	Y+23, r24	; 0x17
     206:	98 8f       	std	Y+24, r25	; 0x18
     208:	a9 8f       	std	Y+25, r26	; 0x19
     20a:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     20c:	20 e0       	ldi	r18, 0x00	; 0
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	40 e8       	ldi	r20, 0x80	; 128
     212:	5f e3       	ldi	r21, 0x3F	; 63
     214:	6f 89       	ldd	r22, Y+23	; 0x17
     216:	78 8d       	ldd	r23, Y+24	; 0x18
     218:	89 8d       	ldd	r24, Y+25	; 0x19
     21a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     21c:	0a d7       	rcall	.+3604   	; 0x1032 <__cmpsf2>
     21e:	88 23       	and	r24, r24
     220:	2c f4       	brge	.+10     	; 0x22c <main+0x15a>
		__ticks = 1;
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	9c 8f       	std	Y+28, r25	; 0x1c
     228:	8b 8f       	std	Y+27, r24	; 0x1b
     22a:	3d c0       	rjmp	.+122    	; 0x2a6 <main+0x1d4>
	else if (__tmp > 65535)
     22c:	20 e0       	ldi	r18, 0x00	; 0
     22e:	3f ef       	ldi	r19, 0xFF	; 255
     230:	4f e7       	ldi	r20, 0x7F	; 127
     232:	57 e4       	ldi	r21, 0x47	; 71
     234:	6f 89       	ldd	r22, Y+23	; 0x17
     236:	78 8d       	ldd	r23, Y+24	; 0x18
     238:	89 8d       	ldd	r24, Y+25	; 0x19
     23a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     23c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__gesf2>
     240:	18 16       	cp	r1, r24
     242:	44 f5       	brge	.+80     	; 0x294 <main+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     244:	20 e0       	ldi	r18, 0x00	; 0
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	40 e2       	ldi	r20, 0x20	; 32
     24a:	51 e4       	ldi	r21, 0x41	; 65
     24c:	6b 89       	ldd	r22, Y+19	; 0x13
     24e:	7c 89       	ldd	r23, Y+20	; 0x14
     250:	8d 89       	ldd	r24, Y+21	; 0x15
     252:	9e 89       	ldd	r25, Y+22	; 0x16
     254:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__mulsf3>
     258:	dc 01       	movw	r26, r24
     25a:	cb 01       	movw	r24, r22
     25c:	bc 01       	movw	r22, r24
     25e:	cd 01       	movw	r24, r26
     260:	59 d7       	rcall	.+3762   	; 0x1114 <__fixunssfsi>
     262:	dc 01       	movw	r26, r24
     264:	cb 01       	movw	r24, r22
     266:	9c 8f       	std	Y+28, r25	; 0x1c
     268:	8b 8f       	std	Y+27, r24	; 0x1b
     26a:	0f c0       	rjmp	.+30     	; 0x28a <main+0x1b8>
     26c:	8a ef       	ldi	r24, 0xFA	; 250
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	9e 8f       	std	Y+30, r25	; 0x1e
     272:	8d 8f       	std	Y+29, r24	; 0x1d
     274:	8d 8d       	ldd	r24, Y+29	; 0x1d
     276:	9e 8d       	ldd	r25, Y+30	; 0x1e
     278:	01 97       	sbiw	r24, 0x01	; 1
     27a:	f1 f7       	brne	.-4      	; 0x278 <main+0x1a6>
     27c:	9e 8f       	std	Y+30, r25	; 0x1e
     27e:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     280:	8b 8d       	ldd	r24, Y+27	; 0x1b
     282:	9c 8d       	ldd	r25, Y+28	; 0x1c
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	9c 8f       	std	Y+28, r25	; 0x1c
     288:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     28a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     28c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     28e:	89 2b       	or	r24, r25
     290:	69 f7       	brne	.-38     	; 0x26c <main+0x19a>
     292:	13 c0       	rjmp	.+38     	; 0x2ba <main+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     294:	6f 89       	ldd	r22, Y+23	; 0x17
     296:	78 8d       	ldd	r23, Y+24	; 0x18
     298:	89 8d       	ldd	r24, Y+25	; 0x19
     29a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     29c:	3b d7       	rcall	.+3702   	; 0x1114 <__fixunssfsi>
     29e:	dc 01       	movw	r26, r24
     2a0:	cb 01       	movw	r24, r22
     2a2:	9c 8f       	std	Y+28, r25	; 0x1c
     2a4:	8b 8f       	std	Y+27, r24	; 0x1b
     2a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2aa:	98 a3       	std	Y+32, r25	; 0x20
     2ac:	8f 8f       	std	Y+31, r24	; 0x1f
     2ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
     2b0:	98 a1       	ldd	r25, Y+32	; 0x20
     2b2:	01 97       	sbiw	r24, 0x01	; 1
     2b4:	f1 f7       	brne	.-4      	; 0x2b2 <main+0x1e0>
     2b6:	98 a3       	std	Y+32, r25	; 0x20
     2b8:	8f 8f       	std	Y+31, r24	; 0x1f
		_delay_ms(1500);
		servo_set_position(40);
     2ba:	88 e2       	ldi	r24, 0x28	; 40
     2bc:	31 d1       	rcall	.+610    	; 0x520 <servo_set_position>
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	90 e8       	ldi	r25, 0x80	; 128
     2c2:	ab eb       	ldi	r26, 0xBB	; 187
     2c4:	b4 e4       	ldi	r27, 0x44	; 68
     2c6:	89 a3       	std	Y+33, r24	; 0x21
     2c8:	9a a3       	std	Y+34, r25	; 0x22
     2ca:	ab a3       	std	Y+35, r26	; 0x23
     2cc:	bc a3       	std	Y+36, r27	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 e4       	ldi	r19, 0x40	; 64
     2d2:	4c e1       	ldi	r20, 0x1C	; 28
     2d4:	55 e4       	ldi	r21, 0x45	; 69
     2d6:	69 a1       	ldd	r22, Y+33	; 0x21
     2d8:	7a a1       	ldd	r23, Y+34	; 0x22
     2da:	8b a1       	ldd	r24, Y+35	; 0x23
     2dc:	9c a1       	ldd	r25, Y+36	; 0x24
     2de:	fc d7       	rcall	.+4088   	; 0x12d8 <__mulsf3>
     2e0:	dc 01       	movw	r26, r24
     2e2:	cb 01       	movw	r24, r22
     2e4:	8d a3       	std	Y+37, r24	; 0x25
     2e6:	9e a3       	std	Y+38, r25	; 0x26
     2e8:	af a3       	std	Y+39, r26	; 0x27
     2ea:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 e8       	ldi	r20, 0x80	; 128
     2f2:	5f e3       	ldi	r21, 0x3F	; 63
     2f4:	6d a1       	ldd	r22, Y+37	; 0x25
     2f6:	7e a1       	ldd	r23, Y+38	; 0x26
     2f8:	8f a1       	ldd	r24, Y+39	; 0x27
     2fa:	98 a5       	ldd	r25, Y+40	; 0x28
     2fc:	9a d6       	rcall	.+3380   	; 0x1032 <__cmpsf2>
     2fe:	88 23       	and	r24, r24
     300:	2c f4       	brge	.+10     	; 0x30c <main+0x23a>
		__ticks = 1;
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	9a a7       	std	Y+42, r25	; 0x2a
     308:	89 a7       	std	Y+41, r24	; 0x29
     30a:	3b c0       	rjmp	.+118    	; 0x382 <main+0x2b0>
	else if (__tmp > 65535)
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	3f ef       	ldi	r19, 0xFF	; 255
     310:	4f e7       	ldi	r20, 0x7F	; 127
     312:	57 e4       	ldi	r21, 0x47	; 71
     314:	6d a1       	ldd	r22, Y+37	; 0x25
     316:	7e a1       	ldd	r23, Y+38	; 0x26
     318:	8f a1       	ldd	r24, Y+39	; 0x27
     31a:	98 a5       	ldd	r25, Y+40	; 0x28
     31c:	d9 d7       	rcall	.+4018   	; 0x12d0 <__gesf2>
     31e:	18 16       	cp	r1, r24
     320:	3c f5       	brge	.+78     	; 0x370 <main+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     322:	20 e0       	ldi	r18, 0x00	; 0
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	40 e2       	ldi	r20, 0x20	; 32
     328:	51 e4       	ldi	r21, 0x41	; 65
     32a:	69 a1       	ldd	r22, Y+33	; 0x21
     32c:	7a a1       	ldd	r23, Y+34	; 0x22
     32e:	8b a1       	ldd	r24, Y+35	; 0x23
     330:	9c a1       	ldd	r25, Y+36	; 0x24
     332:	d2 d7       	rcall	.+4004   	; 0x12d8 <__mulsf3>
     334:	dc 01       	movw	r26, r24
     336:	cb 01       	movw	r24, r22
     338:	bc 01       	movw	r22, r24
     33a:	cd 01       	movw	r24, r26
     33c:	eb d6       	rcall	.+3542   	; 0x1114 <__fixunssfsi>
     33e:	dc 01       	movw	r26, r24
     340:	cb 01       	movw	r24, r22
     342:	9a a7       	std	Y+42, r25	; 0x2a
     344:	89 a7       	std	Y+41, r24	; 0x29
     346:	0f c0       	rjmp	.+30     	; 0x366 <main+0x294>
     348:	8a ef       	ldi	r24, 0xFA	; 250
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	9c a7       	std	Y+44, r25	; 0x2c
     34e:	8b a7       	std	Y+43, r24	; 0x2b
     350:	8b a5       	ldd	r24, Y+43	; 0x2b
     352:	9c a5       	ldd	r25, Y+44	; 0x2c
     354:	01 97       	sbiw	r24, 0x01	; 1
     356:	f1 f7       	brne	.-4      	; 0x354 <main+0x282>
     358:	9c a7       	std	Y+44, r25	; 0x2c
     35a:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     35c:	89 a5       	ldd	r24, Y+41	; 0x29
     35e:	9a a5       	ldd	r25, Y+42	; 0x2a
     360:	01 97       	sbiw	r24, 0x01	; 1
     362:	9a a7       	std	Y+42, r25	; 0x2a
     364:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     366:	89 a5       	ldd	r24, Y+41	; 0x29
     368:	9a a5       	ldd	r25, Y+42	; 0x2a
     36a:	89 2b       	or	r24, r25
     36c:	69 f7       	brne	.-38     	; 0x348 <main+0x276>
     36e:	13 c0       	rjmp	.+38     	; 0x396 <main+0x2c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     370:	6d a1       	ldd	r22, Y+37	; 0x25
     372:	7e a1       	ldd	r23, Y+38	; 0x26
     374:	8f a1       	ldd	r24, Y+39	; 0x27
     376:	98 a5       	ldd	r25, Y+40	; 0x28
     378:	cd d6       	rcall	.+3482   	; 0x1114 <__fixunssfsi>
     37a:	dc 01       	movw	r26, r24
     37c:	cb 01       	movw	r24, r22
     37e:	9a a7       	std	Y+42, r25	; 0x2a
     380:	89 a7       	std	Y+41, r24	; 0x29
     382:	89 a5       	ldd	r24, Y+41	; 0x29
     384:	9a a5       	ldd	r25, Y+42	; 0x2a
     386:	9e a7       	std	Y+46, r25	; 0x2e
     388:	8d a7       	std	Y+45, r24	; 0x2d
     38a:	8d a5       	ldd	r24, Y+45	; 0x2d
     38c:	9e a5       	ldd	r25, Y+46	; 0x2e
     38e:	01 97       	sbiw	r24, 0x01	; 1
     390:	f1 f7       	brne	.-4      	; 0x38e <main+0x2bc>
     392:	9e a7       	std	Y+46, r25	; 0x2e
     394:	8d a7       	std	Y+45, r24	; 0x2d
				
				servo_set_position(20);
				_delay_ms(2000);
			}
		}*/
	}
     396:	b1 ce       	rjmp	.-670    	; 0xfa <main+0x28>

00000398 <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <servo_init+0xa>
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
     3a6:	9a 83       	std	Y+2, r25	; 0x02
     3a8:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     3aa:	8d e2       	ldi	r24, 0x2D	; 45
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	2d e2       	ldi	r18, 0x2D	; 45
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	f9 01       	movw	r30, r18
     3b4:	20 81       	ld	r18, Z
     3b6:	28 63       	ori	r18, 0x38	; 56
     3b8:	fc 01       	movw	r30, r24
     3ba:	20 83       	st	Z, r18
	
	TCNT3 = 0;
     3bc:	84 e9       	ldi	r24, 0x94	; 148
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	fc 01       	movw	r30, r24
     3c2:	11 82       	std	Z+1, r1	; 0x01
     3c4:	10 82       	st	Z, r1
	OCR3A = 0;
     3c6:	88 e9       	ldi	r24, 0x98	; 152
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	fc 01       	movw	r30, r24
     3cc:	11 82       	std	Z+1, r1	; 0x01
     3ce:	10 82       	st	Z, r1
	OCR3B = 0;
     3d0:	8a e9       	ldi	r24, 0x9A	; 154
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	fc 01       	movw	r30, r24
     3d6:	11 82       	std	Z+1, r1	; 0x01
     3d8:	10 82       	st	Z, r1
	OCR3C = 0;
     3da:	8c e9       	ldi	r24, 0x9C	; 156
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	fc 01       	movw	r30, r24
     3e0:	11 82       	std	Z+1, r1	; 0x01
     3e2:	10 82       	st	Z, r1
	
	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     3e4:	80 e9       	ldi	r24, 0x90	; 144
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	2e eb       	ldi	r18, 0xBE	; 190
     3ea:	fc 01       	movw	r30, r24
     3ec:	20 83       	st	Z, r18
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     3ee:	81 e9       	ldi	r24, 0x91	; 145
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	2a e1       	ldi	r18, 0x1A	; 26
     3f4:	fc 01       	movw	r30, r24
     3f6:	20 83       	st	Z, r18
	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5; 
     3f8:	06 e9       	ldi	r16, 0x96	; 150
     3fa:	10 e0       	ldi	r17, 0x00	; 0
     3fc:	89 81       	ldd	r24, Y+1	; 0x01
     3fe:	9a 81       	ldd	r25, Y+2	; 0x02
     400:	cc 01       	movw	r24, r24
     402:	a0 e0       	ldi	r26, 0x00	; 0
     404:	b0 e0       	ldi	r27, 0x00	; 0
     406:	bc 01       	movw	r22, r24
     408:	cd 01       	movw	r24, r26
     40a:	b0 d6       	rcall	.+3424   	; 0x116c <__floatunsisf>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	40 e0       	ldi	r20, 0x00	; 0
     416:	51 e4       	ldi	r21, 0x41	; 65
     418:	bc 01       	movw	r22, r24
     41a:	cd 01       	movw	r24, r26
     41c:	5d d7       	rcall	.+3770   	; 0x12d8 <__mulsf3>
     41e:	dc 01       	movw	r26, r24
     420:	cb 01       	movw	r24, r22
     422:	9c 01       	movw	r18, r24
     424:	ad 01       	movw	r20, r26
     426:	60 e8       	ldi	r22, 0x80	; 128
     428:	76 e9       	ldi	r23, 0x96	; 150
     42a:	88 e1       	ldi	r24, 0x18	; 24
     42c:	9b e4       	ldi	r25, 0x4B	; 75
     42e:	05 d6       	rcall	.+3082   	; 0x103a <__divsf3>
     430:	dc 01       	movw	r26, r24
     432:	cb 01       	movw	r24, r22
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	40 e0       	ldi	r20, 0x00	; 0
     43a:	5f e3       	ldi	r21, 0x3F	; 63
     43c:	bc 01       	movw	r22, r24
     43e:	cd 01       	movw	r24, r26
     440:	94 d5       	rcall	.+2856   	; 0xf6a <__addsf3>
     442:	dc 01       	movw	r26, r24
     444:	cb 01       	movw	r24, r22
     446:	bc 01       	movw	r22, r24
     448:	cd 01       	movw	r24, r26
     44a:	64 d6       	rcall	.+3272   	; 0x1114 <__fixunssfsi>
     44c:	dc 01       	movw	r26, r24
     44e:	cb 01       	movw	r24, r22
     450:	f8 01       	movw	r30, r16
     452:	91 83       	std	Z+1, r25	; 0x01
     454:	80 83       	st	Z, r24
}//END OF servo_init
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	08 95       	ret

00000464 <servo_set_duty_cycle>:


static void servo_set_duty_cycle(int16_t value)
{
     464:	cf 92       	push	r12
     466:	df 92       	push	r13
     468:	ef 92       	push	r14
     46a:	ff 92       	push	r15
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	00 d0       	rcall	.+0      	; 0x472 <servo_set_duty_cycle+0xe>
     472:	00 d0       	rcall	.+0      	; 0x474 <servo_set_duty_cycle+0x10>
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
     478:	9c 83       	std	Y+4, r25	; 0x04
     47a:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     47c:	86 e9       	ldi	r24, 0x96	; 150
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	fc 01       	movw	r30, r24
     482:	80 81       	ld	r24, Z
     484:	91 81       	ldd	r25, Z+1	; 0x01
     486:	cc 01       	movw	r24, r24
     488:	a0 e0       	ldi	r26, 0x00	; 0
     48a:	b0 e0       	ldi	r27, 0x00	; 0
     48c:	bc 01       	movw	r22, r24
     48e:	cd 01       	movw	r24, r26
     490:	6d d6       	rcall	.+3290   	; 0x116c <__floatunsisf>
     492:	dc 01       	movw	r26, r24
     494:	cb 01       	movw	r24, r22
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	4f e7       	ldi	r20, 0x7F	; 127
     49c:	53 e4       	ldi	r21, 0x43	; 67
     49e:	bc 01       	movw	r22, r24
     4a0:	cd 01       	movw	r24, r26
     4a2:	cb d5       	rcall	.+2966   	; 0x103a <__divsf3>
     4a4:	dc 01       	movw	r26, r24
     4a6:	cb 01       	movw	r24, r22
     4a8:	6c 01       	movw	r12, r24
     4aa:	7d 01       	movw	r14, r26
     4ac:	8b 81       	ldd	r24, Y+3	; 0x03
     4ae:	9c 81       	ldd	r25, Y+4	; 0x04
     4b0:	09 2e       	mov	r0, r25
     4b2:	00 0c       	add	r0, r0
     4b4:	aa 0b       	sbc	r26, r26
     4b6:	bb 0b       	sbc	r27, r27
     4b8:	bc 01       	movw	r22, r24
     4ba:	cd 01       	movw	r24, r26
     4bc:	59 d6       	rcall	.+3250   	; 0x1170 <__floatsisf>
     4be:	dc 01       	movw	r26, r24
     4c0:	cb 01       	movw	r24, r22
     4c2:	9c 01       	movw	r18, r24
     4c4:	ad 01       	movw	r20, r26
     4c6:	c7 01       	movw	r24, r14
     4c8:	b6 01       	movw	r22, r12
     4ca:	06 d7       	rcall	.+3596   	; 0x12d8 <__mulsf3>
     4cc:	dc 01       	movw	r26, r24
     4ce:	cb 01       	movw	r24, r22
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	40 e0       	ldi	r20, 0x00	; 0
     4d6:	5f e3       	ldi	r21, 0x3F	; 63
     4d8:	bc 01       	movw	r22, r24
     4da:	cd 01       	movw	r24, r26
     4dc:	46 d5       	rcall	.+2700   	; 0xf6a <__addsf3>
     4de:	dc 01       	movw	r26, r24
     4e0:	cb 01       	movw	r24, r22
     4e2:	bc 01       	movw	r22, r24
     4e4:	cd 01       	movw	r24, r26
     4e6:	16 d6       	rcall	.+3116   	; 0x1114 <__fixunssfsi>
     4e8:	dc 01       	movw	r26, r24
     4ea:	cb 01       	movw	r24, r22
     4ec:	9a 83       	std	Y+2, r25	; 0x02
     4ee:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     4f0:	89 e9       	ldi	r24, 0x99	; 153
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	29 81       	ldd	r18, Y+1	; 0x01
     4f6:	3a 81       	ldd	r19, Y+2	; 0x02
     4f8:	23 2f       	mov	r18, r19
     4fa:	33 27       	eor	r19, r19
     4fc:	fc 01       	movw	r30, r24
     4fe:	20 83       	st	Z, r18
	OCR3AL = temp & 0xFF;
     500:	88 e9       	ldi	r24, 0x98	; 152
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	29 81       	ldd	r18, Y+1	; 0x01
     506:	fc 01       	movw	r30, r24
     508:	20 83       	st	Z, r18
	
}//END OF servo_position
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	ff 90       	pop	r15
     518:	ef 90       	pop	r14
     51a:	df 90       	pop	r13
     51c:	cf 90       	pop	r12
     51e:	08 95       	ret

00000520 <servo_set_position>:

void servo_set_position(int8_t angle)
{
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	1f 92       	push	r1
     526:	cd b7       	in	r28, 0x3d	; 61
     528:	de b7       	in	r29, 0x3e	; 62
     52a:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     52c:	89 81       	ldd	r24, Y+1	; 0x01
     52e:	08 2e       	mov	r0, r24
     530:	00 0c       	add	r0, r0
     532:	99 0b       	sbc	r25, r25
     534:	aa 0b       	sbc	r26, r26
     536:	bb 0b       	sbc	r27, r27
     538:	bc 01       	movw	r22, r24
     53a:	cd 01       	movw	r24, r26
     53c:	19 d6       	rcall	.+3122   	; 0x1170 <__floatsisf>
     53e:	dc 01       	movw	r26, r24
     540:	cb 01       	movw	r24, r22
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	44 eb       	ldi	r20, 0xB4	; 180
     548:	52 e4       	ldi	r21, 0x42	; 66
     54a:	bc 01       	movw	r22, r24
     54c:	cd 01       	movw	r24, r26
     54e:	75 d5       	rcall	.+2794   	; 0x103a <__divsf3>
     550:	dc 01       	movw	r26, r24
     552:	cb 01       	movw	r24, r22
     554:	26 e6       	ldi	r18, 0x66	; 102
     556:	36 e6       	ldi	r19, 0x66	; 102
     558:	46 e3       	ldi	r20, 0x36	; 54
     55a:	51 e4       	ldi	r21, 0x41	; 65
     55c:	bc 01       	movw	r22, r24
     55e:	cd 01       	movw	r24, r26
     560:	bb d6       	rcall	.+3446   	; 0x12d8 <__mulsf3>
     562:	dc 01       	movw	r26, r24
     564:	cb 01       	movw	r24, r22
     566:	9c 01       	movw	r18, r24
     568:	ad 01       	movw	r20, r26
     56a:	60 e0       	ldi	r22, 0x00	; 0
     56c:	70 e0       	ldi	r23, 0x00	; 0
     56e:	8c e6       	ldi	r24, 0x6C	; 108
     570:	93 e4       	ldi	r25, 0x43	; 67
     572:	fa d4       	rcall	.+2548   	; 0xf68 <__subsf3>
     574:	dc 01       	movw	r26, r24
     576:	cb 01       	movw	r24, r22
     578:	9c 01       	movw	r18, r24
     57a:	ad 01       	movw	r20, r26
     57c:	60 e0       	ldi	r22, 0x00	; 0
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	8f e7       	ldi	r24, 0x7F	; 127
     582:	93 e4       	ldi	r25, 0x43	; 67
     584:	f1 d4       	rcall	.+2530   	; 0xf68 <__subsf3>
     586:	dc 01       	movw	r26, r24
     588:	cb 01       	movw	r24, r22
     58a:	bc 01       	movw	r22, r24
     58c:	cd 01       	movw	r24, r26
     58e:	bd d5       	rcall	.+2938   	; 0x110a <__fixsfsi>
     590:	dc 01       	movw	r26, r24
     592:	cb 01       	movw	r24, r22
     594:	67 df       	rcall	.-306    	; 0x464 <servo_set_duty_cycle>

     596:	0f 90       	pop	r0
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <__vector_18>:
static volatile unsigned char rxCounter[10];
volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     59e:	1f 92       	push	r1
     5a0:	0f 92       	push	r0
     5a2:	00 90 5f 00 	lds	r0, 0x005F
     5a6:	0f 92       	push	r0
     5a8:	11 24       	eor	r1, r1
     5aa:	00 90 5b 00 	lds	r0, 0x005B
     5ae:	0f 92       	push	r0
     5b0:	2f 93       	push	r18
     5b2:	3f 93       	push	r19
     5b4:	4f 93       	push	r20
     5b6:	5f 93       	push	r21
     5b8:	8f 93       	push	r24
     5ba:	9f 93       	push	r25
     5bc:	ef 93       	push	r30
     5be:	ff 93       	push	r31
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	00 d0       	rcall	.+0      	; 0x5c6 <__vector_18+0x28>
     5c6:	00 d0       	rcall	.+0      	; 0x5c8 <__vector_18+0x2a>
     5c8:	cd b7       	in	r28, 0x3d	; 61
     5ca:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     5cc:	8d ee       	ldi	r24, 0xED	; 237
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	fc 01       	movw	r30, r24
     5d2:	80 81       	ld	r24, Z
     5d4:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     5d6:	19 82       	std	Y+1, r1	; 0x01
     5d8:	a4 c0       	rjmp	.+328    	; 0x722 <__vector_18+0x184>
	{
		CANPAGE = ch << 4;
     5da:	8d ee       	ldi	r24, 0xED	; 237
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	29 81       	ldd	r18, Y+1	; 0x01
     5e0:	22 95       	swap	r18
     5e2:	20 7f       	andi	r18, 0xF0	; 240
     5e4:	fc 01       	movw	r30, r24
     5e6:	20 83       	st	Z, r18

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     5e8:	8e ee       	ldi	r24, 0xEE	; 238
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	fc 01       	movw	r30, r24
     5ee:	80 81       	ld	r24, Z
     5f0:	82 95       	swap	r24
     5f2:	86 95       	lsr	r24
     5f4:	87 70       	andi	r24, 0x07	; 7
     5f6:	88 2f       	mov	r24, r24
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	81 70       	andi	r24, 0x01	; 1
     5fc:	99 27       	eor	r25, r25
     5fe:	89 2b       	or	r24, r25
     600:	09 f4       	brne	.+2      	; 0x604 <__vector_18+0x66>
     602:	70 c0       	rjmp	.+224    	; 0x6e4 <__vector_18+0x146>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     604:	8f ee       	ldi	r24, 0xEF	; 239
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	20 e8       	ldi	r18, 0x80	; 128
     60a:	fc 01       	movw	r30, r24
     60c:	20 83       	st	Z, r18
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     60e:	8e ee       	ldi	r24, 0xEE	; 238
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	2e ee       	ldi	r18, 0xEE	; 238
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	f9 01       	movw	r30, r18
     618:	20 81       	ld	r18, Z
     61a:	2f 7d       	andi	r18, 0xDF	; 223
     61c:	fc 01       	movw	r30, r24
     61e:	20 83       	st	Z, r18

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     620:	82 ef       	ldi	r24, 0xF2	; 242
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	fc 01       	movw	r30, r24
     626:	80 81       	ld	r24, Z
     628:	82 95       	swap	r24
     62a:	86 95       	lsr	r24
     62c:	87 70       	andi	r24, 0x07	; 7
     62e:	28 2f       	mov	r18, r24
     630:	83 ef       	ldi	r24, 0xF3	; 243
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	fc 01       	movw	r30, r24
     636:	80 81       	ld	r24, Z
     638:	88 2f       	mov	r24, r24
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	88 0f       	add	r24, r24
     63e:	99 1f       	adc	r25, r25
     640:	88 0f       	add	r24, r24
     642:	99 1f       	adc	r25, r25
     644:	88 0f       	add	r24, r24
     646:	99 1f       	adc	r25, r25
     648:	82 2b       	or	r24, r18
     64a:	8c 83       	std	Y+4, r24	; 0x04

			for(i = 0; i < 8; ++i)
     64c:	1a 82       	std	Y+2, r1	; 0x02
     64e:	26 c0       	rjmp	.+76     	; 0x69c <__vector_18+0xfe>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     650:	8c 81       	ldd	r24, Y+4	; 0x04
     652:	88 2f       	mov	r24, r24
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	81 50       	subi	r24, 0x01	; 1
     658:	90 48       	sbci	r25, 0x80	; 128
     65a:	88 0f       	add	r24, r24
     65c:	99 1f       	adc	r25, r25
     65e:	8a 5f       	subi	r24, 0xFA	; 250
     660:	9e 4f       	sbci	r25, 0xFE	; 254
     662:	fc 01       	movw	r30, r24
     664:	20 81       	ld	r18, Z
     666:	31 81       	ldd	r19, Z+1	; 0x01
     668:	8c 81       	ldd	r24, Y+4	; 0x04
     66a:	88 2f       	mov	r24, r24
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	01 97       	sbiw	r24, 0x01	; 1
     670:	86 5e       	subi	r24, 0xE6	; 230
     672:	9e 4f       	sbci	r25, 0xFE	; 254
     674:	fc 01       	movw	r30, r24
     676:	80 81       	ld	r24, Z
     678:	48 2f       	mov	r20, r24
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	8a 81       	ldd	r24, Y+2	; 0x02
     67e:	88 2f       	mov	r24, r24
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	84 0f       	add	r24, r20
     684:	95 1f       	adc	r25, r21
     686:	82 0f       	add	r24, r18
     688:	93 1f       	adc	r25, r19
     68a:	2a ef       	ldi	r18, 0xFA	; 250
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	f9 01       	movw	r30, r18
     690:	20 81       	ld	r18, Z
     692:	fc 01       	movw	r30, r24
     694:	20 83       	st	Z, r18
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     696:	8a 81       	ldd	r24, Y+2	; 0x02
     698:	8f 5f       	subi	r24, 0xFF	; 255
     69a:	8a 83       	std	Y+2, r24	; 0x02
     69c:	8a 81       	ldd	r24, Y+2	; 0x02
     69e:	88 30       	cpi	r24, 0x08	; 8
     6a0:	b8 f2       	brcs	.-82     	; 0x650 <__vector_18+0xb2>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     6a2:	8c 81       	ldd	r24, Y+4	; 0x04
     6a4:	88 2f       	mov	r24, r24
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	01 97       	sbiw	r24, 0x01	; 1
     6aa:	86 5e       	subi	r24, 0xE6	; 230
     6ac:	9e 4f       	sbci	r25, 0xFE	; 254
     6ae:	fc 01       	movw	r30, r24
     6b0:	20 81       	ld	r18, Z
     6b2:	2f 5f       	subi	r18, 0xFF	; 255
     6b4:	fc 01       	movw	r30, r24
     6b6:	20 83       	st	Z, r18
     6b8:	25 30       	cpi	r18, 0x05	; 5
     6ba:	41 f4       	brne	.+16     	; 0x6cc <__vector_18+0x12e>
				*(rxWrIndex + ide - 1) = 0;
     6bc:	8c 81       	ldd	r24, Y+4	; 0x04
     6be:	88 2f       	mov	r24, r24
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	01 97       	sbiw	r24, 0x01	; 1
     6c4:	86 5e       	subi	r24, 0xE6	; 230
     6c6:	9e 4f       	sbci	r25, 0xFE	; 254
     6c8:	fc 01       	movw	r30, r24
     6ca:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     6cc:	8c 81       	ldd	r24, Y+4	; 0x04
     6ce:	88 2f       	mov	r24, r24
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	01 97       	sbiw	r24, 0x01	; 1
     6d4:	82 5d       	subi	r24, 0xD2	; 210
     6d6:	9e 4f       	sbci	r25, 0xFE	; 254
     6d8:	fc 01       	movw	r30, r24
     6da:	20 81       	ld	r18, Z
     6dc:	2f 5f       	subi	r18, 0xFF	; 255
     6de:	fc 01       	movw	r30, r24
     6e0:	20 83       	st	Z, r18

			break;
     6e2:	23 c0       	rjmp	.+70     	; 0x72a <__vector_18+0x18c>
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     6e4:	8e ee       	ldi	r24, 0xEE	; 238
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	fc 01       	movw	r30, r24
     6ea:	80 81       	ld	r24, Z
     6ec:	82 95       	swap	r24
     6ee:	86 95       	lsr	r24
     6f0:	86 95       	lsr	r24
     6f2:	83 70       	andi	r24, 0x03	; 3
     6f4:	88 2f       	mov	r24, r24
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	81 70       	andi	r24, 0x01	; 1
     6fa:	99 27       	eor	r25, r25
     6fc:	89 2b       	or	r24, r25
     6fe:	71 f0       	breq	.+28     	; 0x71c <__vector_18+0x17e>
		{
			CANCDMOB = 0; // disable mob
     700:	8f ee       	ldi	r24, 0xEF	; 239
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	fc 01       	movw	r30, r24
     706:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     708:	8e ee       	ldi	r24, 0xEE	; 238
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	2e ee       	ldi	r18, 0xEE	; 238
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	f9 01       	movw	r30, r18
     712:	20 81       	ld	r18, Z
     714:	2f 7b       	andi	r18, 0xBF	; 191
     716:	fc 01       	movw	r30, r24
     718:	20 83       	st	Z, r18

			break;
     71a:	07 c0       	rjmp	.+14     	; 0x72a <__vector_18+0x18c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     71c:	89 81       	ldd	r24, Y+1	; 0x01
     71e:	8f 5f       	subi	r24, 0xFF	; 255
     720:	89 83       	std	Y+1, r24	; 0x01
     722:	89 81       	ldd	r24, Y+1	; 0x01
     724:	8f 30       	cpi	r24, 0x0F	; 15
     726:	08 f4       	brcc	.+2      	; 0x72a <__vector_18+0x18c>
     728:	58 cf       	rjmp	.-336    	; 0x5da <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     72a:	8d ee       	ldi	r24, 0xED	; 237
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	2b 81       	ldd	r18, Y+3	; 0x03
     730:	fc 01       	movw	r30, r24
     732:	20 83       	st	Z, r18
	CANGIT = CANGIT; // zato sto tako treba.
     734:	8a ed       	ldi	r24, 0xDA	; 218
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	2a ed       	ldi	r18, 0xDA	; 218
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	f9 01       	movw	r30, r18
     73e:	20 81       	ld	r18, Z
     740:	fc 01       	movw	r30, r24
     742:	20 83       	st	Z, r18
}
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	ff 91       	pop	r31
     752:	ef 91       	pop	r30
     754:	9f 91       	pop	r25
     756:	8f 91       	pop	r24
     758:	5f 91       	pop	r21
     75a:	4f 91       	pop	r20
     75c:	3f 91       	pop	r19
     75e:	2f 91       	pop	r18
     760:	0f 90       	pop	r0
     762:	00 92 5b 00 	sts	0x005B, r0
     766:	0f 90       	pop	r0
     768:	00 92 5f 00 	sts	0x005F, r0
     76c:	0f 90       	pop	r0
     76e:	1f 90       	pop	r1
     770:	18 95       	reti

00000772 <CAN_InitModule>:


static void CAN_InitModule(void)
{
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	00 d0       	rcall	.+0      	; 0x778 <CAN_InitModule+0x6>
     778:	cd b7       	in	r28, 0x3d	; 61
     77a:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     77c:	88 ed       	ldi	r24, 0xD8	; 216
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	21 e0       	ldi	r18, 0x01	; 1
     782:	fc 01       	movw	r30, r24
     784:	20 83       	st	Z, r18

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     786:	19 82       	std	Y+1, r1	; 0x01
     788:	3e c0       	rjmp	.+124    	; 0x806 <CAN_InitModule+0x94>
	{
		CANPAGE = ch << 4;
     78a:	8d ee       	ldi	r24, 0xED	; 237
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	29 81       	ldd	r18, Y+1	; 0x01
     790:	22 95       	swap	r18
     792:	20 7f       	andi	r18, 0xF0	; 240
     794:	fc 01       	movw	r30, r24
     796:	20 83       	st	Z, r18

		CANSTMOB = 0;
     798:	8e ee       	ldi	r24, 0xEE	; 238
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	fc 01       	movw	r30, r24
     79e:	10 82       	st	Z, r1
		CANCDMOB = 0;
     7a0:	8f ee       	ldi	r24, 0xEF	; 239
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	fc 01       	movw	r30, r24
     7a6:	10 82       	st	Z, r1

		CANIDT1 = 0;
     7a8:	83 ef       	ldi	r24, 0xF3	; 243
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	fc 01       	movw	r30, r24
     7ae:	10 82       	st	Z, r1
		CANIDT2 = 0;
     7b0:	82 ef       	ldi	r24, 0xF2	; 242
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	fc 01       	movw	r30, r24
     7b6:	10 82       	st	Z, r1
		CANIDT3 = 0;
     7b8:	81 ef       	ldi	r24, 0xF1	; 241
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	fc 01       	movw	r30, r24
     7be:	10 82       	st	Z, r1
		CANIDT4 = 0;
     7c0:	80 ef       	ldi	r24, 0xF0	; 240
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	fc 01       	movw	r30, r24
     7c6:	10 82       	st	Z, r1
		CANIDM1 = 0;
     7c8:	87 ef       	ldi	r24, 0xF7	; 247
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	fc 01       	movw	r30, r24
     7ce:	10 82       	st	Z, r1
		CANIDM2 = 0;
     7d0:	86 ef       	ldi	r24, 0xF6	; 246
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	fc 01       	movw	r30, r24
     7d6:	10 82       	st	Z, r1
		CANIDM3 = 0;
     7d8:	85 ef       	ldi	r24, 0xF5	; 245
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	fc 01       	movw	r30, r24
     7de:	10 82       	st	Z, r1
		CANIDM4 = 0;
     7e0:	84 ef       	ldi	r24, 0xF4	; 244
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	fc 01       	movw	r30, r24
     7e6:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     7e8:	1a 82       	std	Y+2, r1	; 0x02
     7ea:	07 c0       	rjmp	.+14     	; 0x7fa <CAN_InitModule+0x88>
			CANMSG = 0;
     7ec:	8a ef       	ldi	r24, 0xFA	; 250
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	fc 01       	movw	r30, r24
     7f2:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     7f4:	8a 81       	ldd	r24, Y+2	; 0x02
     7f6:	8f 5f       	subi	r24, 0xFF	; 255
     7f8:	8a 83       	std	Y+2, r24	; 0x02
     7fa:	8a 81       	ldd	r24, Y+2	; 0x02
     7fc:	88 30       	cpi	r24, 0x08	; 8
     7fe:	b0 f3       	brcs	.-20     	; 0x7ec <CAN_InitModule+0x7a>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     800:	89 81       	ldd	r24, Y+1	; 0x01
     802:	8f 5f       	subi	r24, 0xFF	; 255
     804:	89 83       	std	Y+1, r24	; 0x01
     806:	89 81       	ldd	r24, Y+1	; 0x01
     808:	8f 30       	cpi	r24, 0x0F	; 15
     80a:	08 f4       	brcc	.+2      	; 0x80e <CAN_InitModule+0x9c>
     80c:	be cf       	rjmp	.-132    	; 0x78a <CAN_InitModule+0x18>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     80e:	88 ed       	ldi	r24, 0xD8	; 216
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	22 e0       	ldi	r18, 0x02	; 2
     814:	fc 01       	movw	r30, r24
     816:	20 83       	st	Z, r18

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     818:	82 ee       	ldi	r24, 0xE2	; 226
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	21 e0       	ldi	r18, 0x01	; 1
     81e:	fc 01       	movw	r30, r24
     820:	20 83       	st	Z, r18
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     822:	83 ee       	ldi	r24, 0xE3	; 227
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	28 e0       	ldi	r18, 0x08	; 8
     828:	fc 01       	movw	r30, r24
     82a:	20 83       	st	Z, r18
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     82c:	84 ee       	ldi	r24, 0xE4	; 228
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	2e e5       	ldi	r18, 0x5E	; 94
     832:	fc 01       	movw	r30, r24
     834:	20 83       	st	Z, r18

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     836:	85 ee       	ldi	r24, 0xE5	; 229
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	fc 01       	movw	r30, r24
     83c:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     83e:	8b ed       	ldi	r24, 0xDB	; 219
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	20 eb       	ldi	r18, 0xB0	; 176
     844:	fc 01       	movw	r30, r24
     846:	20 83       	st	Z, r18
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     848:	8f ed       	ldi	r24, 0xDF	; 223
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	2f e7       	ldi	r18, 0x7F	; 127
     84e:	fc 01       	movw	r30, r24
     850:	20 83       	st	Z, r18
	CANIE2 = 0xFF;
     852:	8e ed       	ldi	r24, 0xDE	; 222
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	2f ef       	ldi	r18, 0xFF	; 255
     858:	fc 01       	movw	r30, r24
     85a:	20 83       	st	Z, r18
	sei();
     85c:	78 94       	sei
}
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	08 95       	ret

00000868 <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	00 d0       	rcall	.+0      	; 0x86e <CAN_InitRxMob+0x6>
     86e:	00 d0       	rcall	.+0      	; 0x870 <CAN_InitRxMob+0x8>
     870:	cd b7       	in	r28, 0x3d	; 61
     872:	de b7       	in	r29, 0x3e	; 62
     874:	9c 83       	std	Y+4, r25	; 0x04
     876:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     878:	8d ee       	ldi	r24, 0xED	; 237
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	fc 01       	movw	r30, r24
     87e:	80 81       	ld	r24, Z
     880:	8a 83       	std	Y+2, r24	; 0x02

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     882:	00 00       	nop
     884:	89 ed       	ldi	r24, 0xD9	; 217
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	fc 01       	movw	r30, r24
     88a:	80 81       	ld	r24, Z
     88c:	82 95       	swap	r24
     88e:	8f 70       	andi	r24, 0x0F	; 15
     890:	88 2f       	mov	r24, r24
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	81 70       	andi	r24, 0x01	; 1
     896:	99 27       	eor	r25, r25
     898:	89 2b       	or	r24, r25
     89a:	a1 f7       	brne	.-24     	; 0x884 <CAN_InitRxMob+0x1c>
     89c:	89 ed       	ldi	r24, 0xD9	; 217
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	fc 01       	movw	r30, r24
     8a2:	80 81       	ld	r24, Z
     8a4:	86 95       	lsr	r24
     8a6:	86 95       	lsr	r24
     8a8:	86 95       	lsr	r24
     8aa:	88 2f       	mov	r24, r24
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	81 70       	andi	r24, 0x01	; 1
     8b0:	99 27       	eor	r25, r25
     8b2:	89 2b       	or	r24, r25
     8b4:	39 f7       	brne	.-50     	; 0x884 <CAN_InitRxMob+0x1c>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     8b6:	19 82       	std	Y+1, r1	; 0x01
     8b8:	49 c0       	rjmp	.+146    	; 0x94c <CAN_InitRxMob+0xe4>
	{
		CANPAGE = ch << 4;
     8ba:	8d ee       	ldi	r24, 0xED	; 237
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	29 81       	ldd	r18, Y+1	; 0x01
     8c0:	22 95       	swap	r18
     8c2:	20 7f       	andi	r18, 0xF0	; 240
     8c4:	fc 01       	movw	r30, r24
     8c6:	20 83       	st	Z, r18

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     8c8:	8f ee       	ldi	r24, 0xEF	; 239
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	fc 01       	movw	r30, r24
     8ce:	80 81       	ld	r24, Z
     8d0:	82 95       	swap	r24
     8d2:	86 95       	lsr	r24
     8d4:	86 95       	lsr	r24
     8d6:	83 70       	andi	r24, 0x03	; 3
     8d8:	88 23       	and	r24, r24
     8da:	21 f0       	breq	.+8      	; 0x8e4 <CAN_InitRxMob+0x7c>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     8dc:	89 81       	ldd	r24, Y+1	; 0x01
     8de:	8f 5f       	subi	r24, 0xFF	; 255
     8e0:	89 83       	std	Y+1, r24	; 0x01
     8e2:	34 c0       	rjmp	.+104    	; 0x94c <CAN_InitRxMob+0xe4>
		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     8e4:	8f ee       	ldi	r24, 0xEF	; 239
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	2f e0       	ldi	r18, 0x0F	; 15
     8ea:	fc 01       	movw	r30, r24
     8ec:	20 83       	st	Z, r18

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     8ee:	83 ef       	ldi	r24, 0xF3	; 243
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	2b 81       	ldd	r18, Y+3	; 0x03
     8f4:	3c 81       	ldd	r19, Y+4	; 0x04
     8f6:	33 27       	eor	r19, r19
     8f8:	36 95       	lsr	r19
     8fa:	27 95       	ror	r18
     8fc:	36 95       	lsr	r19
     8fe:	27 95       	ror	r18
     900:	36 95       	lsr	r19
     902:	27 95       	ror	r18
     904:	fc 01       	movw	r30, r24
     906:	20 83       	st	Z, r18
		CANIDT2 = (ide & 0x00FF) << 5;
     908:	82 ef       	ldi	r24, 0xF2	; 242
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	2b 81       	ldd	r18, Y+3	; 0x03
     90e:	22 95       	swap	r18
     910:	22 0f       	add	r18, r18
     912:	20 7e       	andi	r18, 0xE0	; 224
     914:	fc 01       	movw	r30, r24
     916:	20 83       	st	Z, r18

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     918:	86 ef       	ldi	r24, 0xF6	; 246
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	20 ee       	ldi	r18, 0xE0	; 224
     91e:	fc 01       	movw	r30, r24
     920:	20 83       	st	Z, r18
		CANIDM1 = 0xFF;
     922:	87 ef       	ldi	r24, 0xF7	; 247
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	2f ef       	ldi	r18, 0xFF	; 255
     928:	fc 01       	movw	r30, r24
     92a:	20 83       	st	Z, r18

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     92c:	8f ee       	ldi	r24, 0xEF	; 239
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	2f ee       	ldi	r18, 0xEF	; 239
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	f9 01       	movw	r30, r18
     936:	20 81       	ld	r18, Z
     938:	20 68       	ori	r18, 0x80	; 128
     93a:	fc 01       	movw	r30, r24
     93c:	20 83       	st	Z, r18

		CANPAGE = tempPage;
     93e:	8d ee       	ldi	r24, 0xED	; 237
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	2a 81       	ldd	r18, Y+2	; 0x02
     944:	fc 01       	movw	r30, r24
     946:	20 83       	st	Z, r18

		return 1;
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	0a c0       	rjmp	.+20     	; 0x960 <CAN_InitRxMob+0xf8>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     94c:	89 81       	ldd	r24, Y+1	; 0x01
     94e:	8f 30       	cpi	r24, 0x0F	; 15
     950:	08 f4       	brcc	.+2      	; 0x954 <CAN_InitRxMob+0xec>
     952:	b3 cf       	rjmp	.-154    	; 0x8ba <CAN_InitRxMob+0x52>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     954:	8d ee       	ldi	r24, 0xED	; 237
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	2a 81       	ldd	r18, Y+2	; 0x02
     95a:	fc 01       	movw	r30, r24
     95c:	20 83       	st	Z, r18

	return 0;
     95e:	80 e0       	ldi	r24, 0x00	; 0
}
     960:	0f 90       	pop	r0
     962:	0f 90       	pop	r0
     964:	0f 90       	pop	r0
     966:	0f 90       	pop	r0
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	08 95       	ret

0000096e <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
     96e:	0f 93       	push	r16
     970:	1f 93       	push	r17
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	00 d0       	rcall	.+0      	; 0x978 <CAN_Init+0xa>
     978:	cd b7       	in	r28, 0x3d	; 61
     97a:	de b7       	in	r29, 0x3e	; 62
     97c:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
     97e:	f9 de       	rcall	.-526    	; 0x772 <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     980:	19 82       	std	Y+1, r1	; 0x01
     982:	2e c0       	rjmp	.+92     	; 0x9e0 <CAN_Init+0x72>
	{
		CAN_InitRxMob(i + 1);
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	88 2f       	mov	r24, r24
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	01 96       	adiw	r24, 0x01	; 1
     98c:	6d df       	rcall	.-294    	; 0x868 <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     98e:	89 81       	ldd	r24, Y+1	; 0x01
     990:	88 2f       	mov	r24, r24
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	88 0f       	add	r24, r24
     996:	99 1f       	adc	r25, r25
     998:	8c 01       	movw	r16, r24
     99a:	0a 5f       	subi	r16, 0xFA	; 250
     99c:	1e 4f       	sbci	r17, 0xFE	; 254
     99e:	61 e0       	ldi	r22, 0x01	; 1
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	85 e0       	ldi	r24, 0x05	; 5
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	fb d4       	rcall	.+2550   	; 0x139e <calloc>
     9a8:	f8 01       	movw	r30, r16
     9aa:	91 83       	std	Z+1, r25	; 0x01
     9ac:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     9ae:	89 81       	ldd	r24, Y+1	; 0x01
     9b0:	88 2f       	mov	r24, r24
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	29 81       	ldd	r18, Y+1	; 0x01
     9b6:	22 2f       	mov	r18, r18
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	49 81       	ldd	r20, Y+1	; 0x01
     9bc:	44 2f       	mov	r20, r20
     9be:	50 e0       	ldi	r21, 0x00	; 0
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	42 5d       	subi	r20, 0xD2	; 210
     9c4:	5e 4f       	sbci	r21, 0xFE	; 254
     9c6:	fa 01       	movw	r30, r20
     9c8:	60 83       	st	Z, r22
     9ca:	2c 5d       	subi	r18, 0xDC	; 220
     9cc:	3e 4f       	sbci	r19, 0xFE	; 254
     9ce:	f9 01       	movw	r30, r18
     9d0:	60 83       	st	Z, r22
     9d2:	86 5e       	subi	r24, 0xE6	; 230
     9d4:	9e 4f       	sbci	r25, 0xFE	; 254
     9d6:	fc 01       	movw	r30, r24
     9d8:	60 83       	st	Z, r22

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     9da:	89 81       	ldd	r24, Y+1	; 0x01
     9dc:	8f 5f       	subi	r24, 0xFF	; 255
     9de:	89 83       	std	Y+1, r24	; 0x01
     9e0:	99 81       	ldd	r25, Y+1	; 0x01
     9e2:	8a 81       	ldd	r24, Y+2	; 0x02
     9e4:	98 17       	cp	r25, r24
     9e6:	70 f2       	brcs	.-100    	; 0x984 <CAN_Init+0x16>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	08 95       	ret

000009f6 <timer_init>:
    timer_callback = callback;
}


void timer_init(unsigned int freq)
{
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	00 d0       	rcall	.+0      	; 0xa00 <timer_init+0xa>
     a00:	cd b7       	in	r28, 0x3d	; 61
     a02:	de b7       	in	r29, 0x3e	; 62
     a04:	9a 83       	std	Y+2, r25	; 0x02
     a06:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
     a08:	80 e8       	ldi	r24, 0x80	; 128
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	fc 01       	movw	r30, r24
     a0e:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
     a10:	81 e8       	ldi	r24, 0x81	; 129
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	29 e0       	ldi	r18, 0x09	; 9
     a16:	fc 01       	movw	r30, r24
     a18:	20 83       	st	Z, r18
	OCR1A = (double)F_CPU / (double)freq + 0.5;
     a1a:	08 e8       	ldi	r16, 0x88	; 136
     a1c:	10 e0       	ldi	r17, 0x00	; 0
     a1e:	89 81       	ldd	r24, Y+1	; 0x01
     a20:	9a 81       	ldd	r25, Y+2	; 0x02
     a22:	cc 01       	movw	r24, r24
     a24:	a0 e0       	ldi	r26, 0x00	; 0
     a26:	b0 e0       	ldi	r27, 0x00	; 0
     a28:	bc 01       	movw	r22, r24
     a2a:	cd 01       	movw	r24, r26
     a2c:	9f d3       	rcall	.+1854   	; 0x116c <__floatunsisf>
     a2e:	dc 01       	movw	r26, r24
     a30:	cb 01       	movw	r24, r22
     a32:	9c 01       	movw	r18, r24
     a34:	ad 01       	movw	r20, r26
     a36:	60 e8       	ldi	r22, 0x80	; 128
     a38:	76 e9       	ldi	r23, 0x96	; 150
     a3a:	88 e1       	ldi	r24, 0x18	; 24
     a3c:	9b e4       	ldi	r25, 0x4B	; 75
     a3e:	fd d2       	rcall	.+1530   	; 0x103a <__divsf3>
     a40:	dc 01       	movw	r26, r24
     a42:	cb 01       	movw	r24, r22
     a44:	20 e0       	ldi	r18, 0x00	; 0
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	40 e0       	ldi	r20, 0x00	; 0
     a4a:	5f e3       	ldi	r21, 0x3F	; 63
     a4c:	bc 01       	movw	r22, r24
     a4e:	cd 01       	movw	r24, r26
     a50:	8c d2       	rcall	.+1304   	; 0xf6a <__addsf3>
     a52:	dc 01       	movw	r26, r24
     a54:	cb 01       	movw	r24, r22
     a56:	bc 01       	movw	r22, r24
     a58:	cd 01       	movw	r24, r26
     a5a:	5c d3       	rcall	.+1720   	; 0x1114 <__fixunssfsi>
     a5c:	dc 01       	movw	r26, r24
     a5e:	cb 01       	movw	r24, r22
     a60:	f8 01       	movw	r30, r16
     a62:	91 83       	std	Z+1, r25	; 0x01
     a64:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
     a66:	8f e6       	ldi	r24, 0x6F	; 111
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	22 e0       	ldi	r18, 0x02	; 2
     a6c:	fc 01       	movw	r30, r24
     a6e:	20 83       	st	Z, r18

	SREG |= 0x80;
     a70:	8f e5       	ldi	r24, 0x5F	; 95
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	2f e5       	ldi	r18, 0x5F	; 95
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	f9 01       	movw	r30, r18
     a7a:	20 81       	ld	r18, Z
     a7c:	20 68       	ori	r18, 0x80	; 128
     a7e:	fc 01       	movw	r30, r24
     a80:	20 83       	st	Z, r18
}
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	08 95       	ret

00000a90 <__vector_12>:


ISR(TIMER1_COMPA_vect)
{
     a90:	1f 92       	push	r1
     a92:	0f 92       	push	r0
     a94:	00 90 5f 00 	lds	r0, 0x005F
     a98:	0f 92       	push	r0
     a9a:	11 24       	eor	r1, r1
     a9c:	00 90 5b 00 	lds	r0, 0x005B
     aa0:	0f 92       	push	r0
     aa2:	2f 93       	push	r18
     aa4:	3f 93       	push	r19
     aa6:	4f 93       	push	r20
     aa8:	5f 93       	push	r21
     aaa:	6f 93       	push	r22
     aac:	7f 93       	push	r23
     aae:	8f 93       	push	r24
     ab0:	9f 93       	push	r25
     ab2:	af 93       	push	r26
     ab4:	bf 93       	push	r27
     ab6:	ef 93       	push	r30
     ab8:	ff 93       	push	r31
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	cd b7       	in	r28, 0x3d	; 61
     ac0:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
     ac2:	80 91 3c 01 	lds	r24, 0x013C
     ac6:	90 91 3d 01 	lds	r25, 0x013D
     aca:	89 2b       	or	r24, r25
     acc:	31 f0       	breq	.+12     	; 0xada <__vector_12+0x4a>
        timer_callback();
     ace:	80 91 3c 01 	lds	r24, 0x013C
     ad2:	90 91 3d 01 	lds	r25, 0x013D
     ad6:	fc 01       	movw	r30, r24
     ad8:	09 95       	icall
	sys_time++;
     ada:	80 91 38 01 	lds	r24, 0x0138
     ade:	90 91 39 01 	lds	r25, 0x0139
     ae2:	a0 91 3a 01 	lds	r26, 0x013A
     ae6:	b0 91 3b 01 	lds	r27, 0x013B
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	a1 1d       	adc	r26, r1
     aee:	b1 1d       	adc	r27, r1
     af0:	80 93 38 01 	sts	0x0138, r24
     af4:	90 93 39 01 	sts	0x0139, r25
     af8:	a0 93 3a 01 	sts	0x013A, r26
     afc:	b0 93 3b 01 	sts	0x013B, r27
}
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	ff 91       	pop	r31
     b06:	ef 91       	pop	r30
     b08:	bf 91       	pop	r27
     b0a:	af 91       	pop	r26
     b0c:	9f 91       	pop	r25
     b0e:	8f 91       	pop	r24
     b10:	7f 91       	pop	r23
     b12:	6f 91       	pop	r22
     b14:	5f 91       	pop	r21
     b16:	4f 91       	pop	r20
     b18:	3f 91       	pop	r19
     b1a:	2f 91       	pop	r18
     b1c:	0f 90       	pop	r0
     b1e:	00 92 5b 00 	sts	0x005B, r0
     b22:	0f 90       	pop	r0
     b24:	00 92 5f 00 	sts	0x005F, r0
     b28:	0f 90       	pop	r0
     b2a:	1f 90       	pop	r1
     b2c:	18 95       	reti

00000b2e <system_init>:

void system_init(void)
{
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	cd b7       	in	r28, 0x3d	; 61
     b34:	de b7       	in	r29, 0x3e	; 62
     b36:	6c 97       	sbiw	r28, 0x1c	; 28
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	de bf       	out	0x3e, r29	; 62
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	cd bf       	out	0x3d, r28	; 61
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	aa e7       	ldi	r26, 0x7A	; 122
     b48:	b4 e4       	ldi	r27, 0x44	; 68
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	9a 83       	std	Y+2, r25	; 0x02
     b4e:	ab 83       	std	Y+3, r26	; 0x03
     b50:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	30 e4       	ldi	r19, 0x40	; 64
     b56:	4c e1       	ldi	r20, 0x1C	; 28
     b58:	55 e4       	ldi	r21, 0x45	; 69
     b5a:	69 81       	ldd	r22, Y+1	; 0x01
     b5c:	7a 81       	ldd	r23, Y+2	; 0x02
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	9c 81       	ldd	r25, Y+4	; 0x04
     b62:	ba d3       	rcall	.+1908   	; 0x12d8 <__mulsf3>
     b64:	dc 01       	movw	r26, r24
     b66:	cb 01       	movw	r24, r22
     b68:	8d 83       	std	Y+5, r24	; 0x05
     b6a:	9e 83       	std	Y+6, r25	; 0x06
     b6c:	af 83       	std	Y+7, r26	; 0x07
     b6e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	40 e8       	ldi	r20, 0x80	; 128
     b76:	5f e3       	ldi	r21, 0x3F	; 63
     b78:	6d 81       	ldd	r22, Y+5	; 0x05
     b7a:	7e 81       	ldd	r23, Y+6	; 0x06
     b7c:	8f 81       	ldd	r24, Y+7	; 0x07
     b7e:	98 85       	ldd	r25, Y+8	; 0x08
     b80:	58 d2       	rcall	.+1200   	; 0x1032 <__cmpsf2>
     b82:	88 23       	and	r24, r24
     b84:	2c f4       	brge	.+10     	; 0xb90 <system_init+0x62>
		__ticks = 1;
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	9a 87       	std	Y+10, r25	; 0x0a
     b8c:	89 87       	std	Y+9, r24	; 0x09
     b8e:	3b c0       	rjmp	.+118    	; 0xc06 <system_init+0xd8>
	else if (__tmp > 65535)
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	3f ef       	ldi	r19, 0xFF	; 255
     b94:	4f e7       	ldi	r20, 0x7F	; 127
     b96:	57 e4       	ldi	r21, 0x47	; 71
     b98:	6d 81       	ldd	r22, Y+5	; 0x05
     b9a:	7e 81       	ldd	r23, Y+6	; 0x06
     b9c:	8f 81       	ldd	r24, Y+7	; 0x07
     b9e:	98 85       	ldd	r25, Y+8	; 0x08
     ba0:	97 d3       	rcall	.+1838   	; 0x12d0 <__gesf2>
     ba2:	18 16       	cp	r1, r24
     ba4:	3c f5       	brge	.+78     	; 0xbf4 <system_init+0xc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	40 e2       	ldi	r20, 0x20	; 32
     bac:	51 e4       	ldi	r21, 0x41	; 65
     bae:	69 81       	ldd	r22, Y+1	; 0x01
     bb0:	7a 81       	ldd	r23, Y+2	; 0x02
     bb2:	8b 81       	ldd	r24, Y+3	; 0x03
     bb4:	9c 81       	ldd	r25, Y+4	; 0x04
     bb6:	90 d3       	rcall	.+1824   	; 0x12d8 <__mulsf3>
     bb8:	dc 01       	movw	r26, r24
     bba:	cb 01       	movw	r24, r22
     bbc:	bc 01       	movw	r22, r24
     bbe:	cd 01       	movw	r24, r26
     bc0:	a9 d2       	rcall	.+1362   	; 0x1114 <__fixunssfsi>
     bc2:	dc 01       	movw	r26, r24
     bc4:	cb 01       	movw	r24, r22
     bc6:	9a 87       	std	Y+10, r25	; 0x0a
     bc8:	89 87       	std	Y+9, r24	; 0x09
     bca:	0f c0       	rjmp	.+30     	; 0xbea <system_init+0xbc>
     bcc:	8a ef       	ldi	r24, 0xFA	; 250
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	9c 87       	std	Y+12, r25	; 0x0c
     bd2:	8b 87       	std	Y+11, r24	; 0x0b
     bd4:	8b 85       	ldd	r24, Y+11	; 0x0b
     bd6:	9c 85       	ldd	r25, Y+12	; 0x0c
     bd8:	01 97       	sbiw	r24, 0x01	; 1
     bda:	f1 f7       	brne	.-4      	; 0xbd8 <system_init+0xaa>
     bdc:	9c 87       	std	Y+12, r25	; 0x0c
     bde:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be0:	89 85       	ldd	r24, Y+9	; 0x09
     be2:	9a 85       	ldd	r25, Y+10	; 0x0a
     be4:	01 97       	sbiw	r24, 0x01	; 1
     be6:	9a 87       	std	Y+10, r25	; 0x0a
     be8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bea:	89 85       	ldd	r24, Y+9	; 0x09
     bec:	9a 85       	ldd	r25, Y+10	; 0x0a
     bee:	89 2b       	or	r24, r25
     bf0:	69 f7       	brne	.-38     	; 0xbcc <system_init+0x9e>
     bf2:	13 c0       	rjmp	.+38     	; 0xc1a <system_init+0xec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bf4:	6d 81       	ldd	r22, Y+5	; 0x05
     bf6:	7e 81       	ldd	r23, Y+6	; 0x06
     bf8:	8f 81       	ldd	r24, Y+7	; 0x07
     bfa:	98 85       	ldd	r25, Y+8	; 0x08
     bfc:	8b d2       	rcall	.+1302   	; 0x1114 <__fixunssfsi>
     bfe:	dc 01       	movw	r26, r24
     c00:	cb 01       	movw	r24, r22
     c02:	9a 87       	std	Y+10, r25	; 0x0a
     c04:	89 87       	std	Y+9, r24	; 0x09
     c06:	89 85       	ldd	r24, Y+9	; 0x09
     c08:	9a 85       	ldd	r25, Y+10	; 0x0a
     c0a:	9e 87       	std	Y+14, r25	; 0x0e
     c0c:	8d 87       	std	Y+13, r24	; 0x0d
     c0e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c10:	9e 85       	ldd	r25, Y+14	; 0x0e
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <system_init+0xe4>
     c16:	9e 87       	std	Y+14, r25	; 0x0e
     c18:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1000);
	DDRG = 0xff;
     c1a:	83 e3       	ldi	r24, 0x33	; 51
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	2f ef       	ldi	r18, 0xFF	; 255
     c20:	fc 01       	movw	r30, r24
     c22:	20 83       	st	Z, r18
	PORTG = 0xFF;
     c24:	84 e3       	ldi	r24, 0x34	; 52
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	2f ef       	ldi	r18, 0xFF	; 255
     c2a:	fc 01       	movw	r30, r24
     c2c:	20 83       	st	Z, r18
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	aa e7       	ldi	r26, 0x7A	; 122
     c34:	b4 e4       	ldi	r27, 0x44	; 68
     c36:	8f 87       	std	Y+15, r24	; 0x0f
     c38:	98 8b       	std	Y+16, r25	; 0x10
     c3a:	a9 8b       	std	Y+17, r26	; 0x11
     c3c:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e4       	ldi	r19, 0x40	; 64
     c42:	4c e1       	ldi	r20, 0x1C	; 28
     c44:	55 e4       	ldi	r21, 0x45	; 69
     c46:	6f 85       	ldd	r22, Y+15	; 0x0f
     c48:	78 89       	ldd	r23, Y+16	; 0x10
     c4a:	89 89       	ldd	r24, Y+17	; 0x11
     c4c:	9a 89       	ldd	r25, Y+18	; 0x12
     c4e:	44 d3       	rcall	.+1672   	; 0x12d8 <__mulsf3>
     c50:	dc 01       	movw	r26, r24
     c52:	cb 01       	movw	r24, r22
     c54:	8b 8b       	std	Y+19, r24	; 0x13
     c56:	9c 8b       	std	Y+20, r25	; 0x14
     c58:	ad 8b       	std	Y+21, r26	; 0x15
     c5a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	40 e8       	ldi	r20, 0x80	; 128
     c62:	5f e3       	ldi	r21, 0x3F	; 63
     c64:	6b 89       	ldd	r22, Y+19	; 0x13
     c66:	7c 89       	ldd	r23, Y+20	; 0x14
     c68:	8d 89       	ldd	r24, Y+21	; 0x15
     c6a:	9e 89       	ldd	r25, Y+22	; 0x16
     c6c:	e2 d1       	rcall	.+964    	; 0x1032 <__cmpsf2>
     c6e:	88 23       	and	r24, r24
     c70:	2c f4       	brge	.+10     	; 0xc7c <system_init+0x14e>
		__ticks = 1;
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	98 8f       	std	Y+24, r25	; 0x18
     c78:	8f 8b       	std	Y+23, r24	; 0x17
     c7a:	3b c0       	rjmp	.+118    	; 0xcf2 <system_init+0x1c4>
	else if (__tmp > 65535)
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	3f ef       	ldi	r19, 0xFF	; 255
     c80:	4f e7       	ldi	r20, 0x7F	; 127
     c82:	57 e4       	ldi	r21, 0x47	; 71
     c84:	6b 89       	ldd	r22, Y+19	; 0x13
     c86:	7c 89       	ldd	r23, Y+20	; 0x14
     c88:	8d 89       	ldd	r24, Y+21	; 0x15
     c8a:	9e 89       	ldd	r25, Y+22	; 0x16
     c8c:	21 d3       	rcall	.+1602   	; 0x12d0 <__gesf2>
     c8e:	18 16       	cp	r1, r24
     c90:	3c f5       	brge	.+78     	; 0xce0 <system_init+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e2       	ldi	r20, 0x20	; 32
     c98:	51 e4       	ldi	r21, 0x41	; 65
     c9a:	6f 85       	ldd	r22, Y+15	; 0x0f
     c9c:	78 89       	ldd	r23, Y+16	; 0x10
     c9e:	89 89       	ldd	r24, Y+17	; 0x11
     ca0:	9a 89       	ldd	r25, Y+18	; 0x12
     ca2:	1a d3       	rcall	.+1588   	; 0x12d8 <__mulsf3>
     ca4:	dc 01       	movw	r26, r24
     ca6:	cb 01       	movw	r24, r22
     ca8:	bc 01       	movw	r22, r24
     caa:	cd 01       	movw	r24, r26
     cac:	33 d2       	rcall	.+1126   	; 0x1114 <__fixunssfsi>
     cae:	dc 01       	movw	r26, r24
     cb0:	cb 01       	movw	r24, r22
     cb2:	98 8f       	std	Y+24, r25	; 0x18
     cb4:	8f 8b       	std	Y+23, r24	; 0x17
     cb6:	0f c0       	rjmp	.+30     	; 0xcd6 <system_init+0x1a8>
     cb8:	8a ef       	ldi	r24, 0xFA	; 250
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	9a 8f       	std	Y+26, r25	; 0x1a
     cbe:	89 8f       	std	Y+25, r24	; 0x19
     cc0:	89 8d       	ldd	r24, Y+25	; 0x19
     cc2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cc4:	01 97       	sbiw	r24, 0x01	; 1
     cc6:	f1 f7       	brne	.-4      	; 0xcc4 <system_init+0x196>
     cc8:	9a 8f       	std	Y+26, r25	; 0x1a
     cca:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ccc:	8f 89       	ldd	r24, Y+23	; 0x17
     cce:	98 8d       	ldd	r25, Y+24	; 0x18
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	98 8f       	std	Y+24, r25	; 0x18
     cd4:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cd6:	8f 89       	ldd	r24, Y+23	; 0x17
     cd8:	98 8d       	ldd	r25, Y+24	; 0x18
     cda:	89 2b       	or	r24, r25
     cdc:	69 f7       	brne	.-38     	; 0xcb8 <system_init+0x18a>
     cde:	13 c0       	rjmp	.+38     	; 0xd06 <system_init+0x1d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ce0:	6b 89       	ldd	r22, Y+19	; 0x13
     ce2:	7c 89       	ldd	r23, Y+20	; 0x14
     ce4:	8d 89       	ldd	r24, Y+21	; 0x15
     ce6:	9e 89       	ldd	r25, Y+22	; 0x16
     ce8:	15 d2       	rcall	.+1066   	; 0x1114 <__fixunssfsi>
     cea:	dc 01       	movw	r26, r24
     cec:	cb 01       	movw	r24, r22
     cee:	98 8f       	std	Y+24, r25	; 0x18
     cf0:	8f 8b       	std	Y+23, r24	; 0x17
     cf2:	8f 89       	ldd	r24, Y+23	; 0x17
     cf4:	98 8d       	ldd	r25, Y+24	; 0x18
     cf6:	9c 8f       	std	Y+28, r25	; 0x1c
     cf8:	8b 8f       	std	Y+27, r24	; 0x1b
     cfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	f1 f7       	brne	.-4      	; 0xcfe <system_init+0x1d0>
     d02:	9c 8f       	std	Y+28, r25	; 0x1c
     d04:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(1000);
	PORTG = 0x00;
     d06:	84 e3       	ldi	r24, 0x34	; 52
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	fc 01       	movw	r30, r24
     d0c:	10 82       	st	Z, r1
	servo_init(50);
     d0e:	82 e3       	ldi	r24, 0x32	; 50
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	42 db       	rcall	.-2428   	; 0x398 <servo_init>
	timer_init(1000);
     d14:	88 ee       	ldi	r24, 0xE8	; 232
     d16:	93 e0       	ldi	r25, 0x03	; 3
     d18:	6e de       	rcall	.-804    	; 0x9f6 <timer_init>
	CAN_Init(1);
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	28 de       	rcall	.-944    	; 0x96e <CAN_Init>
}
     d1e:	6c 96       	adiw	r28, 0x1c	; 28
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	de bf       	out	0x3e, r29	; 62
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	cd bf       	out	0x3d, r28	; 61
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	08 95       	ret

00000d30 <__vector_23>:

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);

	UBRR1H = temp >> 8;
	UBRR1L = temp;
}
     d30:	1f 92       	push	r1
     d32:	0f 92       	push	r0
     d34:	00 90 5f 00 	lds	r0, 0x005F
     d38:	0f 92       	push	r0
     d3a:	11 24       	eor	r1, r1
     d3c:	00 90 5b 00 	lds	r0, 0x005B
     d40:	0f 92       	push	r0
     d42:	2f 93       	push	r18
     d44:	3f 93       	push	r19
     d46:	8f 93       	push	r24
     d48:	9f 93       	push	r25
     d4a:	ef 93       	push	r30
     d4c:	ff 93       	push	r31
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	80 91 7e 01 	lds	r24, 0x017E
     d5a:	88 23       	and	r24, r24
     d5c:	d1 f0       	breq	.+52     	; 0xd92 <__vector_23+0x62>
     d5e:	80 91 7e 01 	lds	r24, 0x017E
     d62:	81 50       	subi	r24, 0x01	; 1
     d64:	80 93 7e 01 	sts	0x017E, r24
     d68:	86 ec       	ldi	r24, 0xC6	; 198
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	20 91 7f 01 	lds	r18, 0x017F
     d70:	22 2f       	mov	r18, r18
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	22 5c       	subi	r18, 0xC2	; 194
     d76:	3e 4f       	sbci	r19, 0xFE	; 254
     d78:	f9 01       	movw	r30, r18
     d7a:	20 81       	ld	r18, Z
     d7c:	fc 01       	movw	r30, r24
     d7e:	20 83       	st	Z, r18
     d80:	80 91 7f 01 	lds	r24, 0x017F
     d84:	8f 5f       	subi	r24, 0xFF	; 255
     d86:	80 93 7f 01 	sts	0x017F, r24
     d8a:	80 34       	cpi	r24, 0x40	; 64
     d8c:	11 f4       	brne	.+4      	; 0xd92 <__vector_23+0x62>
     d8e:	10 92 7f 01 	sts	0x017F, r1
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	ff 91       	pop	r31
     d98:	ef 91       	pop	r30
     d9a:	9f 91       	pop	r25
     d9c:	8f 91       	pop	r24
     d9e:	3f 91       	pop	r19
     da0:	2f 91       	pop	r18
     da2:	0f 90       	pop	r0
     da4:	00 92 5b 00 	sts	0x005B, r0
     da8:	0f 90       	pop	r0
     daa:	00 92 5f 00 	sts	0x005F, r0
     dae:	0f 90       	pop	r0
     db0:	1f 90       	pop	r1
     db2:	18 95       	reti

00000db4 <__vector_21>:
     db4:	1f 92       	push	r1
     db6:	0f 92       	push	r0
     db8:	00 90 5f 00 	lds	r0, 0x005F
     dbc:	0f 92       	push	r0
     dbe:	11 24       	eor	r1, r1
     dc0:	00 90 5b 00 	lds	r0, 0x005B
     dc4:	0f 92       	push	r0
     dc6:	2f 93       	push	r18
     dc8:	3f 93       	push	r19
     dca:	8f 93       	push	r24
     dcc:	9f 93       	push	r25
     dce:	ef 93       	push	r30
     dd0:	ff 93       	push	r31
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	1f 92       	push	r1
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
     ddc:	80 ec       	ldi	r24, 0xC0	; 192
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	fc 01       	movw	r30, r24
     de2:	80 81       	ld	r24, Z
     de4:	89 83       	std	Y+1, r24	; 0x01
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	88 2f       	mov	r24, r24
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	8c 71       	andi	r24, 0x1C	; 28
     dee:	99 27       	eor	r25, r25
     df0:	89 2b       	or	r24, r25
     df2:	d1 f4       	brne	.+52     	; 0xe28 <__vector_21+0x74>
     df4:	80 91 c0 01 	lds	r24, 0x01C0
     df8:	88 2f       	mov	r24, r24
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	26 ec       	ldi	r18, 0xC6	; 198
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	f9 01       	movw	r30, r18
     e02:	20 81       	ld	r18, Z
     e04:	80 58       	subi	r24, 0x80	; 128
     e06:	9e 4f       	sbci	r25, 0xFE	; 254
     e08:	fc 01       	movw	r30, r24
     e0a:	20 83       	st	Z, r18
     e0c:	80 91 c0 01 	lds	r24, 0x01C0
     e10:	8f 5f       	subi	r24, 0xFF	; 255
     e12:	80 93 c0 01 	sts	0x01C0, r24
     e16:	80 34       	cpi	r24, 0x40	; 64
     e18:	11 f4       	brne	.+4      	; 0xe1e <__vector_21+0x6a>
     e1a:	10 92 c0 01 	sts	0x01C0, r1
     e1e:	80 91 c1 01 	lds	r24, 0x01C1
     e22:	8f 5f       	subi	r24, 0xFF	; 255
     e24:	80 93 c1 01 	sts	0x01C1, r24
     e28:	0f 90       	pop	r0
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	ff 91       	pop	r31
     e30:	ef 91       	pop	r30
     e32:	9f 91       	pop	r25
     e34:	8f 91       	pop	r24
     e36:	3f 91       	pop	r19
     e38:	2f 91       	pop	r18
     e3a:	0f 90       	pop	r0
     e3c:	00 92 5b 00 	sts	0x005B, r0
     e40:	0f 90       	pop	r0
     e42:	00 92 5f 00 	sts	0x005F, r0
     e46:	0f 90       	pop	r0
     e48:	1f 90       	pop	r1
     e4a:	18 95       	reti

00000e4c <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
     e4c:	1f 92       	push	r1
     e4e:	0f 92       	push	r0
     e50:	00 90 5f 00 	lds	r0, 0x005F
     e54:	0f 92       	push	r0
     e56:	11 24       	eor	r1, r1
     e58:	00 90 5b 00 	lds	r0, 0x005B
     e5c:	0f 92       	push	r0
     e5e:	2f 93       	push	r18
     e60:	3f 93       	push	r19
     e62:	8f 93       	push	r24
     e64:	9f 93       	push	r25
     e66:	ef 93       	push	r30
     e68:	ff 93       	push	r31
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
     e72:	80 91 02 02 	lds	r24, 0x0202
     e76:	88 23       	and	r24, r24
     e78:	d1 f0       	breq	.+52     	; 0xeae <__vector_34+0x62>
	{
		tx1_counter--;
     e7a:	80 91 02 02 	lds	r24, 0x0202
     e7e:	81 50       	subi	r24, 0x01	; 1
     e80:	80 93 02 02 	sts	0x0202, r24
		UDR1=tx1_buffer[tx1_rd_index];
     e84:	8e ec       	ldi	r24, 0xCE	; 206
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	20 91 03 02 	lds	r18, 0x0203
     e8c:	22 2f       	mov	r18, r18
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	2e 53       	subi	r18, 0x3E	; 62
     e92:	3e 4f       	sbci	r19, 0xFE	; 254
     e94:	f9 01       	movw	r30, r18
     e96:	20 81       	ld	r18, Z
     e98:	fc 01       	movw	r30, r24
     e9a:	20 83       	st	Z, r18
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
     e9c:	80 91 03 02 	lds	r24, 0x0203
     ea0:	8f 5f       	subi	r24, 0xFF	; 255
     ea2:	80 93 03 02 	sts	0x0203, r24
     ea6:	80 34       	cpi	r24, 0x40	; 64
     ea8:	11 f4       	brne	.+4      	; 0xeae <__vector_34+0x62>
			tx1_rd_index = 0;
     eaa:	10 92 03 02 	sts	0x0203, r1
	}
}
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	ff 91       	pop	r31
     eb4:	ef 91       	pop	r30
     eb6:	9f 91       	pop	r25
     eb8:	8f 91       	pop	r24
     eba:	3f 91       	pop	r19
     ebc:	2f 91       	pop	r18
     ebe:	0f 90       	pop	r0
     ec0:	00 92 5b 00 	sts	0x005B, r0
     ec4:	0f 90       	pop	r0
     ec6:	00 92 5f 00 	sts	0x005F, r0
     eca:	0f 90       	pop	r0
     ecc:	1f 90       	pop	r1
     ece:	18 95       	reti

00000ed0 <__vector_32>:

ISR(USART1_RX_vect)
{
     ed0:	1f 92       	push	r1
     ed2:	0f 92       	push	r0
     ed4:	00 90 5f 00 	lds	r0, 0x005F
     ed8:	0f 92       	push	r0
     eda:	11 24       	eor	r1, r1
     edc:	00 90 5b 00 	lds	r0, 0x005B
     ee0:	0f 92       	push	r0
     ee2:	2f 93       	push	r18
     ee4:	3f 93       	push	r19
     ee6:	8f 93       	push	r24
     ee8:	9f 93       	push	r25
     eea:	ef 93       	push	r30
     eec:	ff 93       	push	r31
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	1f 92       	push	r1
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
     ef8:	88 ec       	ldi	r24, 0xC8	; 200
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	fc 01       	movw	r30, r24
     efe:	80 81       	ld	r24, Z
     f00:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	88 2f       	mov	r24, r24
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	8c 71       	andi	r24, 0x1C	; 28
     f0a:	99 27       	eor	r25, r25
     f0c:	89 2b       	or	r24, r25
     f0e:	d1 f4       	brne	.+52     	; 0xf44 <__vector_32+0x74>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
     f10:	80 91 44 02 	lds	r24, 0x0244
     f14:	88 2f       	mov	r24, r24
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	2e ec       	ldi	r18, 0xCE	; 206
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	f9 01       	movw	r30, r18
     f1e:	20 81       	ld	r18, Z
     f20:	8c 5f       	subi	r24, 0xFC	; 252
     f22:	9d 4f       	sbci	r25, 0xFD	; 253
     f24:	fc 01       	movw	r30, r24
     f26:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
     f28:	80 91 44 02 	lds	r24, 0x0244
     f2c:	8f 5f       	subi	r24, 0xFF	; 255
     f2e:	80 93 44 02 	sts	0x0244, r24
     f32:	80 34       	cpi	r24, 0x40	; 64
     f34:	11 f4       	brne	.+4      	; 0xf3a <__vector_32+0x6a>
		rx1_wr_index = 0;
     f36:	10 92 44 02 	sts	0x0244, r1

		rx1_counter++;
     f3a:	80 91 45 02 	lds	r24, 0x0245
     f3e:	8f 5f       	subi	r24, 0xFF	; 255
     f40:	80 93 45 02 	sts	0x0245, r24
	}
}
     f44:	0f 90       	pop	r0
     f46:	df 91       	pop	r29
     f48:	cf 91       	pop	r28
     f4a:	ff 91       	pop	r31
     f4c:	ef 91       	pop	r30
     f4e:	9f 91       	pop	r25
     f50:	8f 91       	pop	r24
     f52:	3f 91       	pop	r19
     f54:	2f 91       	pop	r18
     f56:	0f 90       	pop	r0
     f58:	00 92 5b 00 	sts	0x005B, r0
     f5c:	0f 90       	pop	r0
     f5e:	00 92 5f 00 	sts	0x005F, r0
     f62:	0f 90       	pop	r0
     f64:	1f 90       	pop	r1
     f66:	18 95       	reti

00000f68 <__subsf3>:
     f68:	50 58       	subi	r21, 0x80	; 128

00000f6a <__addsf3>:
     f6a:	bb 27       	eor	r27, r27
     f6c:	aa 27       	eor	r26, r26
     f6e:	0e d0       	rcall	.+28     	; 0xf8c <__addsf3x>
     f70:	75 c1       	rjmp	.+746    	; 0x125c <__fp_round>
     f72:	66 d1       	rcall	.+716    	; 0x1240 <__fp_pscA>
     f74:	30 f0       	brcs	.+12     	; 0xf82 <__addsf3+0x18>
     f76:	6b d1       	rcall	.+726    	; 0x124e <__fp_pscB>
     f78:	20 f0       	brcs	.+8      	; 0xf82 <__addsf3+0x18>
     f7a:	31 f4       	brne	.+12     	; 0xf88 <__addsf3+0x1e>
     f7c:	9f 3f       	cpi	r25, 0xFF	; 255
     f7e:	11 f4       	brne	.+4      	; 0xf84 <__addsf3+0x1a>
     f80:	1e f4       	brtc	.+6      	; 0xf88 <__addsf3+0x1e>
     f82:	5b c1       	rjmp	.+694    	; 0x123a <__fp_nan>
     f84:	0e f4       	brtc	.+2      	; 0xf88 <__addsf3+0x1e>
     f86:	e0 95       	com	r30
     f88:	e7 fb       	bst	r30, 7
     f8a:	51 c1       	rjmp	.+674    	; 0x122e <__fp_inf>

00000f8c <__addsf3x>:
     f8c:	e9 2f       	mov	r30, r25
     f8e:	77 d1       	rcall	.+750    	; 0x127e <__fp_split3>
     f90:	80 f3       	brcs	.-32     	; 0xf72 <__addsf3+0x8>
     f92:	ba 17       	cp	r27, r26
     f94:	62 07       	cpc	r22, r18
     f96:	73 07       	cpc	r23, r19
     f98:	84 07       	cpc	r24, r20
     f9a:	95 07       	cpc	r25, r21
     f9c:	18 f0       	brcs	.+6      	; 0xfa4 <__addsf3x+0x18>
     f9e:	71 f4       	brne	.+28     	; 0xfbc <__addsf3x+0x30>
     fa0:	9e f5       	brtc	.+102    	; 0x1008 <__addsf3x+0x7c>
     fa2:	8f c1       	rjmp	.+798    	; 0x12c2 <__fp_zero>
     fa4:	0e f4       	brtc	.+2      	; 0xfa8 <__addsf3x+0x1c>
     fa6:	e0 95       	com	r30
     fa8:	0b 2e       	mov	r0, r27
     faa:	ba 2f       	mov	r27, r26
     fac:	a0 2d       	mov	r26, r0
     fae:	0b 01       	movw	r0, r22
     fb0:	b9 01       	movw	r22, r18
     fb2:	90 01       	movw	r18, r0
     fb4:	0c 01       	movw	r0, r24
     fb6:	ca 01       	movw	r24, r20
     fb8:	a0 01       	movw	r20, r0
     fba:	11 24       	eor	r1, r1
     fbc:	ff 27       	eor	r31, r31
     fbe:	59 1b       	sub	r21, r25
     fc0:	99 f0       	breq	.+38     	; 0xfe8 <__addsf3x+0x5c>
     fc2:	59 3f       	cpi	r21, 0xF9	; 249
     fc4:	50 f4       	brcc	.+20     	; 0xfda <__addsf3x+0x4e>
     fc6:	50 3e       	cpi	r21, 0xE0	; 224
     fc8:	68 f1       	brcs	.+90     	; 0x1024 <__addsf3x+0x98>
     fca:	1a 16       	cp	r1, r26
     fcc:	f0 40       	sbci	r31, 0x00	; 0
     fce:	a2 2f       	mov	r26, r18
     fd0:	23 2f       	mov	r18, r19
     fd2:	34 2f       	mov	r19, r20
     fd4:	44 27       	eor	r20, r20
     fd6:	58 5f       	subi	r21, 0xF8	; 248
     fd8:	f3 cf       	rjmp	.-26     	; 0xfc0 <__addsf3x+0x34>
     fda:	46 95       	lsr	r20
     fdc:	37 95       	ror	r19
     fde:	27 95       	ror	r18
     fe0:	a7 95       	ror	r26
     fe2:	f0 40       	sbci	r31, 0x00	; 0
     fe4:	53 95       	inc	r21
     fe6:	c9 f7       	brne	.-14     	; 0xfda <__addsf3x+0x4e>
     fe8:	7e f4       	brtc	.+30     	; 0x1008 <__addsf3x+0x7c>
     fea:	1f 16       	cp	r1, r31
     fec:	ba 0b       	sbc	r27, r26
     fee:	62 0b       	sbc	r22, r18
     ff0:	73 0b       	sbc	r23, r19
     ff2:	84 0b       	sbc	r24, r20
     ff4:	ba f0       	brmi	.+46     	; 0x1024 <__addsf3x+0x98>
     ff6:	91 50       	subi	r25, 0x01	; 1
     ff8:	a1 f0       	breq	.+40     	; 0x1022 <__addsf3x+0x96>
     ffa:	ff 0f       	add	r31, r31
     ffc:	bb 1f       	adc	r27, r27
     ffe:	66 1f       	adc	r22, r22
    1000:	77 1f       	adc	r23, r23
    1002:	88 1f       	adc	r24, r24
    1004:	c2 f7       	brpl	.-16     	; 0xff6 <__addsf3x+0x6a>
    1006:	0e c0       	rjmp	.+28     	; 0x1024 <__addsf3x+0x98>
    1008:	ba 0f       	add	r27, r26
    100a:	62 1f       	adc	r22, r18
    100c:	73 1f       	adc	r23, r19
    100e:	84 1f       	adc	r24, r20
    1010:	48 f4       	brcc	.+18     	; 0x1024 <__addsf3x+0x98>
    1012:	87 95       	ror	r24
    1014:	77 95       	ror	r23
    1016:	67 95       	ror	r22
    1018:	b7 95       	ror	r27
    101a:	f7 95       	ror	r31
    101c:	9e 3f       	cpi	r25, 0xFE	; 254
    101e:	08 f0       	brcs	.+2      	; 0x1022 <__addsf3x+0x96>
    1020:	b3 cf       	rjmp	.-154    	; 0xf88 <__addsf3+0x1e>
    1022:	93 95       	inc	r25
    1024:	88 0f       	add	r24, r24
    1026:	08 f0       	brcs	.+2      	; 0x102a <__addsf3x+0x9e>
    1028:	99 27       	eor	r25, r25
    102a:	ee 0f       	add	r30, r30
    102c:	97 95       	ror	r25
    102e:	87 95       	ror	r24
    1030:	08 95       	ret

00001032 <__cmpsf2>:
    1032:	d9 d0       	rcall	.+434    	; 0x11e6 <__fp_cmp>
    1034:	08 f4       	brcc	.+2      	; 0x1038 <__cmpsf2+0x6>
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	08 95       	ret

0000103a <__divsf3>:
    103a:	0c d0       	rcall	.+24     	; 0x1054 <__divsf3x>
    103c:	0f c1       	rjmp	.+542    	; 0x125c <__fp_round>
    103e:	07 d1       	rcall	.+526    	; 0x124e <__fp_pscB>
    1040:	40 f0       	brcs	.+16     	; 0x1052 <__divsf3+0x18>
    1042:	fe d0       	rcall	.+508    	; 0x1240 <__fp_pscA>
    1044:	30 f0       	brcs	.+12     	; 0x1052 <__divsf3+0x18>
    1046:	21 f4       	brne	.+8      	; 0x1050 <__divsf3+0x16>
    1048:	5f 3f       	cpi	r21, 0xFF	; 255
    104a:	19 f0       	breq	.+6      	; 0x1052 <__divsf3+0x18>
    104c:	f0 c0       	rjmp	.+480    	; 0x122e <__fp_inf>
    104e:	51 11       	cpse	r21, r1
    1050:	39 c1       	rjmp	.+626    	; 0x12c4 <__fp_szero>
    1052:	f3 c0       	rjmp	.+486    	; 0x123a <__fp_nan>

00001054 <__divsf3x>:
    1054:	14 d1       	rcall	.+552    	; 0x127e <__fp_split3>
    1056:	98 f3       	brcs	.-26     	; 0x103e <__divsf3+0x4>

00001058 <__divsf3_pse>:
    1058:	99 23       	and	r25, r25
    105a:	c9 f3       	breq	.-14     	; 0x104e <__divsf3+0x14>
    105c:	55 23       	and	r21, r21
    105e:	b1 f3       	breq	.-20     	; 0x104c <__divsf3+0x12>
    1060:	95 1b       	sub	r25, r21
    1062:	55 0b       	sbc	r21, r21
    1064:	bb 27       	eor	r27, r27
    1066:	aa 27       	eor	r26, r26
    1068:	62 17       	cp	r22, r18
    106a:	73 07       	cpc	r23, r19
    106c:	84 07       	cpc	r24, r20
    106e:	38 f0       	brcs	.+14     	; 0x107e <__divsf3_pse+0x26>
    1070:	9f 5f       	subi	r25, 0xFF	; 255
    1072:	5f 4f       	sbci	r21, 0xFF	; 255
    1074:	22 0f       	add	r18, r18
    1076:	33 1f       	adc	r19, r19
    1078:	44 1f       	adc	r20, r20
    107a:	aa 1f       	adc	r26, r26
    107c:	a9 f3       	breq	.-22     	; 0x1068 <__divsf3_pse+0x10>
    107e:	33 d0       	rcall	.+102    	; 0x10e6 <__divsf3_pse+0x8e>
    1080:	0e 2e       	mov	r0, r30
    1082:	3a f0       	brmi	.+14     	; 0x1092 <__divsf3_pse+0x3a>
    1084:	e0 e8       	ldi	r30, 0x80	; 128
    1086:	30 d0       	rcall	.+96     	; 0x10e8 <__divsf3_pse+0x90>
    1088:	91 50       	subi	r25, 0x01	; 1
    108a:	50 40       	sbci	r21, 0x00	; 0
    108c:	e6 95       	lsr	r30
    108e:	00 1c       	adc	r0, r0
    1090:	ca f7       	brpl	.-14     	; 0x1084 <__divsf3_pse+0x2c>
    1092:	29 d0       	rcall	.+82     	; 0x10e6 <__divsf3_pse+0x8e>
    1094:	fe 2f       	mov	r31, r30
    1096:	27 d0       	rcall	.+78     	; 0x10e6 <__divsf3_pse+0x8e>
    1098:	66 0f       	add	r22, r22
    109a:	77 1f       	adc	r23, r23
    109c:	88 1f       	adc	r24, r24
    109e:	bb 1f       	adc	r27, r27
    10a0:	26 17       	cp	r18, r22
    10a2:	37 07       	cpc	r19, r23
    10a4:	48 07       	cpc	r20, r24
    10a6:	ab 07       	cpc	r26, r27
    10a8:	b0 e8       	ldi	r27, 0x80	; 128
    10aa:	09 f0       	breq	.+2      	; 0x10ae <__divsf3_pse+0x56>
    10ac:	bb 0b       	sbc	r27, r27
    10ae:	80 2d       	mov	r24, r0
    10b0:	bf 01       	movw	r22, r30
    10b2:	ff 27       	eor	r31, r31
    10b4:	93 58       	subi	r25, 0x83	; 131
    10b6:	5f 4f       	sbci	r21, 0xFF	; 255
    10b8:	2a f0       	brmi	.+10     	; 0x10c4 <__divsf3_pse+0x6c>
    10ba:	9e 3f       	cpi	r25, 0xFE	; 254
    10bc:	51 05       	cpc	r21, r1
    10be:	68 f0       	brcs	.+26     	; 0x10da <__divsf3_pse+0x82>
    10c0:	b6 c0       	rjmp	.+364    	; 0x122e <__fp_inf>
    10c2:	00 c1       	rjmp	.+512    	; 0x12c4 <__fp_szero>
    10c4:	5f 3f       	cpi	r21, 0xFF	; 255
    10c6:	ec f3       	brlt	.-6      	; 0x10c2 <__divsf3_pse+0x6a>
    10c8:	98 3e       	cpi	r25, 0xE8	; 232
    10ca:	dc f3       	brlt	.-10     	; 0x10c2 <__divsf3_pse+0x6a>
    10cc:	86 95       	lsr	r24
    10ce:	77 95       	ror	r23
    10d0:	67 95       	ror	r22
    10d2:	b7 95       	ror	r27
    10d4:	f7 95       	ror	r31
    10d6:	9f 5f       	subi	r25, 0xFF	; 255
    10d8:	c9 f7       	brne	.-14     	; 0x10cc <__divsf3_pse+0x74>
    10da:	88 0f       	add	r24, r24
    10dc:	91 1d       	adc	r25, r1
    10de:	96 95       	lsr	r25
    10e0:	87 95       	ror	r24
    10e2:	97 f9       	bld	r25, 7
    10e4:	08 95       	ret
    10e6:	e1 e0       	ldi	r30, 0x01	; 1
    10e8:	66 0f       	add	r22, r22
    10ea:	77 1f       	adc	r23, r23
    10ec:	88 1f       	adc	r24, r24
    10ee:	bb 1f       	adc	r27, r27
    10f0:	62 17       	cp	r22, r18
    10f2:	73 07       	cpc	r23, r19
    10f4:	84 07       	cpc	r24, r20
    10f6:	ba 07       	cpc	r27, r26
    10f8:	20 f0       	brcs	.+8      	; 0x1102 <__stack+0x3>
    10fa:	62 1b       	sub	r22, r18
    10fc:	73 0b       	sbc	r23, r19
    10fe:	84 0b       	sbc	r24, r20
    1100:	ba 0b       	sbc	r27, r26
    1102:	ee 1f       	adc	r30, r30
    1104:	88 f7       	brcc	.-30     	; 0x10e8 <__divsf3_pse+0x90>
    1106:	e0 95       	com	r30
    1108:	08 95       	ret

0000110a <__fixsfsi>:
    110a:	04 d0       	rcall	.+8      	; 0x1114 <__fixunssfsi>
    110c:	68 94       	set
    110e:	b1 11       	cpse	r27, r1
    1110:	d9 c0       	rjmp	.+434    	; 0x12c4 <__fp_szero>
    1112:	08 95       	ret

00001114 <__fixunssfsi>:
    1114:	bc d0       	rcall	.+376    	; 0x128e <__fp_splitA>
    1116:	88 f0       	brcs	.+34     	; 0x113a <__fixunssfsi+0x26>
    1118:	9f 57       	subi	r25, 0x7F	; 127
    111a:	90 f0       	brcs	.+36     	; 0x1140 <__fixunssfsi+0x2c>
    111c:	b9 2f       	mov	r27, r25
    111e:	99 27       	eor	r25, r25
    1120:	b7 51       	subi	r27, 0x17	; 23
    1122:	a0 f0       	brcs	.+40     	; 0x114c <__fixunssfsi+0x38>
    1124:	d1 f0       	breq	.+52     	; 0x115a <__fixunssfsi+0x46>
    1126:	66 0f       	add	r22, r22
    1128:	77 1f       	adc	r23, r23
    112a:	88 1f       	adc	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	1a f0       	brmi	.+6      	; 0x1136 <__fixunssfsi+0x22>
    1130:	ba 95       	dec	r27
    1132:	c9 f7       	brne	.-14     	; 0x1126 <__fixunssfsi+0x12>
    1134:	12 c0       	rjmp	.+36     	; 0x115a <__fixunssfsi+0x46>
    1136:	b1 30       	cpi	r27, 0x01	; 1
    1138:	81 f0       	breq	.+32     	; 0x115a <__fixunssfsi+0x46>
    113a:	c3 d0       	rcall	.+390    	; 0x12c2 <__fp_zero>
    113c:	b1 e0       	ldi	r27, 0x01	; 1
    113e:	08 95       	ret
    1140:	c0 c0       	rjmp	.+384    	; 0x12c2 <__fp_zero>
    1142:	67 2f       	mov	r22, r23
    1144:	78 2f       	mov	r23, r24
    1146:	88 27       	eor	r24, r24
    1148:	b8 5f       	subi	r27, 0xF8	; 248
    114a:	39 f0       	breq	.+14     	; 0x115a <__fixunssfsi+0x46>
    114c:	b9 3f       	cpi	r27, 0xF9	; 249
    114e:	cc f3       	brlt	.-14     	; 0x1142 <__fixunssfsi+0x2e>
    1150:	86 95       	lsr	r24
    1152:	77 95       	ror	r23
    1154:	67 95       	ror	r22
    1156:	b3 95       	inc	r27
    1158:	d9 f7       	brne	.-10     	; 0x1150 <__fixunssfsi+0x3c>
    115a:	3e f4       	brtc	.+14     	; 0x116a <__fixunssfsi+0x56>
    115c:	90 95       	com	r25
    115e:	80 95       	com	r24
    1160:	70 95       	com	r23
    1162:	61 95       	neg	r22
    1164:	7f 4f       	sbci	r23, 0xFF	; 255
    1166:	8f 4f       	sbci	r24, 0xFF	; 255
    1168:	9f 4f       	sbci	r25, 0xFF	; 255
    116a:	08 95       	ret

0000116c <__floatunsisf>:
    116c:	e8 94       	clt
    116e:	09 c0       	rjmp	.+18     	; 0x1182 <__floatsisf+0x12>

00001170 <__floatsisf>:
    1170:	97 fb       	bst	r25, 7
    1172:	3e f4       	brtc	.+14     	; 0x1182 <__floatsisf+0x12>
    1174:	90 95       	com	r25
    1176:	80 95       	com	r24
    1178:	70 95       	com	r23
    117a:	61 95       	neg	r22
    117c:	7f 4f       	sbci	r23, 0xFF	; 255
    117e:	8f 4f       	sbci	r24, 0xFF	; 255
    1180:	9f 4f       	sbci	r25, 0xFF	; 255
    1182:	99 23       	and	r25, r25
    1184:	a9 f0       	breq	.+42     	; 0x11b0 <__floatsisf+0x40>
    1186:	f9 2f       	mov	r31, r25
    1188:	96 e9       	ldi	r25, 0x96	; 150
    118a:	bb 27       	eor	r27, r27
    118c:	93 95       	inc	r25
    118e:	f6 95       	lsr	r31
    1190:	87 95       	ror	r24
    1192:	77 95       	ror	r23
    1194:	67 95       	ror	r22
    1196:	b7 95       	ror	r27
    1198:	f1 11       	cpse	r31, r1
    119a:	f8 cf       	rjmp	.-16     	; 0x118c <__floatsisf+0x1c>
    119c:	fa f4       	brpl	.+62     	; 0x11dc <__floatsisf+0x6c>
    119e:	bb 0f       	add	r27, r27
    11a0:	11 f4       	brne	.+4      	; 0x11a6 <__floatsisf+0x36>
    11a2:	60 ff       	sbrs	r22, 0
    11a4:	1b c0       	rjmp	.+54     	; 0x11dc <__floatsisf+0x6c>
    11a6:	6f 5f       	subi	r22, 0xFF	; 255
    11a8:	7f 4f       	sbci	r23, 0xFF	; 255
    11aa:	8f 4f       	sbci	r24, 0xFF	; 255
    11ac:	9f 4f       	sbci	r25, 0xFF	; 255
    11ae:	16 c0       	rjmp	.+44     	; 0x11dc <__floatsisf+0x6c>
    11b0:	88 23       	and	r24, r24
    11b2:	11 f0       	breq	.+4      	; 0x11b8 <__floatsisf+0x48>
    11b4:	96 e9       	ldi	r25, 0x96	; 150
    11b6:	11 c0       	rjmp	.+34     	; 0x11da <__floatsisf+0x6a>
    11b8:	77 23       	and	r23, r23
    11ba:	21 f0       	breq	.+8      	; 0x11c4 <__floatsisf+0x54>
    11bc:	9e e8       	ldi	r25, 0x8E	; 142
    11be:	87 2f       	mov	r24, r23
    11c0:	76 2f       	mov	r23, r22
    11c2:	05 c0       	rjmp	.+10     	; 0x11ce <__floatsisf+0x5e>
    11c4:	66 23       	and	r22, r22
    11c6:	71 f0       	breq	.+28     	; 0x11e4 <__floatsisf+0x74>
    11c8:	96 e8       	ldi	r25, 0x86	; 134
    11ca:	86 2f       	mov	r24, r22
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	2a f0       	brmi	.+10     	; 0x11dc <__floatsisf+0x6c>
    11d2:	9a 95       	dec	r25
    11d4:	66 0f       	add	r22, r22
    11d6:	77 1f       	adc	r23, r23
    11d8:	88 1f       	adc	r24, r24
    11da:	da f7       	brpl	.-10     	; 0x11d2 <__floatsisf+0x62>
    11dc:	88 0f       	add	r24, r24
    11de:	96 95       	lsr	r25
    11e0:	87 95       	ror	r24
    11e2:	97 f9       	bld	r25, 7
    11e4:	08 95       	ret

000011e6 <__fp_cmp>:
    11e6:	99 0f       	add	r25, r25
    11e8:	00 08       	sbc	r0, r0
    11ea:	55 0f       	add	r21, r21
    11ec:	aa 0b       	sbc	r26, r26
    11ee:	e0 e8       	ldi	r30, 0x80	; 128
    11f0:	fe ef       	ldi	r31, 0xFE	; 254
    11f2:	16 16       	cp	r1, r22
    11f4:	17 06       	cpc	r1, r23
    11f6:	e8 07       	cpc	r30, r24
    11f8:	f9 07       	cpc	r31, r25
    11fa:	c0 f0       	brcs	.+48     	; 0x122c <__fp_cmp+0x46>
    11fc:	12 16       	cp	r1, r18
    11fe:	13 06       	cpc	r1, r19
    1200:	e4 07       	cpc	r30, r20
    1202:	f5 07       	cpc	r31, r21
    1204:	98 f0       	brcs	.+38     	; 0x122c <__fp_cmp+0x46>
    1206:	62 1b       	sub	r22, r18
    1208:	73 0b       	sbc	r23, r19
    120a:	84 0b       	sbc	r24, r20
    120c:	95 0b       	sbc	r25, r21
    120e:	39 f4       	brne	.+14     	; 0x121e <__fp_cmp+0x38>
    1210:	0a 26       	eor	r0, r26
    1212:	61 f0       	breq	.+24     	; 0x122c <__fp_cmp+0x46>
    1214:	23 2b       	or	r18, r19
    1216:	24 2b       	or	r18, r20
    1218:	25 2b       	or	r18, r21
    121a:	21 f4       	brne	.+8      	; 0x1224 <__fp_cmp+0x3e>
    121c:	08 95       	ret
    121e:	0a 26       	eor	r0, r26
    1220:	09 f4       	brne	.+2      	; 0x1224 <__fp_cmp+0x3e>
    1222:	a1 40       	sbci	r26, 0x01	; 1
    1224:	a6 95       	lsr	r26
    1226:	8f ef       	ldi	r24, 0xFF	; 255
    1228:	81 1d       	adc	r24, r1
    122a:	81 1d       	adc	r24, r1
    122c:	08 95       	ret

0000122e <__fp_inf>:
    122e:	97 f9       	bld	r25, 7
    1230:	9f 67       	ori	r25, 0x7F	; 127
    1232:	80 e8       	ldi	r24, 0x80	; 128
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	08 95       	ret

0000123a <__fp_nan>:
    123a:	9f ef       	ldi	r25, 0xFF	; 255
    123c:	80 ec       	ldi	r24, 0xC0	; 192
    123e:	08 95       	ret

00001240 <__fp_pscA>:
    1240:	00 24       	eor	r0, r0
    1242:	0a 94       	dec	r0
    1244:	16 16       	cp	r1, r22
    1246:	17 06       	cpc	r1, r23
    1248:	18 06       	cpc	r1, r24
    124a:	09 06       	cpc	r0, r25
    124c:	08 95       	ret

0000124e <__fp_pscB>:
    124e:	00 24       	eor	r0, r0
    1250:	0a 94       	dec	r0
    1252:	12 16       	cp	r1, r18
    1254:	13 06       	cpc	r1, r19
    1256:	14 06       	cpc	r1, r20
    1258:	05 06       	cpc	r0, r21
    125a:	08 95       	ret

0000125c <__fp_round>:
    125c:	09 2e       	mov	r0, r25
    125e:	03 94       	inc	r0
    1260:	00 0c       	add	r0, r0
    1262:	11 f4       	brne	.+4      	; 0x1268 <__fp_round+0xc>
    1264:	88 23       	and	r24, r24
    1266:	52 f0       	brmi	.+20     	; 0x127c <__fp_round+0x20>
    1268:	bb 0f       	add	r27, r27
    126a:	40 f4       	brcc	.+16     	; 0x127c <__fp_round+0x20>
    126c:	bf 2b       	or	r27, r31
    126e:	11 f4       	brne	.+4      	; 0x1274 <__fp_round+0x18>
    1270:	60 ff       	sbrs	r22, 0
    1272:	04 c0       	rjmp	.+8      	; 0x127c <__fp_round+0x20>
    1274:	6f 5f       	subi	r22, 0xFF	; 255
    1276:	7f 4f       	sbci	r23, 0xFF	; 255
    1278:	8f 4f       	sbci	r24, 0xFF	; 255
    127a:	9f 4f       	sbci	r25, 0xFF	; 255
    127c:	08 95       	ret

0000127e <__fp_split3>:
    127e:	57 fd       	sbrc	r21, 7
    1280:	90 58       	subi	r25, 0x80	; 128
    1282:	44 0f       	add	r20, r20
    1284:	55 1f       	adc	r21, r21
    1286:	59 f0       	breq	.+22     	; 0x129e <__fp_splitA+0x10>
    1288:	5f 3f       	cpi	r21, 0xFF	; 255
    128a:	71 f0       	breq	.+28     	; 0x12a8 <__fp_splitA+0x1a>
    128c:	47 95       	ror	r20

0000128e <__fp_splitA>:
    128e:	88 0f       	add	r24, r24
    1290:	97 fb       	bst	r25, 7
    1292:	99 1f       	adc	r25, r25
    1294:	61 f0       	breq	.+24     	; 0x12ae <__fp_splitA+0x20>
    1296:	9f 3f       	cpi	r25, 0xFF	; 255
    1298:	79 f0       	breq	.+30     	; 0x12b8 <__fp_splitA+0x2a>
    129a:	87 95       	ror	r24
    129c:	08 95       	ret
    129e:	12 16       	cp	r1, r18
    12a0:	13 06       	cpc	r1, r19
    12a2:	14 06       	cpc	r1, r20
    12a4:	55 1f       	adc	r21, r21
    12a6:	f2 cf       	rjmp	.-28     	; 0x128c <__fp_split3+0xe>
    12a8:	46 95       	lsr	r20
    12aa:	f1 df       	rcall	.-30     	; 0x128e <__fp_splitA>
    12ac:	08 c0       	rjmp	.+16     	; 0x12be <__fp_splitA+0x30>
    12ae:	16 16       	cp	r1, r22
    12b0:	17 06       	cpc	r1, r23
    12b2:	18 06       	cpc	r1, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	f1 cf       	rjmp	.-30     	; 0x129a <__fp_splitA+0xc>
    12b8:	86 95       	lsr	r24
    12ba:	71 05       	cpc	r23, r1
    12bc:	61 05       	cpc	r22, r1
    12be:	08 94       	sec
    12c0:	08 95       	ret

000012c2 <__fp_zero>:
    12c2:	e8 94       	clt

000012c4 <__fp_szero>:
    12c4:	bb 27       	eor	r27, r27
    12c6:	66 27       	eor	r22, r22
    12c8:	77 27       	eor	r23, r23
    12ca:	cb 01       	movw	r24, r22
    12cc:	97 f9       	bld	r25, 7
    12ce:	08 95       	ret

000012d0 <__gesf2>:
    12d0:	8a df       	rcall	.-236    	; 0x11e6 <__fp_cmp>
    12d2:	08 f4       	brcc	.+2      	; 0x12d6 <__gesf2+0x6>
    12d4:	8f ef       	ldi	r24, 0xFF	; 255
    12d6:	08 95       	ret

000012d8 <__mulsf3>:
    12d8:	0b d0       	rcall	.+22     	; 0x12f0 <__mulsf3x>
    12da:	c0 cf       	rjmp	.-128    	; 0x125c <__fp_round>
    12dc:	b1 df       	rcall	.-158    	; 0x1240 <__fp_pscA>
    12de:	28 f0       	brcs	.+10     	; 0x12ea <__mulsf3+0x12>
    12e0:	b6 df       	rcall	.-148    	; 0x124e <__fp_pscB>
    12e2:	18 f0       	brcs	.+6      	; 0x12ea <__mulsf3+0x12>
    12e4:	95 23       	and	r25, r21
    12e6:	09 f0       	breq	.+2      	; 0x12ea <__mulsf3+0x12>
    12e8:	a2 cf       	rjmp	.-188    	; 0x122e <__fp_inf>
    12ea:	a7 cf       	rjmp	.-178    	; 0x123a <__fp_nan>
    12ec:	11 24       	eor	r1, r1
    12ee:	ea cf       	rjmp	.-44     	; 0x12c4 <__fp_szero>

000012f0 <__mulsf3x>:
    12f0:	c6 df       	rcall	.-116    	; 0x127e <__fp_split3>
    12f2:	a0 f3       	brcs	.-24     	; 0x12dc <__mulsf3+0x4>

000012f4 <__mulsf3_pse>:
    12f4:	95 9f       	mul	r25, r21
    12f6:	d1 f3       	breq	.-12     	; 0x12ec <__mulsf3+0x14>
    12f8:	95 0f       	add	r25, r21
    12fa:	50 e0       	ldi	r21, 0x00	; 0
    12fc:	55 1f       	adc	r21, r21
    12fe:	62 9f       	mul	r22, r18
    1300:	f0 01       	movw	r30, r0
    1302:	72 9f       	mul	r23, r18
    1304:	bb 27       	eor	r27, r27
    1306:	f0 0d       	add	r31, r0
    1308:	b1 1d       	adc	r27, r1
    130a:	63 9f       	mul	r22, r19
    130c:	aa 27       	eor	r26, r26
    130e:	f0 0d       	add	r31, r0
    1310:	b1 1d       	adc	r27, r1
    1312:	aa 1f       	adc	r26, r26
    1314:	64 9f       	mul	r22, r20
    1316:	66 27       	eor	r22, r22
    1318:	b0 0d       	add	r27, r0
    131a:	a1 1d       	adc	r26, r1
    131c:	66 1f       	adc	r22, r22
    131e:	82 9f       	mul	r24, r18
    1320:	22 27       	eor	r18, r18
    1322:	b0 0d       	add	r27, r0
    1324:	a1 1d       	adc	r26, r1
    1326:	62 1f       	adc	r22, r18
    1328:	73 9f       	mul	r23, r19
    132a:	b0 0d       	add	r27, r0
    132c:	a1 1d       	adc	r26, r1
    132e:	62 1f       	adc	r22, r18
    1330:	83 9f       	mul	r24, r19
    1332:	a0 0d       	add	r26, r0
    1334:	61 1d       	adc	r22, r1
    1336:	22 1f       	adc	r18, r18
    1338:	74 9f       	mul	r23, r20
    133a:	33 27       	eor	r19, r19
    133c:	a0 0d       	add	r26, r0
    133e:	61 1d       	adc	r22, r1
    1340:	23 1f       	adc	r18, r19
    1342:	84 9f       	mul	r24, r20
    1344:	60 0d       	add	r22, r0
    1346:	21 1d       	adc	r18, r1
    1348:	82 2f       	mov	r24, r18
    134a:	76 2f       	mov	r23, r22
    134c:	6a 2f       	mov	r22, r26
    134e:	11 24       	eor	r1, r1
    1350:	9f 57       	subi	r25, 0x7F	; 127
    1352:	50 40       	sbci	r21, 0x00	; 0
    1354:	8a f0       	brmi	.+34     	; 0x1378 <__mulsf3_pse+0x84>
    1356:	e1 f0       	breq	.+56     	; 0x1390 <__mulsf3_pse+0x9c>
    1358:	88 23       	and	r24, r24
    135a:	4a f0       	brmi	.+18     	; 0x136e <__mulsf3_pse+0x7a>
    135c:	ee 0f       	add	r30, r30
    135e:	ff 1f       	adc	r31, r31
    1360:	bb 1f       	adc	r27, r27
    1362:	66 1f       	adc	r22, r22
    1364:	77 1f       	adc	r23, r23
    1366:	88 1f       	adc	r24, r24
    1368:	91 50       	subi	r25, 0x01	; 1
    136a:	50 40       	sbci	r21, 0x00	; 0
    136c:	a9 f7       	brne	.-22     	; 0x1358 <__mulsf3_pse+0x64>
    136e:	9e 3f       	cpi	r25, 0xFE	; 254
    1370:	51 05       	cpc	r21, r1
    1372:	70 f0       	brcs	.+28     	; 0x1390 <__mulsf3_pse+0x9c>
    1374:	5c cf       	rjmp	.-328    	; 0x122e <__fp_inf>
    1376:	a6 cf       	rjmp	.-180    	; 0x12c4 <__fp_szero>
    1378:	5f 3f       	cpi	r21, 0xFF	; 255
    137a:	ec f3       	brlt	.-6      	; 0x1376 <__mulsf3_pse+0x82>
    137c:	98 3e       	cpi	r25, 0xE8	; 232
    137e:	dc f3       	brlt	.-10     	; 0x1376 <__mulsf3_pse+0x82>
    1380:	86 95       	lsr	r24
    1382:	77 95       	ror	r23
    1384:	67 95       	ror	r22
    1386:	b7 95       	ror	r27
    1388:	f7 95       	ror	r31
    138a:	e7 95       	ror	r30
    138c:	9f 5f       	subi	r25, 0xFF	; 255
    138e:	c1 f7       	brne	.-16     	; 0x1380 <__mulsf3_pse+0x8c>
    1390:	fe 2b       	or	r31, r30
    1392:	88 0f       	add	r24, r24
    1394:	91 1d       	adc	r25, r1
    1396:	96 95       	lsr	r25
    1398:	87 95       	ror	r24
    139a:	97 f9       	bld	r25, 7
    139c:	08 95       	ret

0000139e <calloc>:
    139e:	0f 93       	push	r16
    13a0:	1f 93       	push	r17
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	86 9f       	mul	r24, r22
    13a8:	80 01       	movw	r16, r0
    13aa:	87 9f       	mul	r24, r23
    13ac:	10 0d       	add	r17, r0
    13ae:	96 9f       	mul	r25, r22
    13b0:	10 0d       	add	r17, r0
    13b2:	11 24       	eor	r1, r1
    13b4:	c8 01       	movw	r24, r16
    13b6:	0d d0       	rcall	.+26     	; 0x13d2 <malloc>
    13b8:	ec 01       	movw	r28, r24
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	21 f0       	breq	.+8      	; 0x13c6 <calloc+0x28>
    13be:	a8 01       	movw	r20, r16
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	33 d1       	rcall	.+614    	; 0x162c <memset>
    13c6:	ce 01       	movw	r24, r28
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	08 95       	ret

000013d2 <malloc>:
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	82 30       	cpi	r24, 0x02	; 2
    13d8:	91 05       	cpc	r25, r1
    13da:	10 f4       	brcc	.+4      	; 0x13e0 <malloc+0xe>
    13dc:	82 e0       	ldi	r24, 0x02	; 2
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	e0 91 48 02 	lds	r30, 0x0248
    13e4:	f0 91 49 02 	lds	r31, 0x0249
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	c0 e0       	ldi	r28, 0x00	; 0
    13ee:	d0 e0       	ldi	r29, 0x00	; 0
    13f0:	30 97       	sbiw	r30, 0x00	; 0
    13f2:	11 f1       	breq	.+68     	; 0x1438 <malloc+0x66>
    13f4:	40 81       	ld	r20, Z
    13f6:	51 81       	ldd	r21, Z+1	; 0x01
    13f8:	48 17       	cp	r20, r24
    13fa:	59 07       	cpc	r21, r25
    13fc:	c0 f0       	brcs	.+48     	; 0x142e <malloc+0x5c>
    13fe:	48 17       	cp	r20, r24
    1400:	59 07       	cpc	r21, r25
    1402:	61 f4       	brne	.+24     	; 0x141c <malloc+0x4a>
    1404:	82 81       	ldd	r24, Z+2	; 0x02
    1406:	93 81       	ldd	r25, Z+3	; 0x03
    1408:	20 97       	sbiw	r28, 0x00	; 0
    140a:	19 f0       	breq	.+6      	; 0x1412 <malloc+0x40>
    140c:	9b 83       	std	Y+3, r25	; 0x03
    140e:	8a 83       	std	Y+2, r24	; 0x02
    1410:	2b c0       	rjmp	.+86     	; 0x1468 <malloc+0x96>
    1412:	90 93 49 02 	sts	0x0249, r25
    1416:	80 93 48 02 	sts	0x0248, r24
    141a:	26 c0       	rjmp	.+76     	; 0x1468 <malloc+0x96>
    141c:	21 15       	cp	r18, r1
    141e:	31 05       	cpc	r19, r1
    1420:	19 f0       	breq	.+6      	; 0x1428 <malloc+0x56>
    1422:	42 17       	cp	r20, r18
    1424:	53 07       	cpc	r21, r19
    1426:	18 f4       	brcc	.+6      	; 0x142e <malloc+0x5c>
    1428:	9a 01       	movw	r18, r20
    142a:	be 01       	movw	r22, r28
    142c:	df 01       	movw	r26, r30
    142e:	ef 01       	movw	r28, r30
    1430:	02 80       	ldd	r0, Z+2	; 0x02
    1432:	f3 81       	ldd	r31, Z+3	; 0x03
    1434:	e0 2d       	mov	r30, r0
    1436:	dc cf       	rjmp	.-72     	; 0x13f0 <malloc+0x1e>
    1438:	21 15       	cp	r18, r1
    143a:	31 05       	cpc	r19, r1
    143c:	09 f1       	breq	.+66     	; 0x1480 <malloc+0xae>
    143e:	28 1b       	sub	r18, r24
    1440:	39 0b       	sbc	r19, r25
    1442:	24 30       	cpi	r18, 0x04	; 4
    1444:	31 05       	cpc	r19, r1
    1446:	90 f4       	brcc	.+36     	; 0x146c <malloc+0x9a>
    1448:	12 96       	adiw	r26, 0x02	; 2
    144a:	8d 91       	ld	r24, X+
    144c:	9c 91       	ld	r25, X
    144e:	13 97       	sbiw	r26, 0x03	; 3
    1450:	61 15       	cp	r22, r1
    1452:	71 05       	cpc	r23, r1
    1454:	21 f0       	breq	.+8      	; 0x145e <malloc+0x8c>
    1456:	fb 01       	movw	r30, r22
    1458:	93 83       	std	Z+3, r25	; 0x03
    145a:	82 83       	std	Z+2, r24	; 0x02
    145c:	04 c0       	rjmp	.+8      	; 0x1466 <malloc+0x94>
    145e:	90 93 49 02 	sts	0x0249, r25
    1462:	80 93 48 02 	sts	0x0248, r24
    1466:	fd 01       	movw	r30, r26
    1468:	32 96       	adiw	r30, 0x02	; 2
    146a:	44 c0       	rjmp	.+136    	; 0x14f4 <malloc+0x122>
    146c:	fd 01       	movw	r30, r26
    146e:	e2 0f       	add	r30, r18
    1470:	f3 1f       	adc	r31, r19
    1472:	81 93       	st	Z+, r24
    1474:	91 93       	st	Z+, r25
    1476:	22 50       	subi	r18, 0x02	; 2
    1478:	31 09       	sbc	r19, r1
    147a:	2d 93       	st	X+, r18
    147c:	3c 93       	st	X, r19
    147e:	3a c0       	rjmp	.+116    	; 0x14f4 <malloc+0x122>
    1480:	20 91 46 02 	lds	r18, 0x0246
    1484:	30 91 47 02 	lds	r19, 0x0247
    1488:	23 2b       	or	r18, r19
    148a:	41 f4       	brne	.+16     	; 0x149c <malloc+0xca>
    148c:	20 91 02 01 	lds	r18, 0x0102
    1490:	30 91 03 01 	lds	r19, 0x0103
    1494:	30 93 47 02 	sts	0x0247, r19
    1498:	20 93 46 02 	sts	0x0246, r18
    149c:	20 91 00 01 	lds	r18, 0x0100
    14a0:	30 91 01 01 	lds	r19, 0x0101
    14a4:	21 15       	cp	r18, r1
    14a6:	31 05       	cpc	r19, r1
    14a8:	41 f4       	brne	.+16     	; 0x14ba <malloc+0xe8>
    14aa:	2d b7       	in	r18, 0x3d	; 61
    14ac:	3e b7       	in	r19, 0x3e	; 62
    14ae:	40 91 04 01 	lds	r20, 0x0104
    14b2:	50 91 05 01 	lds	r21, 0x0105
    14b6:	24 1b       	sub	r18, r20
    14b8:	35 0b       	sbc	r19, r21
    14ba:	e0 91 46 02 	lds	r30, 0x0246
    14be:	f0 91 47 02 	lds	r31, 0x0247
    14c2:	e2 17       	cp	r30, r18
    14c4:	f3 07       	cpc	r31, r19
    14c6:	a0 f4       	brcc	.+40     	; 0x14f0 <malloc+0x11e>
    14c8:	2e 1b       	sub	r18, r30
    14ca:	3f 0b       	sbc	r19, r31
    14cc:	28 17       	cp	r18, r24
    14ce:	39 07       	cpc	r19, r25
    14d0:	78 f0       	brcs	.+30     	; 0x14f0 <malloc+0x11e>
    14d2:	ac 01       	movw	r20, r24
    14d4:	4e 5f       	subi	r20, 0xFE	; 254
    14d6:	5f 4f       	sbci	r21, 0xFF	; 255
    14d8:	24 17       	cp	r18, r20
    14da:	35 07       	cpc	r19, r21
    14dc:	48 f0       	brcs	.+18     	; 0x14f0 <malloc+0x11e>
    14de:	4e 0f       	add	r20, r30
    14e0:	5f 1f       	adc	r21, r31
    14e2:	50 93 47 02 	sts	0x0247, r21
    14e6:	40 93 46 02 	sts	0x0246, r20
    14ea:	81 93       	st	Z+, r24
    14ec:	91 93       	st	Z+, r25
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <malloc+0x122>
    14f0:	e0 e0       	ldi	r30, 0x00	; 0
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	cf 01       	movw	r24, r30
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	08 95       	ret

000014fc <free>:
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	00 97       	sbiw	r24, 0x00	; 0
    1506:	09 f4       	brne	.+2      	; 0x150a <free+0xe>
    1508:	8c c0       	rjmp	.+280    	; 0x1622 <free+0x126>
    150a:	fc 01       	movw	r30, r24
    150c:	32 97       	sbiw	r30, 0x02	; 2
    150e:	13 82       	std	Z+3, r1	; 0x03
    1510:	12 82       	std	Z+2, r1	; 0x02
    1512:	00 91 48 02 	lds	r16, 0x0248
    1516:	10 91 49 02 	lds	r17, 0x0249
    151a:	01 15       	cp	r16, r1
    151c:	11 05       	cpc	r17, r1
    151e:	81 f4       	brne	.+32     	; 0x1540 <free+0x44>
    1520:	20 81       	ld	r18, Z
    1522:	31 81       	ldd	r19, Z+1	; 0x01
    1524:	82 0f       	add	r24, r18
    1526:	93 1f       	adc	r25, r19
    1528:	20 91 46 02 	lds	r18, 0x0246
    152c:	30 91 47 02 	lds	r19, 0x0247
    1530:	28 17       	cp	r18, r24
    1532:	39 07       	cpc	r19, r25
    1534:	79 f5       	brne	.+94     	; 0x1594 <free+0x98>
    1536:	f0 93 47 02 	sts	0x0247, r31
    153a:	e0 93 46 02 	sts	0x0246, r30
    153e:	71 c0       	rjmp	.+226    	; 0x1622 <free+0x126>
    1540:	d8 01       	movw	r26, r16
    1542:	40 e0       	ldi	r20, 0x00	; 0
    1544:	50 e0       	ldi	r21, 0x00	; 0
    1546:	ae 17       	cp	r26, r30
    1548:	bf 07       	cpc	r27, r31
    154a:	50 f4       	brcc	.+20     	; 0x1560 <free+0x64>
    154c:	12 96       	adiw	r26, 0x02	; 2
    154e:	2d 91       	ld	r18, X+
    1550:	3c 91       	ld	r19, X
    1552:	13 97       	sbiw	r26, 0x03	; 3
    1554:	ad 01       	movw	r20, r26
    1556:	21 15       	cp	r18, r1
    1558:	31 05       	cpc	r19, r1
    155a:	09 f1       	breq	.+66     	; 0x159e <free+0xa2>
    155c:	d9 01       	movw	r26, r18
    155e:	f3 cf       	rjmp	.-26     	; 0x1546 <free+0x4a>
    1560:	9d 01       	movw	r18, r26
    1562:	da 01       	movw	r26, r20
    1564:	33 83       	std	Z+3, r19	; 0x03
    1566:	22 83       	std	Z+2, r18	; 0x02
    1568:	60 81       	ld	r22, Z
    156a:	71 81       	ldd	r23, Z+1	; 0x01
    156c:	86 0f       	add	r24, r22
    156e:	97 1f       	adc	r25, r23
    1570:	82 17       	cp	r24, r18
    1572:	93 07       	cpc	r25, r19
    1574:	69 f4       	brne	.+26     	; 0x1590 <free+0x94>
    1576:	ec 01       	movw	r28, r24
    1578:	28 81       	ld	r18, Y
    157a:	39 81       	ldd	r19, Y+1	; 0x01
    157c:	26 0f       	add	r18, r22
    157e:	37 1f       	adc	r19, r23
    1580:	2e 5f       	subi	r18, 0xFE	; 254
    1582:	3f 4f       	sbci	r19, 0xFF	; 255
    1584:	31 83       	std	Z+1, r19	; 0x01
    1586:	20 83       	st	Z, r18
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	9b 81       	ldd	r25, Y+3	; 0x03
    158c:	93 83       	std	Z+3, r25	; 0x03
    158e:	82 83       	std	Z+2, r24	; 0x02
    1590:	45 2b       	or	r20, r21
    1592:	29 f4       	brne	.+10     	; 0x159e <free+0xa2>
    1594:	f0 93 49 02 	sts	0x0249, r31
    1598:	e0 93 48 02 	sts	0x0248, r30
    159c:	42 c0       	rjmp	.+132    	; 0x1622 <free+0x126>
    159e:	13 96       	adiw	r26, 0x03	; 3
    15a0:	fc 93       	st	X, r31
    15a2:	ee 93       	st	-X, r30
    15a4:	12 97       	sbiw	r26, 0x02	; 2
    15a6:	ed 01       	movw	r28, r26
    15a8:	49 91       	ld	r20, Y+
    15aa:	59 91       	ld	r21, Y+
    15ac:	9e 01       	movw	r18, r28
    15ae:	24 0f       	add	r18, r20
    15b0:	35 1f       	adc	r19, r21
    15b2:	e2 17       	cp	r30, r18
    15b4:	f3 07       	cpc	r31, r19
    15b6:	71 f4       	brne	.+28     	; 0x15d4 <free+0xd8>
    15b8:	80 81       	ld	r24, Z
    15ba:	91 81       	ldd	r25, Z+1	; 0x01
    15bc:	84 0f       	add	r24, r20
    15be:	95 1f       	adc	r25, r21
    15c0:	02 96       	adiw	r24, 0x02	; 2
    15c2:	11 96       	adiw	r26, 0x01	; 1
    15c4:	9c 93       	st	X, r25
    15c6:	8e 93       	st	-X, r24
    15c8:	82 81       	ldd	r24, Z+2	; 0x02
    15ca:	93 81       	ldd	r25, Z+3	; 0x03
    15cc:	13 96       	adiw	r26, 0x03	; 3
    15ce:	9c 93       	st	X, r25
    15d0:	8e 93       	st	-X, r24
    15d2:	12 97       	sbiw	r26, 0x02	; 2
    15d4:	e0 e0       	ldi	r30, 0x00	; 0
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	d8 01       	movw	r26, r16
    15da:	12 96       	adiw	r26, 0x02	; 2
    15dc:	8d 91       	ld	r24, X+
    15de:	9c 91       	ld	r25, X
    15e0:	13 97       	sbiw	r26, 0x03	; 3
    15e2:	00 97       	sbiw	r24, 0x00	; 0
    15e4:	19 f0       	breq	.+6      	; 0x15ec <free+0xf0>
    15e6:	f8 01       	movw	r30, r16
    15e8:	8c 01       	movw	r16, r24
    15ea:	f6 cf       	rjmp	.-20     	; 0x15d8 <free+0xdc>
    15ec:	8d 91       	ld	r24, X+
    15ee:	9c 91       	ld	r25, X
    15f0:	98 01       	movw	r18, r16
    15f2:	2e 5f       	subi	r18, 0xFE	; 254
    15f4:	3f 4f       	sbci	r19, 0xFF	; 255
    15f6:	82 0f       	add	r24, r18
    15f8:	93 1f       	adc	r25, r19
    15fa:	20 91 46 02 	lds	r18, 0x0246
    15fe:	30 91 47 02 	lds	r19, 0x0247
    1602:	28 17       	cp	r18, r24
    1604:	39 07       	cpc	r19, r25
    1606:	69 f4       	brne	.+26     	; 0x1622 <free+0x126>
    1608:	30 97       	sbiw	r30, 0x00	; 0
    160a:	29 f4       	brne	.+10     	; 0x1616 <free+0x11a>
    160c:	10 92 49 02 	sts	0x0249, r1
    1610:	10 92 48 02 	sts	0x0248, r1
    1614:	02 c0       	rjmp	.+4      	; 0x161a <free+0x11e>
    1616:	13 82       	std	Z+3, r1	; 0x03
    1618:	12 82       	std	Z+2, r1	; 0x02
    161a:	10 93 47 02 	sts	0x0247, r17
    161e:	00 93 46 02 	sts	0x0246, r16
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	1f 91       	pop	r17
    1628:	0f 91       	pop	r16
    162a:	08 95       	ret

0000162c <memset>:
    162c:	dc 01       	movw	r26, r24
    162e:	01 c0       	rjmp	.+2      	; 0x1632 <memset+0x6>
    1630:	6d 93       	st	X+, r22
    1632:	41 50       	subi	r20, 0x01	; 1
    1634:	50 40       	sbci	r21, 0x00	; 0
    1636:	e0 f7       	brcc	.-8      	; 0x1630 <memset+0x4>
    1638:	08 95       	ret

0000163a <_exit>:
    163a:	f8 94       	cli

0000163c <__stop_program>:
    163c:	ff cf       	rjmp	.-2      	; 0x163c <__stop_program>
