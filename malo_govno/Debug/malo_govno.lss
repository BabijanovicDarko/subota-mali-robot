
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00001f00  00001f94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000147  0080011c  0080011c  00001fb0  2**0
                  ALLOC
  3 .debug_aranges 00000268  00000000  00000000  00001fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004e1  00000000  00000000  00002218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018f4  00000000  00000000  000026f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000881  00000000  00000000  00003fed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000019aa  00000000  00000000  0000486e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003b0  00000000  00000000  00006218  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000072c  00000000  00000000  000065c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000220  00000000  00000000  00006cf4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	ICR3 = ((double)F_CPU) / (8 * f_pwm) - 0.5; // FREKVENCIJA PWMA JE ~19kHz
}//END OF servo_init


void servo_position1(unsigned char dutyCycle)
{
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}


unsigned char CAN_CheckRX(unsigned char nodeID)
{
       2:	00 00       	nop

    return 0;
}

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>

	return ODOMETRY_SUCCESS;
}

void stop(int8_t type)
{
       6:	00 00       	nop
unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    timer_callback = callback;
}
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);

	UBRR0H = temp >> 8;
	UBRR0L = temp;
}
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__vector_12>
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ca c0       	rjmp	.+404    	; 0x1de <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 71 0b 	jmp	0x16e2	; 0x16e2 <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e0 e0       	ldi	r30, 0x00	; 0
      a8:	ff e1       	ldi	r31, 0x1F	; 31
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	ac 31       	cpi	r26, 0x1C	; 28
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	ac e1       	ldi	r26, 0x1C	; 28
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a3 36       	cpi	r26, 0x63	; 99
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 7e 0f 	jmp	0x1efc	; 0x1efc <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
#include <stdio.h>
#include "odometry.h"


int main()
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	00 d0       	rcall	.+0      	; 0xd8 <main+0x6>
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
	int i = 0;	
      dc:	1a 82       	std	Y+2, r1	; 0x02
      de:	19 82       	std	Y+1, r1	; 0x01
	
	system_init();
      e0:	0e 94 1f 0a 	call	0x143e	; 0x143e <system_init>
      e4:	10 c0       	rjmp	.+32     	; 0x106 <main+0x34>
	while(1)
	{
		//middle button
		while(i == 0)
		{
			gpio_register_pin(31,GPIO_DIRECTION_INPUT,true);
      e6:	8f e1       	ldi	r24, 0x1F	; 31
      e8:	60 e0       	ldi	r22, 0x00	; 0
      ea:	41 e0       	ldi	r20, 0x01	; 1
      ec:	75 d3       	rcall	.+1770   	; 0x7d8 <gpio_register_pin>
			gpio_debouncer();
      ee:	40 d5       	rcall	.+2688   	; 0xb70 <gpio_debouncer>
			if(gpio_read_pin(31) == 1)
      f0:	8f e1       	ldi	r24, 0x1F	; 31
      f2:	be d4       	rcall	.+2428   	; 0xa70 <gpio_read_pin>
      f4:	81 30       	cpi	r24, 0x01	; 1
      f6:	29 f4       	brne	.+10     	; 0x102 <main+0x30>
			{
				i = 1;
      f8:	81 e0       	ldi	r24, 0x01	; 1
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	9a 83       	std	Y+2, r25	; 0x02
      fe:	89 83       	std	Y+1, r24	; 0x01
     100:	02 c0       	rjmp	.+4      	; 0x106 <main+0x34>
				//_delay_ms(1000);
			}
			else
			{
				i = 0;
     102:	1a 82       	std	Y+2, r1	; 0x02
     104:	19 82       	std	Y+1, r1	; 0x01
	system_init();
	
	while(1)
	{
		//middle button
		while(i == 0)
     106:	89 81       	ldd	r24, Y+1	; 0x01
     108:	9a 81       	ldd	r25, Y+2	; 0x02
     10a:	00 97       	sbiw	r24, 0x00	; 0
     10c:	61 f3       	breq	.-40     	; 0xe6 <main+0x14>
			else
			{
				i = 0;
			}
		}	
		if(i == 1)
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	9a 81       	ldd	r25, Y+2	; 0x02
     112:	81 30       	cpi	r24, 0x01	; 1
     114:	91 05       	cpc	r25, r1
     116:	b9 f7       	brne	.-18     	; 0x106 <main+0x34>
		{
			while(1)
			{
				PORTG = 0xff;
     118:	e4 e3       	ldi	r30, 0x34	; 52
     11a:	f0 e0       	ldi	r31, 0x00	; 0
     11c:	8f ef       	ldi	r24, 0xFF	; 255
     11e:	80 83       	st	Z, r24
				greenside();
     120:	7d d5       	rcall	.+2810   	; 0xc1c <greenside>
     122:	fa cf       	rjmp	.-12     	; 0x118 <main+0x46>

00000124 <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
     124:	0f 93       	push	r16
     126:	1f 93       	push	r17
     128:	df 93       	push	r29
     12a:	cf 93       	push	r28
     12c:	00 d0       	rcall	.+0      	; 0x12e <servo_init+0xa>
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
     132:	9a 83       	std	Y+2, r25	; 0x02
     134:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= (1 << PINE3) | (1 << PINE4) | (1 << PINE5);
     136:	ad e2       	ldi	r26, 0x2D	; 45
     138:	b0 e0       	ldi	r27, 0x00	; 0
     13a:	ed e2       	ldi	r30, 0x2D	; 45
     13c:	f0 e0       	ldi	r31, 0x00	; 0
     13e:	80 81       	ld	r24, Z
     140:	88 63       	ori	r24, 0x38	; 56
     142:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     144:	e4 e9       	ldi	r30, 0x94	; 148
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	11 82       	std	Z+1, r1	; 0x01
     14a:	10 82       	st	Z, r1
	OCR3A = 0;
     14c:	e8 e9       	ldi	r30, 0x98	; 152
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	11 82       	std	Z+1, r1	; 0x01
     152:	10 82       	st	Z, r1
	OCR3B = 0;
     154:	ea e9       	ldi	r30, 0x9A	; 154
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	11 82       	std	Z+1, r1	; 0x01
     15a:	10 82       	st	Z, r1
	OCR3C = 0;
     15c:	ec e9       	ldi	r30, 0x9C	; 156
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	11 82       	std	Z+1, r1	; 0x01
     162:	10 82       	st	Z, r1
	
	TCCR3A = (1 << COM3A1) | (1 << COM3A0) | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     164:	e0 e9       	ldi	r30, 0x90	; 144
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	8e ef       	ldi	r24, 0xFE	; 254
     16a:	80 83       	st	Z, r24
	TCCR3B = (1 << WGM32) | (1 << WGM33) | (1 << CS31); // PRESKALER = 1
     16c:	e1 e9       	ldi	r30, 0x91	; 145
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	8a e1       	ldi	r24, 0x1A	; 26
     172:	80 83       	st	Z, r24
	ICR3 = ((double)F_CPU) / (8 * f_pwm) - 0.5; // FREKVENCIJA PWMA JE ~19kHz
     174:	06 e9       	ldi	r16, 0x96	; 150
     176:	10 e0       	ldi	r17, 0x00	; 0
     178:	89 81       	ldd	r24, Y+1	; 0x01
     17a:	9a 81       	ldd	r25, Y+2	; 0x02
     17c:	88 0f       	add	r24, r24
     17e:	99 1f       	adc	r25, r25
     180:	88 0f       	add	r24, r24
     182:	99 1f       	adc	r25, r25
     184:	88 0f       	add	r24, r24
     186:	99 1f       	adc	r25, r25
     188:	cc 01       	movw	r24, r24
     18a:	a0 e0       	ldi	r26, 0x00	; 0
     18c:	b0 e0       	ldi	r27, 0x00	; 0
     18e:	bc 01       	movw	r22, r24
     190:	cd 01       	movw	r24, r26
     192:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__floatunsisf>
     196:	9b 01       	movw	r18, r22
     198:	ac 01       	movw	r20, r24
     19a:	60 e8       	ldi	r22, 0x80	; 128
     19c:	76 e9       	ldi	r23, 0x96	; 150
     19e:	88 e1       	ldi	r24, 0x18	; 24
     1a0:	9b e4       	ldi	r25, 0x4B	; 75
     1a2:	0e 94 ab 0c 	call	0x1956	; 0x1956 <__divsf3>
     1a6:	dc 01       	movw	r26, r24
     1a8:	cb 01       	movw	r24, r22
     1aa:	bc 01       	movw	r22, r24
     1ac:	cd 01       	movw	r24, r26
     1ae:	20 e0       	ldi	r18, 0x00	; 0
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	5f e3       	ldi	r21, 0x3F	; 63
     1b6:	0e 94 42 0c 	call	0x1884	; 0x1884 <__subsf3>
     1ba:	dc 01       	movw	r26, r24
     1bc:	cb 01       	movw	r24, r22
     1be:	bc 01       	movw	r22, r24
     1c0:	cd 01       	movw	r24, r26
     1c2:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__fixunssfsi>
     1c6:	dc 01       	movw	r26, r24
     1c8:	cb 01       	movw	r24, r22
     1ca:	f8 01       	movw	r30, r16
     1cc:	91 83       	std	Z+1, r25	; 0x01
     1ce:	80 83       	st	Z, r24
}//END OF servo_init
     1d0:	0f 90       	pop	r0
     1d2:	0f 90       	pop	r0
     1d4:	cf 91       	pop	r28
     1d6:	df 91       	pop	r29
     1d8:	1f 91       	pop	r17
     1da:	0f 91       	pop	r16
     1dc:	08 95       	ret

000001de <__vector_18>:
static volatile unsigned char rxCounter[10];
volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     1de:	1f 92       	push	r1
     1e0:	0f 92       	push	r0
     1e2:	0f b6       	in	r0, 0x3f	; 63
     1e4:	0f 92       	push	r0
     1e6:	00 90 5b 00 	lds	r0, 0x005B
     1ea:	0f 92       	push	r0
     1ec:	11 24       	eor	r1, r1
     1ee:	2f 93       	push	r18
     1f0:	3f 93       	push	r19
     1f2:	4f 93       	push	r20
     1f4:	5f 93       	push	r21
     1f6:	8f 93       	push	r24
     1f8:	9f 93       	push	r25
     1fa:	af 93       	push	r26
     1fc:	bf 93       	push	r27
     1fe:	ef 93       	push	r30
     200:	ff 93       	push	r31
     202:	df 93       	push	r29
     204:	cf 93       	push	r28
     206:	00 d0       	rcall	.+0      	; 0x208 <__vector_18+0x2a>
     208:	00 d0       	rcall	.+0      	; 0x20a <__vector_18+0x2c>
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     20e:	ed ee       	ldi	r30, 0xED	; 237
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     216:	1b 82       	std	Y+3, r1	; 0x03
     218:	9c c0       	rjmp	.+312    	; 0x352 <__vector_18+0x174>
	{
		CANPAGE = ch << 4;
     21a:	ed ee       	ldi	r30, 0xED	; 237
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	8b 81       	ldd	r24, Y+3	; 0x03
     220:	82 95       	swap	r24
     222:	80 7f       	andi	r24, 0xF0	; 240
     224:	80 83       	st	Z, r24

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     226:	ee ee       	ldi	r30, 0xEE	; 238
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	80 81       	ld	r24, Z
     22c:	82 95       	swap	r24
     22e:	86 95       	lsr	r24
     230:	87 70       	andi	r24, 0x07	; 7
     232:	88 2f       	mov	r24, r24
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	81 70       	andi	r24, 0x01	; 1
     238:	90 70       	andi	r25, 0x00	; 0
     23a:	88 23       	and	r24, r24
     23c:	09 f4       	brne	.+2      	; 0x240 <__vector_18+0x62>
     23e:	6e c0       	rjmp	.+220    	; 0x31c <__vector_18+0x13e>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     240:	ef ee       	ldi	r30, 0xEF	; 239
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 e8       	ldi	r24, 0x80	; 128
     246:	80 83       	st	Z, r24
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     248:	ae ee       	ldi	r26, 0xEE	; 238
     24a:	b0 e0       	ldi	r27, 0x00	; 0
     24c:	ee ee       	ldi	r30, 0xEE	; 238
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	8f 7d       	andi	r24, 0xDF	; 223
     254:	8c 93       	st	X, r24

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     256:	e2 ef       	ldi	r30, 0xF2	; 242
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	80 81       	ld	r24, Z
     25c:	82 95       	swap	r24
     25e:	86 95       	lsr	r24
     260:	87 70       	andi	r24, 0x07	; 7
     262:	28 2f       	mov	r18, r24
     264:	e3 ef       	ldi	r30, 0xF3	; 243
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	88 2f       	mov	r24, r24
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	88 0f       	add	r24, r24
     270:	99 1f       	adc	r25, r25
     272:	88 0f       	add	r24, r24
     274:	99 1f       	adc	r25, r25
     276:	88 0f       	add	r24, r24
     278:	99 1f       	adc	r25, r25
     27a:	82 2b       	or	r24, r18
     27c:	8a 83       	std	Y+2, r24	; 0x02

			for(i = 0; i < 8; ++i)
     27e:	19 82       	std	Y+1, r1	; 0x01
     280:	2a c0       	rjmp	.+84     	; 0x2d6 <__vector_18+0xf8>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     282:	8a 81       	ldd	r24, Y+2	; 0x02
     284:	28 2f       	mov	r18, r24
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	82 1b       	sub	r24, r18
     28e:	93 0b       	sbc	r25, r19
     290:	88 0f       	add	r24, r24
     292:	99 1f       	adc	r25, r25
     294:	90 95       	com	r25
     296:	81 95       	neg	r24
     298:	9f 4f       	sbci	r25, 0xFF	; 255
     29a:	fc 01       	movw	r30, r24
     29c:	e4 5e       	subi	r30, 0xE4	; 228
     29e:	fe 4f       	sbci	r31, 0xFE	; 254
     2a0:	40 81       	ld	r20, Z
     2a2:	51 81       	ldd	r21, Z+1	; 0x01
     2a4:	8a 81       	ldd	r24, Y+2	; 0x02
     2a6:	88 2f       	mov	r24, r24
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	01 97       	sbiw	r24, 0x01	; 1
     2ac:	fc 01       	movw	r30, r24
     2ae:	e0 5d       	subi	r30, 0xD0	; 208
     2b0:	fe 4f       	sbci	r31, 0xFE	; 254
     2b2:	80 81       	ld	r24, Z
     2b4:	28 2f       	mov	r18, r24
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	89 81       	ldd	r24, Y+1	; 0x01
     2ba:	88 2f       	mov	r24, r24
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	82 0f       	add	r24, r18
     2c0:	93 1f       	adc	r25, r19
     2c2:	da 01       	movw	r26, r20
     2c4:	a8 0f       	add	r26, r24
     2c6:	b9 1f       	adc	r27, r25
     2c8:	ea ef       	ldi	r30, 0xFA	; 250
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 81       	ld	r24, Z
     2ce:	8c 93       	st	X, r24
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     2d0:	89 81       	ldd	r24, Y+1	; 0x01
     2d2:	8f 5f       	subi	r24, 0xFF	; 255
     2d4:	89 83       	std	Y+1, r24	; 0x01
     2d6:	89 81       	ldd	r24, Y+1	; 0x01
     2d8:	88 30       	cpi	r24, 0x08	; 8
     2da:	98 f2       	brcs	.-90     	; 0x282 <__vector_18+0xa4>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     2dc:	8a 81       	ldd	r24, Y+2	; 0x02
     2de:	88 2f       	mov	r24, r24
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	fc 01       	movw	r30, r24
     2e6:	e0 5d       	subi	r30, 0xD0	; 208
     2e8:	fe 4f       	sbci	r31, 0xFE	; 254
     2ea:	80 81       	ld	r24, Z
     2ec:	8f 5f       	subi	r24, 0xFF	; 255
     2ee:	80 83       	st	Z, r24
     2f0:	80 81       	ld	r24, Z
     2f2:	85 30       	cpi	r24, 0x05	; 5
     2f4:	41 f4       	brne	.+16     	; 0x306 <__vector_18+0x128>
				*(rxWrIndex + ide - 1) = 0;
     2f6:	8a 81       	ldd	r24, Y+2	; 0x02
     2f8:	88 2f       	mov	r24, r24
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	01 97       	sbiw	r24, 0x01	; 1
     2fe:	fc 01       	movw	r30, r24
     300:	e0 5d       	subi	r30, 0xD0	; 208
     302:	fe 4f       	sbci	r31, 0xFE	; 254
     304:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     306:	8a 81       	ldd	r24, Y+2	; 0x02
     308:	88 2f       	mov	r24, r24
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	01 97       	sbiw	r24, 0x01	; 1
     30e:	fc 01       	movw	r30, r24
     310:	ec 5b       	subi	r30, 0xBC	; 188
     312:	fe 4f       	sbci	r31, 0xFE	; 254
     314:	80 81       	ld	r24, Z
     316:	8f 5f       	subi	r24, 0xFF	; 255
     318:	80 83       	st	Z, r24
     31a:	1f c0       	rjmp	.+62     	; 0x35a <__vector_18+0x17c>

			break;
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     31c:	ee ee       	ldi	r30, 0xEE	; 238
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	80 81       	ld	r24, Z
     322:	82 95       	swap	r24
     324:	86 95       	lsr	r24
     326:	86 95       	lsr	r24
     328:	83 70       	andi	r24, 0x03	; 3
     32a:	88 2f       	mov	r24, r24
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	81 70       	andi	r24, 0x01	; 1
     330:	90 70       	andi	r25, 0x00	; 0
     332:	88 23       	and	r24, r24
     334:	59 f0       	breq	.+22     	; 0x34c <__vector_18+0x16e>
		{
			CANCDMOB = 0; // disable mob
     336:	ef ee       	ldi	r30, 0xEF	; 239
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     33c:	ae ee       	ldi	r26, 0xEE	; 238
     33e:	b0 e0       	ldi	r27, 0x00	; 0
     340:	ee ee       	ldi	r30, 0xEE	; 238
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	80 81       	ld	r24, Z
     346:	8f 7b       	andi	r24, 0xBF	; 191
     348:	8c 93       	st	X, r24
     34a:	07 c0       	rjmp	.+14     	; 0x35a <__vector_18+0x17c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     34c:	8b 81       	ldd	r24, Y+3	; 0x03
     34e:	8f 5f       	subi	r24, 0xFF	; 255
     350:	8b 83       	std	Y+3, r24	; 0x03
     352:	8b 81       	ldd	r24, Y+3	; 0x03
     354:	8f 30       	cpi	r24, 0x0F	; 15
     356:	08 f4       	brcc	.+2      	; 0x35a <__vector_18+0x17c>
     358:	60 cf       	rjmp	.-320    	; 0x21a <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     35a:	ed ee       	ldi	r30, 0xED	; 237
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	8c 81       	ldd	r24, Y+4	; 0x04
     360:	80 83       	st	Z, r24
	CANGIT = CANGIT; // zato sto tako treba.
     362:	aa ed       	ldi	r26, 0xDA	; 218
     364:	b0 e0       	ldi	r27, 0x00	; 0
     366:	ea ed       	ldi	r30, 0xDA	; 218
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 81       	ld	r24, Z
     36c:	8c 93       	st	X, r24
}
     36e:	0f 90       	pop	r0
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	cf 91       	pop	r28
     378:	df 91       	pop	r29
     37a:	ff 91       	pop	r31
     37c:	ef 91       	pop	r30
     37e:	bf 91       	pop	r27
     380:	af 91       	pop	r26
     382:	9f 91       	pop	r25
     384:	8f 91       	pop	r24
     386:	5f 91       	pop	r21
     388:	4f 91       	pop	r20
     38a:	3f 91       	pop	r19
     38c:	2f 91       	pop	r18
     38e:	0f 90       	pop	r0
     390:	00 92 5b 00 	sts	0x005B, r0
     394:	0f 90       	pop	r0
     396:	0f be       	out	0x3f, r0	; 63
     398:	0f 90       	pop	r0
     39a:	1f 90       	pop	r1
     39c:	18 95       	reti

0000039e <CAN_InitModule>:


static void CAN_InitModule(void)
{
     39e:	df 93       	push	r29
     3a0:	cf 93       	push	r28
     3a2:	00 d0       	rcall	.+0      	; 0x3a4 <CAN_InitModule+0x6>
     3a4:	cd b7       	in	r28, 0x3d	; 61
     3a6:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     3a8:	e8 ed       	ldi	r30, 0xD8	; 216
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	80 83       	st	Z, r24

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     3b0:	1a 82       	std	Y+2, r1	; 0x02
     3b2:	32 c0       	rjmp	.+100    	; 0x418 <CAN_InitModule+0x7a>
	{
		CANPAGE = ch << 4;
     3b4:	ed ee       	ldi	r30, 0xED	; 237
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ba:	82 95       	swap	r24
     3bc:	80 7f       	andi	r24, 0xF0	; 240
     3be:	80 83       	st	Z, r24

		CANSTMOB = 0;
     3c0:	ee ee       	ldi	r30, 0xEE	; 238
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	10 82       	st	Z, r1
		CANCDMOB = 0;
     3c6:	ef ee       	ldi	r30, 0xEF	; 239
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	10 82       	st	Z, r1

		CANIDT1 = 0;
     3cc:	e3 ef       	ldi	r30, 0xF3	; 243
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	10 82       	st	Z, r1
		CANIDT2 = 0;
     3d2:	e2 ef       	ldi	r30, 0xF2	; 242
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	10 82       	st	Z, r1
		CANIDT3 = 0;
     3d8:	e1 ef       	ldi	r30, 0xF1	; 241
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	10 82       	st	Z, r1
		CANIDT4 = 0;
     3de:	e0 ef       	ldi	r30, 0xF0	; 240
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	10 82       	st	Z, r1
		CANIDM1 = 0;
     3e4:	e7 ef       	ldi	r30, 0xF7	; 247
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	10 82       	st	Z, r1
		CANIDM2 = 0;
     3ea:	e6 ef       	ldi	r30, 0xF6	; 246
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	10 82       	st	Z, r1
		CANIDM3 = 0;
     3f0:	e5 ef       	ldi	r30, 0xF5	; 245
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	10 82       	st	Z, r1
		CANIDM4 = 0;
     3f6:	e4 ef       	ldi	r30, 0xF4	; 244
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     3fc:	19 82       	std	Y+1, r1	; 0x01
     3fe:	06 c0       	rjmp	.+12     	; 0x40c <CAN_InitModule+0x6e>
			CANMSG = 0;
     400:	ea ef       	ldi	r30, 0xFA	; 250
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     406:	89 81       	ldd	r24, Y+1	; 0x01
     408:	8f 5f       	subi	r24, 0xFF	; 255
     40a:	89 83       	std	Y+1, r24	; 0x01
     40c:	89 81       	ldd	r24, Y+1	; 0x01
     40e:	88 30       	cpi	r24, 0x08	; 8
     410:	b8 f3       	brcs	.-18     	; 0x400 <CAN_InitModule+0x62>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     412:	8a 81       	ldd	r24, Y+2	; 0x02
     414:	8f 5f       	subi	r24, 0xFF	; 255
     416:	8a 83       	std	Y+2, r24	; 0x02
     418:	8a 81       	ldd	r24, Y+2	; 0x02
     41a:	8f 30       	cpi	r24, 0x0F	; 15
     41c:	58 f2       	brcs	.-106    	; 0x3b4 <CAN_InitModule+0x16>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     41e:	e8 ed       	ldi	r30, 0xD8	; 216
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	82 e0       	ldi	r24, 0x02	; 2
     424:	80 83       	st	Z, r24

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     426:	e2 ee       	ldi	r30, 0xE2	; 226
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	80 83       	st	Z, r24
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     42e:	e3 ee       	ldi	r30, 0xE3	; 227
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	88 e0       	ldi	r24, 0x08	; 8
     434:	80 83       	st	Z, r24
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     436:	e4 ee       	ldi	r30, 0xE4	; 228
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	8e e5       	ldi	r24, 0x5E	; 94
     43c:	80 83       	st	Z, r24

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     43e:	e5 ee       	ldi	r30, 0xE5	; 229
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     444:	eb ed       	ldi	r30, 0xDB	; 219
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	80 eb       	ldi	r24, 0xB0	; 176
     44a:	80 83       	st	Z, r24
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     44c:	ef ed       	ldi	r30, 0xDF	; 223
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	8f e7       	ldi	r24, 0x7F	; 127
     452:	80 83       	st	Z, r24
	CANIE2 = 0xFF;
     454:	ee ed       	ldi	r30, 0xDE	; 222
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	8f ef       	ldi	r24, 0xFF	; 255
     45a:	80 83       	st	Z, r24
	sei();
     45c:	78 94       	sei
}
     45e:	0f 90       	pop	r0
     460:	0f 90       	pop	r0
     462:	cf 91       	pop	r28
     464:	df 91       	pop	r29
     466:	08 95       	ret

00000468 <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
     468:	df 93       	push	r29
     46a:	cf 93       	push	r28
     46c:	00 d0       	rcall	.+0      	; 0x46e <CAN_InitRxMob+0x6>
     46e:	00 d0       	rcall	.+0      	; 0x470 <CAN_InitRxMob+0x8>
     470:	0f 92       	push	r0
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	9c 83       	std	Y+4, r25	; 0x04
     478:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     47a:	ed ee       	ldi	r30, 0xED	; 237
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	80 81       	ld	r24, Z
     480:	89 83       	std	Y+1, r24	; 0x01

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     482:	e9 ed       	ldi	r30, 0xD9	; 217
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	80 81       	ld	r24, Z
     488:	82 95       	swap	r24
     48a:	8f 70       	andi	r24, 0x0F	; 15
     48c:	88 2f       	mov	r24, r24
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	81 70       	andi	r24, 0x01	; 1
     492:	90 70       	andi	r25, 0x00	; 0
     494:	88 23       	and	r24, r24
     496:	a9 f7       	brne	.-22     	; 0x482 <CAN_InitRxMob+0x1a>
     498:	e9 ed       	ldi	r30, 0xD9	; 217
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	80 81       	ld	r24, Z
     49e:	86 95       	lsr	r24
     4a0:	86 95       	lsr	r24
     4a2:	86 95       	lsr	r24
     4a4:	88 2f       	mov	r24, r24
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	81 70       	andi	r24, 0x01	; 1
     4aa:	90 70       	andi	r25, 0x00	; 0
     4ac:	88 23       	and	r24, r24
     4ae:	49 f7       	brne	.-46     	; 0x482 <CAN_InitRxMob+0x1a>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     4b0:	1a 82       	std	Y+2, r1	; 0x02
     4b2:	3f c0       	rjmp	.+126    	; 0x532 <CAN_InitRxMob+0xca>
	{
		CANPAGE = ch << 4;
     4b4:	ed ee       	ldi	r30, 0xED	; 237
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	8a 81       	ldd	r24, Y+2	; 0x02
     4ba:	82 95       	swap	r24
     4bc:	80 7f       	andi	r24, 0xF0	; 240
     4be:	80 83       	st	Z, r24

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     4c0:	ef ee       	ldi	r30, 0xEF	; 239
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	80 81       	ld	r24, Z
     4c6:	82 95       	swap	r24
     4c8:	86 95       	lsr	r24
     4ca:	86 95       	lsr	r24
     4cc:	83 70       	andi	r24, 0x03	; 3
     4ce:	88 23       	and	r24, r24
     4d0:	69 f5       	brne	.+90     	; 0x52c <CAN_InitRxMob+0xc4>
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     4d2:	ef ee       	ldi	r30, 0xEF	; 239
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	8f e0       	ldi	r24, 0x0F	; 15
     4d8:	80 83       	st	Z, r24

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     4da:	e3 ef       	ldi	r30, 0xF3	; 243
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	8b 81       	ldd	r24, Y+3	; 0x03
     4e0:	9c 81       	ldd	r25, Y+4	; 0x04
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	96 95       	lsr	r25
     4e6:	87 95       	ror	r24
     4e8:	96 95       	lsr	r25
     4ea:	87 95       	ror	r24
     4ec:	96 95       	lsr	r25
     4ee:	87 95       	ror	r24
     4f0:	80 83       	st	Z, r24
		CANIDT2 = (ide & 0x00FF) << 5;
     4f2:	e2 ef       	ldi	r30, 0xF2	; 242
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	8b 81       	ldd	r24, Y+3	; 0x03
     4f8:	82 95       	swap	r24
     4fa:	88 0f       	add	r24, r24
     4fc:	80 7e       	andi	r24, 0xE0	; 224
     4fe:	80 83       	st	Z, r24

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     500:	e6 ef       	ldi	r30, 0xF6	; 246
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	80 ee       	ldi	r24, 0xE0	; 224
     506:	80 83       	st	Z, r24
		CANIDM1 = 0xFF;
     508:	e7 ef       	ldi	r30, 0xF7	; 247
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	8f ef       	ldi	r24, 0xFF	; 255
     50e:	80 83       	st	Z, r24

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     510:	af ee       	ldi	r26, 0xEF	; 239
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	ef ee       	ldi	r30, 0xEF	; 239
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	80 81       	ld	r24, Z
     51a:	80 68       	ori	r24, 0x80	; 128
     51c:	8c 93       	st	X, r24

		CANPAGE = tempPage;
     51e:	ed ee       	ldi	r30, 0xED	; 237
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	80 83       	st	Z, r24

		return 1;
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	8d 83       	std	Y+5, r24	; 0x05
     52a:	0c c0       	rjmp	.+24     	; 0x544 <CAN_InitRxMob+0xdc>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     52c:	8a 81       	ldd	r24, Y+2	; 0x02
     52e:	8f 5f       	subi	r24, 0xFF	; 255
     530:	8a 83       	std	Y+2, r24	; 0x02
     532:	8a 81       	ldd	r24, Y+2	; 0x02
     534:	8f 30       	cpi	r24, 0x0F	; 15
     536:	08 f4       	brcc	.+2      	; 0x53a <CAN_InitRxMob+0xd2>
     538:	bd cf       	rjmp	.-134    	; 0x4b4 <CAN_InitRxMob+0x4c>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     53a:	ed ee       	ldi	r30, 0xED	; 237
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	89 81       	ldd	r24, Y+1	; 0x01
     540:	80 83       	st	Z, r24

	return 0;
     542:	1d 82       	std	Y+5, r1	; 0x05
     544:	8d 81       	ldd	r24, Y+5	; 0x05
}
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	cf 91       	pop	r28
     552:	df 91       	pop	r29
     554:	08 95       	ret

00000556 <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	df 93       	push	r29
     55c:	cf 93       	push	r28
     55e:	00 d0       	rcall	.+0      	; 0x560 <CAN_Init+0xa>
     560:	cd b7       	in	r28, 0x3d	; 61
     562:	de b7       	in	r29, 0x3e	; 62
     564:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
     566:	1b df       	rcall	.-458    	; 0x39e <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     568:	19 82       	std	Y+1, r1	; 0x01
     56a:	36 c0       	rjmp	.+108    	; 0x5d8 <CAN_Init+0x82>
	{
		CAN_InitRxMob(i + 1);
     56c:	89 81       	ldd	r24, Y+1	; 0x01
     56e:	88 2f       	mov	r24, r24
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	01 96       	adiw	r24, 0x01	; 1
     574:	79 df       	rcall	.-270    	; 0x468 <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     576:	89 81       	ldd	r24, Y+1	; 0x01
     578:	88 2f       	mov	r24, r24
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	88 0f       	add	r24, r24
     57e:	99 1f       	adc	r25, r25
     580:	8c 01       	movw	r16, r24
     582:	04 5e       	subi	r16, 0xE4	; 228
     584:	1e 4f       	sbci	r17, 0xFE	; 254
     586:	85 e0       	ldi	r24, 0x05	; 5
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	61 e0       	ldi	r22, 0x01	; 1
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <calloc>
     592:	f8 01       	movw	r30, r16
     594:	91 83       	std	Z+1, r25	; 0x01
     596:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     598:	89 81       	ldd	r24, Y+1	; 0x01
     59a:	48 2f       	mov	r20, r24
     59c:	50 e0       	ldi	r21, 0x00	; 0
     59e:	89 81       	ldd	r24, Y+1	; 0x01
     5a0:	28 2f       	mov	r18, r24
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	89 81       	ldd	r24, Y+1	; 0x01
     5a6:	88 2f       	mov	r24, r24
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	fc 01       	movw	r30, r24
     5ac:	ec 5b       	subi	r30, 0xBC	; 188
     5ae:	fe 4f       	sbci	r31, 0xFE	; 254
     5b0:	10 82       	st	Z, r1
     5b2:	fc 01       	movw	r30, r24
     5b4:	ec 5b       	subi	r30, 0xBC	; 188
     5b6:	fe 4f       	sbci	r31, 0xFE	; 254
     5b8:	80 81       	ld	r24, Z
     5ba:	f9 01       	movw	r30, r18
     5bc:	e6 5c       	subi	r30, 0xC6	; 198
     5be:	fe 4f       	sbci	r31, 0xFE	; 254
     5c0:	80 83       	st	Z, r24
     5c2:	f9 01       	movw	r30, r18
     5c4:	e6 5c       	subi	r30, 0xC6	; 198
     5c6:	fe 4f       	sbci	r31, 0xFE	; 254
     5c8:	80 81       	ld	r24, Z
     5ca:	fa 01       	movw	r30, r20
     5cc:	e0 5d       	subi	r30, 0xD0	; 208
     5ce:	fe 4f       	sbci	r31, 0xFE	; 254
     5d0:	80 83       	st	Z, r24

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     5d2:	89 81       	ldd	r24, Y+1	; 0x01
     5d4:	8f 5f       	subi	r24, 0xFF	; 255
     5d6:	89 83       	std	Y+1, r24	; 0x01
     5d8:	99 81       	ldd	r25, Y+1	; 0x01
     5da:	8a 81       	ldd	r24, Y+2	; 0x02
     5dc:	98 17       	cp	r25, r24
     5de:	30 f2       	brcs	.-116    	; 0x56c <CAN_Init+0x16>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	cf 91       	pop	r28
     5e6:	df 91       	pop	r29
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	08 95       	ret

000005ee <CAN_Read>:
	return rxCounter[nodeID - 1];
}


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
     5ee:	df 93       	push	r29
     5f0:	cf 93       	push	r28
     5f2:	00 d0       	rcall	.+0      	; 0x5f4 <CAN_Read+0x6>
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <CAN_Read+0x8>
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	9b 83       	std	Y+3, r25	; 0x03
     5fc:	8a 83       	std	Y+2, r24	; 0x02
     5fe:	6c 83       	std	Y+4, r22	; 0x04
    unsigned char i;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
     600:	8c 81       	ldd	r24, Y+4	; 0x04
     602:	88 2f       	mov	r24, r24
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	01 97       	sbiw	r24, 0x01	; 1
     608:	fc 01       	movw	r30, r24
     60a:	ec 5b       	subi	r30, 0xBC	; 188
     60c:	fe 4f       	sbci	r31, 0xFE	; 254
     60e:	80 81       	ld	r24, Z
     610:	88 23       	and	r24, r24
     612:	b1 f3       	breq	.-20     	; 0x600 <CAN_Read+0x12>

	for(i = 0; i < 8; ++i)
     614:	19 82       	std	Y+1, r1	; 0x01
     616:	30 c0       	rjmp	.+96     	; 0x678 <CAN_Read+0x8a>
		*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
     618:	89 81       	ldd	r24, Y+1	; 0x01
     61a:	28 2f       	mov	r18, r24
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	8a 81       	ldd	r24, Y+2	; 0x02
     620:	9b 81       	ldd	r25, Y+3	; 0x03
     622:	dc 01       	movw	r26, r24
     624:	a2 0f       	add	r26, r18
     626:	b3 1f       	adc	r27, r19
     628:	8c 81       	ldd	r24, Y+4	; 0x04
     62a:	28 2f       	mov	r18, r24
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	82 1b       	sub	r24, r18
     634:	93 0b       	sbc	r25, r19
     636:	88 0f       	add	r24, r24
     638:	99 1f       	adc	r25, r25
     63a:	90 95       	com	r25
     63c:	81 95       	neg	r24
     63e:	9f 4f       	sbci	r25, 0xFF	; 255
     640:	fc 01       	movw	r30, r24
     642:	e4 5e       	subi	r30, 0xE4	; 228
     644:	fe 4f       	sbci	r31, 0xFE	; 254
     646:	40 81       	ld	r20, Z
     648:	51 81       	ldd	r21, Z+1	; 0x01
     64a:	8c 81       	ldd	r24, Y+4	; 0x04
     64c:	88 2f       	mov	r24, r24
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	01 97       	sbiw	r24, 0x01	; 1
     652:	fc 01       	movw	r30, r24
     654:	e6 5c       	subi	r30, 0xC6	; 198
     656:	fe 4f       	sbci	r31, 0xFE	; 254
     658:	80 81       	ld	r24, Z
     65a:	28 2f       	mov	r18, r24
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	89 81       	ldd	r24, Y+1	; 0x01
     660:	88 2f       	mov	r24, r24
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	82 0f       	add	r24, r18
     666:	93 1f       	adc	r25, r19
     668:	fa 01       	movw	r30, r20
     66a:	e8 0f       	add	r30, r24
     66c:	f9 1f       	adc	r31, r25
     66e:	80 81       	ld	r24, Z
     670:	8c 93       	st	X, r24
{
    unsigned char i;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
     672:	89 81       	ldd	r24, Y+1	; 0x01
     674:	8f 5f       	subi	r24, 0xFF	; 255
     676:	89 83       	std	Y+1, r24	; 0x01
     678:	89 81       	ldd	r24, Y+1	; 0x01
     67a:	88 30       	cpi	r24, 0x08	; 8
     67c:	68 f2       	brcs	.-102    	; 0x618 <CAN_Read+0x2a>
		*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
     67e:	8c 81       	ldd	r24, Y+4	; 0x04
     680:	88 2f       	mov	r24, r24
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	01 97       	sbiw	r24, 0x01	; 1
     686:	fc 01       	movw	r30, r24
     688:	e6 5c       	subi	r30, 0xC6	; 198
     68a:	fe 4f       	sbci	r31, 0xFE	; 254
     68c:	80 81       	ld	r24, Z
     68e:	8f 5f       	subi	r24, 0xFF	; 255
     690:	80 83       	st	Z, r24
     692:	80 81       	ld	r24, Z
     694:	85 30       	cpi	r24, 0x05	; 5
     696:	41 f4       	brne	.+16     	; 0x6a8 <CAN_Read+0xba>
		*(rxRdIndex + sendingNodeID - 1) = 0;
     698:	8c 81       	ldd	r24, Y+4	; 0x04
     69a:	88 2f       	mov	r24, r24
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	01 97       	sbiw	r24, 0x01	; 1
     6a0:	fc 01       	movw	r30, r24
     6a2:	e6 5c       	subi	r30, 0xC6	; 198
     6a4:	fe 4f       	sbci	r31, 0xFE	; 254
     6a6:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
     6a8:	8c 81       	ldd	r24, Y+4	; 0x04
     6aa:	88 2f       	mov	r24, r24
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	9c 01       	movw	r18, r24
     6b0:	21 50       	subi	r18, 0x01	; 1
     6b2:	30 40       	sbci	r19, 0x00	; 0
     6b4:	f9 01       	movw	r30, r18
     6b6:	ec 5b       	subi	r30, 0xBC	; 188
     6b8:	fe 4f       	sbci	r31, 0xFE	; 254
     6ba:	80 81       	ld	r24, Z
     6bc:	81 50       	subi	r24, 0x01	; 1
     6be:	f9 01       	movw	r30, r18
     6c0:	ec 5b       	subi	r30, 0xBC	; 188
     6c2:	fe 4f       	sbci	r31, 0xFE	; 254
     6c4:	80 83       	st	Z, r24

	return 0;
     6c6:	80 e0       	ldi	r24, 0x00	; 0
}
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
     6d0:	cf 91       	pop	r28
     6d2:	df 91       	pop	r29
     6d4:	08 95       	ret

000006d6 <CAN_Write>:


char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
     6d6:	df 93       	push	r29
     6d8:	cf 93       	push	r28
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
     6de:	27 97       	sbiw	r28, 0x07	; 7
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	f8 94       	cli
     6e4:	de bf       	out	0x3e, r29	; 62
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	cd bf       	out	0x3d, r28	; 61
     6ea:	9d 83       	std	Y+5, r25	; 0x05
     6ec:	8c 83       	std	Y+4, r24	; 0x04
     6ee:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     6f0:	e9 ed       	ldi	r30, 0xD9	; 217
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	80 81       	ld	r24, Z
     6f6:	82 95       	swap	r24
     6f8:	8f 70       	andi	r24, 0x0F	; 15
     6fa:	88 2f       	mov	r24, r24
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	81 70       	andi	r24, 0x01	; 1
     700:	90 70       	andi	r25, 0x00	; 0
     702:	88 23       	and	r24, r24
     704:	a9 f7       	brne	.-22     	; 0x6f0 <CAN_Write+0x1a>
     706:	e9 ed       	ldi	r30, 0xD9	; 217
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	80 81       	ld	r24, Z
     70c:	86 95       	lsr	r24
     70e:	86 95       	lsr	r24
     710:	86 95       	lsr	r24
     712:	88 2f       	mov	r24, r24
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	81 70       	andi	r24, 0x01	; 1
     718:	90 70       	andi	r25, 0x00	; 0
     71a:	88 23       	and	r24, r24
     71c:	49 f7       	brne	.-46     	; 0x6f0 <CAN_Write+0x1a>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     71e:	ed ee       	ldi	r30, 0xED	; 237
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	80 81       	ld	r24, Z
     724:	89 83       	std	Y+1, r24	; 0x01

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     726:	1a 82       	std	Y+2, r1	; 0x02
     728:	12 c0       	rjmp	.+36     	; 0x74e <CAN_Write+0x78>
	{
		CANPAGE = ch << 4;
     72a:	ed ee       	ldi	r30, 0xED	; 237
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	8a 81       	ldd	r24, Y+2	; 0x02
     730:	82 95       	swap	r24
     732:	80 7f       	andi	r24, 0xF0	; 240
     734:	80 83       	st	Z, r24

		if(!(CANCDMOB >> 6))
     736:	ef ee       	ldi	r30, 0xEF	; 239
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	80 81       	ld	r24, Z
     73c:	82 95       	swap	r24
     73e:	86 95       	lsr	r24
     740:	86 95       	lsr	r24
     742:	83 70       	andi	r24, 0x03	; 3
     744:	88 23       	and	r24, r24
     746:	31 f0       	breq	.+12     	; 0x754 <CAN_Write+0x7e>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     748:	8a 81       	ldd	r24, Y+2	; 0x02
     74a:	8f 5f       	subi	r24, 0xFF	; 255
     74c:	8a 83       	std	Y+2, r24	; 0x02
     74e:	8a 81       	ldd	r24, Y+2	; 0x02
     750:	8f 30       	cpi	r24, 0x0F	; 15
     752:	58 f3       	brcs	.-42     	; 0x72a <CAN_Write+0x54>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
     754:	8a 81       	ldd	r24, Y+2	; 0x02
     756:	8f 30       	cpi	r24, 0x0F	; 15
     758:	19 f4       	brne	.+6      	; 0x760 <CAN_Write+0x8a>
		return -1;
     75a:	8f ef       	ldi	r24, 0xFF	; 255
     75c:	8f 83       	std	Y+7, r24	; 0x07
     75e:	32 c0       	rjmp	.+100    	; 0x7c4 <CAN_Write+0xee>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
     760:	e2 ef       	ldi	r30, 0xF2	; 242
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	8e 81       	ldd	r24, Y+6	; 0x06
     766:	82 95       	swap	r24
     768:	88 0f       	add	r24, r24
     76a:	80 7e       	andi	r24, 0xE0	; 224
     76c:	80 83       	st	Z, r24
	CANIDT1 = (receivingNodeAddress) >> 3;
     76e:	e3 ef       	ldi	r30, 0xF3	; 243
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	86 95       	lsr	r24
     776:	86 95       	lsr	r24
     778:	86 95       	lsr	r24
     77a:	80 83       	st	Z, r24

	// DLC = 8
	CANCDMOB = 8;
     77c:	ef ee       	ldi	r30, 0xEF	; 239
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	88 e0       	ldi	r24, 0x08	; 8
     782:	80 83       	st	Z, r24

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     784:	1b 82       	std	Y+3, r1	; 0x03
     786:	0f c0       	rjmp	.+30     	; 0x7a6 <CAN_Write+0xd0>
		CANMSG = data[i];
     788:	aa ef       	ldi	r26, 0xFA	; 250
     78a:	b0 e0       	ldi	r27, 0x00	; 0
     78c:	8b 81       	ldd	r24, Y+3	; 0x03
     78e:	28 2f       	mov	r18, r24
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	8c 81       	ldd	r24, Y+4	; 0x04
     794:	9d 81       	ldd	r25, Y+5	; 0x05
     796:	fc 01       	movw	r30, r24
     798:	e2 0f       	add	r30, r18
     79a:	f3 1f       	adc	r31, r19
     79c:	80 81       	ld	r24, Z
     79e:	8c 93       	st	X, r24

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     7a0:	8b 81       	ldd	r24, Y+3	; 0x03
     7a2:	8f 5f       	subi	r24, 0xFF	; 255
     7a4:	8b 83       	std	Y+3, r24	; 0x03
     7a6:	8b 81       	ldd	r24, Y+3	; 0x03
     7a8:	88 30       	cpi	r24, 0x08	; 8
     7aa:	70 f3       	brcs	.-36     	; 0x788 <CAN_Write+0xb2>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
     7ac:	af ee       	ldi	r26, 0xEF	; 239
     7ae:	b0 e0       	ldi	r27, 0x00	; 0
     7b0:	ef ee       	ldi	r30, 0xEF	; 239
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	80 81       	ld	r24, Z
     7b6:	80 64       	ori	r24, 0x40	; 64
     7b8:	8c 93       	st	X, r24

	CANPAGE = tempPage;
     7ba:	ed ee       	ldi	r30, 0xED	; 237
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	89 81       	ldd	r24, Y+1	; 0x01
     7c0:	80 83       	st	Z, r24

	return 0;
     7c2:	1f 82       	std	Y+7, r1	; 0x07
     7c4:	8f 81       	ldd	r24, Y+7	; 0x07
}
     7c6:	27 96       	adiw	r28, 0x07	; 7
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	de bf       	out	0x3e, r29	; 62
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	cd bf       	out	0x3d, r28	; 61
     7d2:	cf 91       	pop	r28
     7d4:	df 91       	pop	r29
     7d6:	08 95       	ret

000007d8 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
     7d8:	df 93       	push	r29
     7da:	cf 93       	push	r28
     7dc:	cd b7       	in	r28, 0x3d	; 61
     7de:	de b7       	in	r29, 0x3e	; 62
     7e0:	2c 97       	sbiw	r28, 0x0c	; 12
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	89 87       	std	Y+9, r24	; 0x09
     7ee:	6a 87       	std	Y+10, r22	; 0x0a
     7f0:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     7f2:	80 91 08 01 	lds	r24, 0x0108
     7f6:	90 91 09 01 	lds	r25, 0x0109
     7fa:	9c 83       	std	Y+4, r25	; 0x04
     7fc:	8b 83       	std	Y+3, r24	; 0x03
     7fe:	8b 81       	ldd	r24, Y+3	; 0x03
     800:	9c 81       	ldd	r25, Y+4	; 0x04
     802:	06 97       	sbiw	r24, 0x06	; 6
     804:	98 87       	std	Y+8, r25	; 0x08
     806:	8f 83       	std	Y+7, r24	; 0x07
     808:	14 c0       	rjmp	.+40     	; 0x832 <gpio_register_pin+0x5a>
    {
        if(input->pin == pin)
     80a:	ef 81       	ldd	r30, Y+7	; 0x07
     80c:	f8 85       	ldd	r31, Y+8	; 0x08
     80e:	90 81       	ld	r25, Z
     810:	89 85       	ldd	r24, Y+9	; 0x09
     812:	98 17       	cp	r25, r24
     814:	19 f4       	brne	.+6      	; 0x81c <gpio_register_pin+0x44>
            return 1;
     816:	21 e0       	ldi	r18, 0x01	; 1
     818:	2c 87       	std	Y+12, r18	; 0x0c
     81a:	a7 c0       	rjmp	.+334    	; 0x96a <gpio_register_pin+0x192>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     81c:	ef 81       	ldd	r30, Y+7	; 0x07
     81e:	f8 85       	ldd	r31, Y+8	; 0x08
     820:	80 85       	ldd	r24, Z+8	; 0x08
     822:	91 85       	ldd	r25, Z+9	; 0x09
     824:	9a 83       	std	Y+2, r25	; 0x02
     826:	89 83       	std	Y+1, r24	; 0x01
     828:	89 81       	ldd	r24, Y+1	; 0x01
     82a:	9a 81       	ldd	r25, Y+2	; 0x02
     82c:	06 97       	sbiw	r24, 0x06	; 6
     82e:	98 87       	std	Y+8, r25	; 0x08
     830:	8f 83       	std	Y+7, r24	; 0x07
     832:	8f 81       	ldd	r24, Y+7	; 0x07
     834:	98 85       	ldd	r25, Y+8	; 0x08
     836:	06 96       	adiw	r24, 0x06	; 6
     838:	21 e0       	ldi	r18, 0x01	; 1
     83a:	86 30       	cpi	r24, 0x06	; 6
     83c:	92 07       	cpc	r25, r18
     83e:	29 f7       	brne	.-54     	; 0x80a <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
     840:	89 85       	ldd	r24, Y+9	; 0x09
     842:	86 95       	lsr	r24
     844:	86 95       	lsr	r24
     846:	86 95       	lsr	r24
     848:	8f 5f       	subi	r24, 0xFF	; 255
     84a:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pin_reg = pin % 8;
     84c:	89 85       	ldd	r24, Y+9	; 0x09
     84e:	87 70       	andi	r24, 0x07	; 7
     850:	8d 83       	std	Y+5, r24	; 0x05
	if(direction == GPIO_DIRECTION_OUTPUT)
     852:	8a 85       	ldd	r24, Y+10	; 0x0a
     854:	81 30       	cpi	r24, 0x01	; 1
     856:	09 f0       	breq	.+2      	; 0x85a <gpio_register_pin+0x82>
     858:	48 c0       	rjmp	.+144    	; 0x8ea <gpio_register_pin+0x112>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
     85a:	8e 81       	ldd	r24, Y+6	; 0x06
     85c:	28 2f       	mov	r18, r24
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	c9 01       	movw	r24, r18
     862:	88 0f       	add	r24, r24
     864:	99 1f       	adc	r25, r25
     866:	82 0f       	add	r24, r18
     868:	93 1f       	adc	r25, r19
     86a:	4e 96       	adiw	r24, 0x1e	; 30
     86c:	dc 01       	movw	r26, r24
     86e:	8e 81       	ldd	r24, Y+6	; 0x06
     870:	28 2f       	mov	r18, r24
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	c9 01       	movw	r24, r18
     876:	88 0f       	add	r24, r24
     878:	99 1f       	adc	r25, r25
     87a:	82 0f       	add	r24, r18
     87c:	93 1f       	adc	r25, r19
     87e:	4e 96       	adiw	r24, 0x1e	; 30
     880:	fc 01       	movw	r30, r24
     882:	80 81       	ld	r24, Z
     884:	48 2f       	mov	r20, r24
     886:	8d 81       	ldd	r24, Y+5	; 0x05
     888:	28 2f       	mov	r18, r24
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	02 c0       	rjmp	.+4      	; 0x896 <gpio_register_pin+0xbe>
     892:	88 0f       	add	r24, r24
     894:	99 1f       	adc	r25, r25
     896:	2a 95       	dec	r18
     898:	e2 f7       	brpl	.-8      	; 0x892 <gpio_register_pin+0xba>
     89a:	84 2b       	or	r24, r20
     89c:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     89e:	8e 81       	ldd	r24, Y+6	; 0x06
     8a0:	28 2f       	mov	r18, r24
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	c9 01       	movw	r24, r18
     8a6:	88 0f       	add	r24, r24
     8a8:	99 1f       	adc	r25, r25
     8aa:	82 0f       	add	r24, r18
     8ac:	93 1f       	adc	r25, r19
     8ae:	4f 96       	adiw	r24, 0x1f	; 31
     8b0:	dc 01       	movw	r26, r24
     8b2:	8e 81       	ldd	r24, Y+6	; 0x06
     8b4:	28 2f       	mov	r18, r24
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	c9 01       	movw	r24, r18
     8ba:	88 0f       	add	r24, r24
     8bc:	99 1f       	adc	r25, r25
     8be:	82 0f       	add	r24, r18
     8c0:	93 1f       	adc	r25, r19
     8c2:	4f 96       	adiw	r24, 0x1f	; 31
     8c4:	fc 01       	movw	r30, r24
     8c6:	80 81       	ld	r24, Z
     8c8:	48 2f       	mov	r20, r24
     8ca:	8d 81       	ldd	r24, Y+5	; 0x05
     8cc:	28 2f       	mov	r18, r24
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	02 2e       	mov	r0, r18
     8d6:	02 c0       	rjmp	.+4      	; 0x8dc <gpio_register_pin+0x104>
     8d8:	88 0f       	add	r24, r24
     8da:	99 1f       	adc	r25, r25
     8dc:	0a 94       	dec	r0
     8de:	e2 f7       	brpl	.-8      	; 0x8d8 <gpio_register_pin+0x100>
     8e0:	80 95       	com	r24
     8e2:	84 23       	and	r24, r20
     8e4:	8c 93       	st	X, r24
        return 0;
     8e6:	1c 86       	std	Y+12, r1	; 0x0c
     8e8:	40 c0       	rjmp	.+128    	; 0x96a <gpio_register_pin+0x192>
	}
	else
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     8ea:	8e 81       	ldd	r24, Y+6	; 0x06
     8ec:	28 2f       	mov	r18, r24
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	c9 01       	movw	r24, r18
     8f2:	88 0f       	add	r24, r24
     8f4:	99 1f       	adc	r25, r25
     8f6:	82 0f       	add	r24, r18
     8f8:	93 1f       	adc	r25, r19
     8fa:	4e 96       	adiw	r24, 0x1e	; 30
     8fc:	dc 01       	movw	r26, r24
     8fe:	8e 81       	ldd	r24, Y+6	; 0x06
     900:	28 2f       	mov	r18, r24
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	c9 01       	movw	r24, r18
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	82 0f       	add	r24, r18
     90c:	93 1f       	adc	r25, r19
     90e:	4e 96       	adiw	r24, 0x1e	; 30
     910:	fc 01       	movw	r30, r24
     912:	80 81       	ld	r24, Z
     914:	48 2f       	mov	r20, r24
     916:	8d 81       	ldd	r24, Y+5	; 0x05
     918:	28 2f       	mov	r18, r24
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	02 c0       	rjmp	.+4      	; 0x926 <gpio_register_pin+0x14e>
     922:	88 0f       	add	r24, r24
     924:	99 1f       	adc	r25, r25
     926:	2a 95       	dec	r18
     928:	e2 f7       	brpl	.-8      	; 0x922 <gpio_register_pin+0x14a>
     92a:	80 95       	com	r24
     92c:	84 23       	and	r24, r20
     92e:	8c 93       	st	X, r24

    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
     930:	8a e0       	ldi	r24, 0x0A	; 10
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <malloc>
     938:	98 87       	std	Y+8, r25	; 0x08
     93a:	8f 83       	std	Y+7, r24	; 0x07
    if(input == NULL)
     93c:	8f 81       	ldd	r24, Y+7	; 0x07
     93e:	98 85       	ldd	r25, Y+8	; 0x08
     940:	00 97       	sbiw	r24, 0x00	; 0
     942:	19 f4       	brne	.+6      	; 0x94a <gpio_register_pin+0x172>
        return 1;
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	8c 87       	std	Y+12, r24	; 0x0c
     948:	10 c0       	rjmp	.+32     	; 0x96a <gpio_register_pin+0x192>

    input->pin       = pin;
     94a:	ef 81       	ldd	r30, Y+7	; 0x07
     94c:	f8 85       	ldd	r31, Y+8	; 0x08
     94e:	89 85       	ldd	r24, Y+9	; 0x09
     950:	80 83       	st	Z, r24
    input->pulled_up = pulled_up;
     952:	ef 81       	ldd	r30, Y+7	; 0x07
     954:	f8 85       	ldd	r31, Y+8	; 0x08
     956:	8b 85       	ldd	r24, Y+11	; 0x0b
     958:	81 83       	std	Z+1, r24	; 0x01
    list_add(&input->list, &gpio_inputs);
     95a:	8f 81       	ldd	r24, Y+7	; 0x07
     95c:	98 85       	ldd	r25, Y+8	; 0x08
     95e:	06 96       	adiw	r24, 0x06	; 6
     960:	26 e0       	ldi	r18, 0x06	; 6
     962:	31 e0       	ldi	r19, 0x01	; 1
     964:	b9 01       	movw	r22, r18
     966:	0b d0       	rcall	.+22     	; 0x97e <list_add>

    return 0;
     968:	1c 86       	std	Y+12, r1	; 0x0c
     96a:	8c 85       	ldd	r24, Y+12	; 0x0c
}
     96c:	2c 96       	adiw	r28, 0x0c	; 12
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	de bf       	out	0x3e, r29	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	cd bf       	out	0x3d, r28	; 61
     978:	cf 91       	pop	r28
     97a:	df 91       	pop	r29
     97c:	08 95       	ret

0000097e <list_add>:
    new->prev = prev;
    prev->next = new;
}

static inline void list_add(struct list_head* new, struct list_head* head)
{
     97e:	df 93       	push	r29
     980:	cf 93       	push	r28
     982:	00 d0       	rcall	.+0      	; 0x984 <list_add+0x6>
     984:	00 d0       	rcall	.+0      	; 0x986 <list_add+0x8>
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
     98a:	9a 83       	std	Y+2, r25	; 0x02
     98c:	89 83       	std	Y+1, r24	; 0x01
     98e:	7c 83       	std	Y+4, r23	; 0x04
     990:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
     992:	eb 81       	ldd	r30, Y+3	; 0x03
     994:	fc 81       	ldd	r31, Y+4	; 0x04
     996:	42 81       	ldd	r20, Z+2	; 0x02
     998:	53 81       	ldd	r21, Z+3	; 0x03
     99a:	89 81       	ldd	r24, Y+1	; 0x01
     99c:	9a 81       	ldd	r25, Y+2	; 0x02
     99e:	2b 81       	ldd	r18, Y+3	; 0x03
     9a0:	3c 81       	ldd	r19, Y+4	; 0x04
     9a2:	b9 01       	movw	r22, r18
     9a4:	07 d0       	rcall	.+14     	; 0x9b4 <__list_add>
}
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	0f 90       	pop	r0
     9ae:	cf 91       	pop	r28
     9b0:	df 91       	pop	r29
     9b2:	08 95       	ret

000009b4 <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
     9b4:	df 93       	push	r29
     9b6:	cf 93       	push	r28
     9b8:	00 d0       	rcall	.+0      	; 0x9ba <__list_add+0x6>
     9ba:	00 d0       	rcall	.+0      	; 0x9bc <__list_add+0x8>
     9bc:	00 d0       	rcall	.+0      	; 0x9be <__list_add+0xa>
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
     9c2:	9a 83       	std	Y+2, r25	; 0x02
     9c4:	89 83       	std	Y+1, r24	; 0x01
     9c6:	7c 83       	std	Y+4, r23	; 0x04
     9c8:	6b 83       	std	Y+3, r22	; 0x03
     9ca:	5e 83       	std	Y+6, r21	; 0x06
     9cc:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
     9ce:	ed 81       	ldd	r30, Y+5	; 0x05
     9d0:	fe 81       	ldd	r31, Y+6	; 0x06
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	9a 81       	ldd	r25, Y+2	; 0x02
     9d6:	91 83       	std	Z+1, r25	; 0x01
     9d8:	80 83       	st	Z, r24
    new->next = next;
     9da:	e9 81       	ldd	r30, Y+1	; 0x01
     9dc:	fa 81       	ldd	r31, Y+2	; 0x02
     9de:	8d 81       	ldd	r24, Y+5	; 0x05
     9e0:	9e 81       	ldd	r25, Y+6	; 0x06
     9e2:	93 83       	std	Z+3, r25	; 0x03
     9e4:	82 83       	std	Z+2, r24	; 0x02
    new->prev = prev;
     9e6:	e9 81       	ldd	r30, Y+1	; 0x01
     9e8:	fa 81       	ldd	r31, Y+2	; 0x02
     9ea:	8b 81       	ldd	r24, Y+3	; 0x03
     9ec:	9c 81       	ldd	r25, Y+4	; 0x04
     9ee:	91 83       	std	Z+1, r25	; 0x01
     9f0:	80 83       	st	Z, r24
    prev->next = new;
     9f2:	eb 81       	ldd	r30, Y+3	; 0x03
     9f4:	fc 81       	ldd	r31, Y+4	; 0x04
     9f6:	89 81       	ldd	r24, Y+1	; 0x01
     9f8:	9a 81       	ldd	r25, Y+2	; 0x02
     9fa:	93 83       	std	Z+3, r25	; 0x03
     9fc:	82 83       	std	Z+2, r24	; 0x02
}
     9fe:	26 96       	adiw	r28, 0x06	; 6
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	cd bf       	out	0x3d, r28	; 61
     a0a:	cf 91       	pop	r28
     a0c:	df 91       	pop	r29
     a0e:	08 95       	ret

00000a10 <__gpio_read_pin>:
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
	return 0;
}

static uint8_t __gpio_read_pin(uint8_t pin)
{
     a10:	df 93       	push	r29
     a12:	cf 93       	push	r28
     a14:	00 d0       	rcall	.+0      	; 0xa16 <__gpio_read_pin+0x6>
     a16:	0f 92       	push	r0
     a18:	cd b7       	in	r28, 0x3d	; 61
     a1a:	de b7       	in	r29, 0x3e	; 62
     a1c:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
     a1e:	8b 81       	ldd	r24, Y+3	; 0x03
     a20:	86 95       	lsr	r24
     a22:	86 95       	lsr	r24
     a24:	86 95       	lsr	r24
     a26:	8f 5f       	subi	r24, 0xFF	; 255
     a28:	8a 83       	std	Y+2, r24	; 0x02
    pin = pin % 8;
     a2a:	8b 81       	ldd	r24, Y+3	; 0x03
     a2c:	87 70       	andi	r24, 0x07	; 7
     a2e:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
     a30:	8a 81       	ldd	r24, Y+2	; 0x02
     a32:	28 2f       	mov	r18, r24
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	c9 01       	movw	r24, r18
     a38:	88 0f       	add	r24, r24
     a3a:	99 1f       	adc	r25, r25
     a3c:	82 0f       	add	r24, r18
     a3e:	93 1f       	adc	r25, r19
     a40:	4d 96       	adiw	r24, 0x1d	; 29
     a42:	fc 01       	movw	r30, r24
     a44:	80 81       	ld	r24, Z
     a46:	89 83       	std	Y+1, r24	; 0x01

    return ((temp >> pin) & 0x01);
     a48:	89 81       	ldd	r24, Y+1	; 0x01
     a4a:	28 2f       	mov	r18, r24
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	8b 81       	ldd	r24, Y+3	; 0x03
     a50:	88 2f       	mov	r24, r24
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	a9 01       	movw	r20, r18
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <__gpio_read_pin+0x4c>
     a58:	55 95       	asr	r21
     a5a:	47 95       	ror	r20
     a5c:	8a 95       	dec	r24
     a5e:	e2 f7       	brpl	.-8      	; 0xa58 <__gpio_read_pin+0x48>
     a60:	ca 01       	movw	r24, r20
     a62:	81 70       	andi	r24, 0x01	; 1
}
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	cf 91       	pop	r28
     a6c:	df 91       	pop	r29
     a6e:	08 95       	ret

00000a70 <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
     a70:	df 93       	push	r29
     a72:	cf 93       	push	r28
     a74:	cd b7       	in	r28, 0x3d	; 61
     a76:	de b7       	in	r29, 0x3e	; 62
     a78:	2b 97       	sbiw	r28, 0x0b	; 11
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	de bf       	out	0x3e, r29	; 62
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	cd bf       	out	0x3d, r28	; 61
     a84:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     a86:	80 91 08 01 	lds	r24, 0x0108
     a8a:	90 91 09 01 	lds	r25, 0x0109
     a8e:	9e 83       	std	Y+6, r25	; 0x06
     a90:	8d 83       	std	Y+5, r24	; 0x05
     a92:	8d 81       	ldd	r24, Y+5	; 0x05
     a94:	9e 81       	ldd	r25, Y+6	; 0x06
     a96:	06 97       	sbiw	r24, 0x06	; 6
     a98:	98 87       	std	Y+8, r25	; 0x08
     a9a:	8f 83       	std	Y+7, r24	; 0x07
     a9c:	55 c0       	rjmp	.+170    	; 0xb48 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
     a9e:	ef 81       	ldd	r30, Y+7	; 0x07
     aa0:	f8 85       	ldd	r31, Y+8	; 0x08
     aa2:	90 81       	ld	r25, Z
     aa4:	89 85       	ldd	r24, Y+9	; 0x09
     aa6:	98 17       	cp	r25, r24
     aa8:	09 f0       	breq	.+2      	; 0xaac <gpio_read_pin+0x3c>
     aaa:	43 c0       	rjmp	.+134    	; 0xb32 <gpio_read_pin+0xc2>
        {
            uint8_t i = 0;
     aac:	1c 82       	std	Y+4, r1	; 0x04
     aae:	21 c0       	rjmp	.+66     	; 0xaf2 <gpio_read_pin+0x82>
            while(i < GPIO_DEBOUNCE_COUNT - 1)
            {
                if(input->values[i] != input->values[i + 1])
     ab0:	8c 81       	ldd	r24, Y+4	; 0x04
     ab2:	28 2f       	mov	r18, r24
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	8f 81       	ldd	r24, Y+7	; 0x07
     ab8:	98 85       	ldd	r25, Y+8	; 0x08
     aba:	82 0f       	add	r24, r18
     abc:	93 1f       	adc	r25, r19
     abe:	fc 01       	movw	r30, r24
     ac0:	32 96       	adiw	r30, 0x02	; 2
     ac2:	40 81       	ld	r20, Z
     ac4:	8c 81       	ldd	r24, Y+4	; 0x04
     ac6:	88 2f       	mov	r24, r24
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	9c 01       	movw	r18, r24
     acc:	2f 5f       	subi	r18, 0xFF	; 255
     ace:	3f 4f       	sbci	r19, 0xFF	; 255
     ad0:	8f 81       	ldd	r24, Y+7	; 0x07
     ad2:	98 85       	ldd	r25, Y+8	; 0x08
     ad4:	82 0f       	add	r24, r18
     ad6:	93 1f       	adc	r25, r19
     ad8:	fc 01       	movw	r30, r24
     ada:	32 96       	adiw	r30, 0x02	; 2
     adc:	80 81       	ld	r24, Z
     ade:	48 17       	cp	r20, r24
     ae0:	29 f0       	breq	.+10     	; 0xaec <gpio_read_pin+0x7c>
                    return input->previous_state;
     ae2:	ef 81       	ldd	r30, Y+7	; 0x07
     ae4:	f8 85       	ldd	r31, Y+8	; 0x08
     ae6:	25 81       	ldd	r18, Z+5	; 0x05
     ae8:	2b 87       	std	Y+11, r18	; 0x0b
     aea:	38 c0       	rjmp	.+112    	; 0xb5c <gpio_read_pin+0xec>
                i++;
     aec:	8c 81       	ldd	r24, Y+4	; 0x04
     aee:	8f 5f       	subi	r24, 0xFF	; 255
     af0:	8c 83       	std	Y+4, r24	; 0x04
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
     af2:	8c 81       	ldd	r24, Y+4	; 0x04
     af4:	82 30       	cpi	r24, 0x02	; 2
     af6:	e0 f2       	brcs	.-72     	; 0xab0 <gpio_read_pin+0x40>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
     af8:	ef 81       	ldd	r30, Y+7	; 0x07
     afa:	f8 85       	ldd	r31, Y+8	; 0x08
     afc:	91 81       	ldd	r25, Z+1	; 0x01
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	89 27       	eor	r24, r25
     b02:	88 23       	and	r24, r24
     b04:	29 f0       	breq	.+10     	; 0xb10 <gpio_read_pin+0xa0>
     b06:	ef 81       	ldd	r30, Y+7	; 0x07
     b08:	f8 85       	ldd	r31, Y+8	; 0x08
     b0a:	82 81       	ldd	r24, Z+2	; 0x02
     b0c:	8a 87       	std	Y+10, r24	; 0x0a
     b0e:	08 c0       	rjmp	.+16     	; 0xb20 <gpio_read_pin+0xb0>
     b10:	ef 81       	ldd	r30, Y+7	; 0x07
     b12:	f8 85       	ldd	r31, Y+8	; 0x08
     b14:	82 81       	ldd	r24, Z+2	; 0x02
     b16:	1a 86       	std	Y+10, r1	; 0x0a
     b18:	88 23       	and	r24, r24
     b1a:	11 f4       	brne	.+4      	; 0xb20 <gpio_read_pin+0xb0>
     b1c:	21 e0       	ldi	r18, 0x01	; 1
     b1e:	2a 87       	std	Y+10, r18	; 0x0a
     b20:	8a 85       	ldd	r24, Y+10	; 0x0a
     b22:	8b 83       	std	Y+3, r24	; 0x03
            input->previous_state = state;
     b24:	ef 81       	ldd	r30, Y+7	; 0x07
     b26:	f8 85       	ldd	r31, Y+8	; 0x08
     b28:	8b 81       	ldd	r24, Y+3	; 0x03
     b2a:	85 83       	std	Z+5, r24	; 0x05

            return state;
     b2c:	2b 81       	ldd	r18, Y+3	; 0x03
     b2e:	2b 87       	std	Y+11, r18	; 0x0b
     b30:	15 c0       	rjmp	.+42     	; 0xb5c <gpio_read_pin+0xec>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     b32:	ef 81       	ldd	r30, Y+7	; 0x07
     b34:	f8 85       	ldd	r31, Y+8	; 0x08
     b36:	80 85       	ldd	r24, Z+8	; 0x08
     b38:	91 85       	ldd	r25, Z+9	; 0x09
     b3a:	9a 83       	std	Y+2, r25	; 0x02
     b3c:	89 83       	std	Y+1, r24	; 0x01
     b3e:	89 81       	ldd	r24, Y+1	; 0x01
     b40:	9a 81       	ldd	r25, Y+2	; 0x02
     b42:	06 97       	sbiw	r24, 0x06	; 6
     b44:	98 87       	std	Y+8, r25	; 0x08
     b46:	8f 83       	std	Y+7, r24	; 0x07
     b48:	8f 81       	ldd	r24, Y+7	; 0x07
     b4a:	98 85       	ldd	r25, Y+8	; 0x08
     b4c:	06 96       	adiw	r24, 0x06	; 6
     b4e:	21 e0       	ldi	r18, 0x01	; 1
     b50:	86 30       	cpi	r24, 0x06	; 6
     b52:	92 07       	cpc	r25, r18
     b54:	09 f0       	breq	.+2      	; 0xb58 <gpio_read_pin+0xe8>
     b56:	a3 cf       	rjmp	.-186    	; 0xa9e <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	8b 87       	std	Y+11, r24	; 0x0b
     b5c:	8b 85       	ldd	r24, Y+11	; 0x0b
}
     b5e:	2b 96       	adiw	r28, 0x0b	; 11
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	f8 94       	cli
     b64:	de bf       	out	0x3e, r29	; 62
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	cd bf       	out	0x3d, r28	; 61
     b6a:	cf 91       	pop	r28
     b6c:	df 91       	pop	r29
     b6e:	08 95       	ret

00000b70 <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
     b70:	0f 93       	push	r16
     b72:	1f 93       	push	r17
     b74:	df 93       	push	r29
     b76:	cf 93       	push	r28
     b78:	00 d0       	rcall	.+0      	; 0xb7a <gpio_debouncer+0xa>
     b7a:	00 d0       	rcall	.+0      	; 0xb7c <gpio_debouncer+0xc>
     b7c:	00 d0       	rcall	.+0      	; 0xb7e <gpio_debouncer+0xe>
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     b82:	80 91 08 01 	lds	r24, 0x0108
     b86:	90 91 09 01 	lds	r25, 0x0109
     b8a:	9c 83       	std	Y+4, r25	; 0x04
     b8c:	8b 83       	std	Y+3, r24	; 0x03
     b8e:	8b 81       	ldd	r24, Y+3	; 0x03
     b90:	9c 81       	ldd	r25, Y+4	; 0x04
     b92:	06 97       	sbiw	r24, 0x06	; 6
     b94:	9e 83       	std	Y+6, r25	; 0x06
     b96:	8d 83       	std	Y+5, r24	; 0x05
     b98:	1b c0       	rjmp	.+54     	; 0xbd0 <gpio_debouncer+0x60>
    {
        input->values[count] = __gpio_read_pin(input->pin);
     b9a:	00 91 4e 01 	lds	r16, 0x014E
     b9e:	10 91 4f 01 	lds	r17, 0x014F
     ba2:	ed 81       	ldd	r30, Y+5	; 0x05
     ba4:	fe 81       	ldd	r31, Y+6	; 0x06
     ba6:	80 81       	ld	r24, Z
     ba8:	33 df       	rcall	.-410    	; 0xa10 <__gpio_read_pin>
     baa:	28 2f       	mov	r18, r24
     bac:	8d 81       	ldd	r24, Y+5	; 0x05
     bae:	9e 81       	ldd	r25, Y+6	; 0x06
     bb0:	80 0f       	add	r24, r16
     bb2:	91 1f       	adc	r25, r17
     bb4:	fc 01       	movw	r30, r24
     bb6:	32 96       	adiw	r30, 0x02	; 2
     bb8:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     bba:	ed 81       	ldd	r30, Y+5	; 0x05
     bbc:	fe 81       	ldd	r31, Y+6	; 0x06
     bbe:	80 85       	ldd	r24, Z+8	; 0x08
     bc0:	91 85       	ldd	r25, Z+9	; 0x09
     bc2:	9a 83       	std	Y+2, r25	; 0x02
     bc4:	89 83       	std	Y+1, r24	; 0x01
     bc6:	89 81       	ldd	r24, Y+1	; 0x01
     bc8:	9a 81       	ldd	r25, Y+2	; 0x02
     bca:	06 97       	sbiw	r24, 0x06	; 6
     bcc:	9e 83       	std	Y+6, r25	; 0x06
     bce:	8d 83       	std	Y+5, r24	; 0x05
     bd0:	8d 81       	ldd	r24, Y+5	; 0x05
     bd2:	9e 81       	ldd	r25, Y+6	; 0x06
     bd4:	06 96       	adiw	r24, 0x06	; 6
     bd6:	21 e0       	ldi	r18, 0x01	; 1
     bd8:	86 30       	cpi	r24, 0x06	; 6
     bda:	92 07       	cpc	r25, r18
     bdc:	f1 f6       	brne	.-68     	; 0xb9a <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
     bde:	80 91 4e 01 	lds	r24, 0x014E
     be2:	90 91 4f 01 	lds	r25, 0x014F
     be6:	01 96       	adiw	r24, 0x01	; 1
     be8:	90 93 4f 01 	sts	0x014F, r25
     bec:	80 93 4e 01 	sts	0x014E, r24
     bf0:	80 91 4e 01 	lds	r24, 0x014E
     bf4:	90 91 4f 01 	lds	r25, 0x014F
     bf8:	83 30       	cpi	r24, 0x03	; 3
     bfa:	91 05       	cpc	r25, r1
     bfc:	21 f4       	brne	.+8      	; 0xc06 <gpio_debouncer+0x96>
        count = 0;
     bfe:	10 92 4f 01 	sts	0x014F, r1
     c02:	10 92 4e 01 	sts	0x014E, r1
	
}
     c06:	26 96       	adiw	r28, 0x06	; 6
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	f8 94       	cli
     c0c:	de bf       	out	0x3e, r29	; 62
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	cd bf       	out	0x3d, r28	; 61
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	1f 91       	pop	r17
     c18:	0f 91       	pop	r16
     c1a:	08 95       	ret

00000c1c <greenside>:
{
	{{200,500}, NORMAL_SPEED, FORWARD, NULL}
};

void greenside(void)
{
     c1c:	df 93       	push	r29
     c1e:	cf 93       	push	r28
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	2b 97       	sbiw	r28, 0x0b	; 11
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	de bf       	out	0x3e, r29	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	uint8_t current_position = 0; 
     c30:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t next_position = 0; 
     c32:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t odometry_status;
	uint8_t active_state = ROBOT_STATE_TACTIC_ONE;
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	89 83       	std	Y+1, r24	; 0x01

	starting_position.x     = 0;
     c38:	1e 82       	std	Y+6, r1	; 0x06
     c3a:	1d 82       	std	Y+5, r1	; 0x05
	starting_position.y     = 0;
     c3c:	18 86       	std	Y+8, r1	; 0x08
     c3e:	1f 82       	std	Y+7, r1	; 0x07
	starting_position.angle = 0;
     c40:	1a 86       	std	Y+10, r1	; 0x0a
     c42:	19 86       	std	Y+9, r1	; 0x09
	 
	odometry_set_position(&starting_position);
     c44:	ce 01       	movw	r24, r28
     c46:	05 96       	adiw	r24, 0x05	; 5
     c48:	a5 d2       	rcall	.+1354   	; 0x1194 <odometry_set_position>
	 
	while(1)
	{
		switch(active_state)
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	88 2f       	mov	r24, r24
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	81 30       	cpi	r24, 0x01	; 1
     c52:	91 05       	cpc	r25, r1
     c54:	d1 f7       	brne	.-12     	; 0xc4a <greenside+0x2e>
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
     c56:	8b 81       	ldd	r24, Y+3	; 0x03
     c58:	8c 83       	std	Y+4, r24	; 0x04
     c5a:	5c c0       	rjmp	.+184    	; 0xd14 <greenside+0xf8>
				{
					odometry_status = odometry_move_to_position(&green_tactic_one_positions[current_position].point, green_tactic_one_positions[current_position].speed,
     c5c:	8c 81       	ldd	r24, Y+4	; 0x04
     c5e:	48 2f       	mov	r20, r24
     c60:	50 e0       	ldi	r21, 0x00	; 0
     c62:	ca 01       	movw	r24, r20
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	9c 01       	movw	r18, r24
     c6a:	22 0f       	add	r18, r18
     c6c:	33 1f       	adc	r19, r19
     c6e:	22 0f       	add	r18, r18
     c70:	33 1f       	adc	r19, r19
     c72:	82 0f       	add	r24, r18
     c74:	93 1f       	adc	r25, r19
     c76:	84 0f       	add	r24, r20
     c78:	95 1f       	adc	r25, r21
     c7a:	8f 5e       	subi	r24, 0xEF	; 239
     c7c:	9e 4f       	sbci	r25, 0xFE	; 254
     c7e:	bc 01       	movw	r22, r24
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
     c82:	48 2f       	mov	r20, r24
     c84:	50 e0       	ldi	r21, 0x00	; 0
     c86:	ca 01       	movw	r24, r20
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	9c 01       	movw	r18, r24
     c8e:	22 0f       	add	r18, r18
     c90:	33 1f       	adc	r19, r19
     c92:	22 0f       	add	r18, r18
     c94:	33 1f       	adc	r19, r19
     c96:	82 0f       	add	r24, r18
     c98:	93 1f       	adc	r25, r19
     c9a:	84 0f       	add	r24, r20
     c9c:	95 1f       	adc	r25, r21
     c9e:	fc 01       	movw	r30, r24
     ca0:	e8 5e       	subi	r30, 0xE8	; 232
     ca2:	fe 4f       	sbci	r31, 0xFE	; 254
     ca4:	a0 81       	ld	r26, Z
     ca6:	8c 81       	ldd	r24, Y+4	; 0x04
     ca8:	48 2f       	mov	r20, r24
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	ca 01       	movw	r24, r20
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	9c 01       	movw	r18, r24
     cb4:	22 0f       	add	r18, r18
     cb6:	33 1f       	adc	r19, r19
     cb8:	22 0f       	add	r18, r18
     cba:	33 1f       	adc	r19, r19
     cbc:	82 0f       	add	r24, r18
     cbe:	93 1f       	adc	r25, r19
     cc0:	84 0f       	add	r24, r20
     cc2:	95 1f       	adc	r25, r21
     cc4:	fc 01       	movw	r30, r24
     cc6:	e7 5e       	subi	r30, 0xE7	; 231
     cc8:	fe 4f       	sbci	r31, 0xFE	; 254
     cca:	b0 81       	ld	r27, Z
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	48 2f       	mov	r20, r24
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	ca 01       	movw	r24, r20
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	9c 01       	movw	r18, r24
     cda:	22 0f       	add	r18, r18
     cdc:	33 1f       	adc	r19, r19
     cde:	22 0f       	add	r18, r18
     ce0:	33 1f       	adc	r19, r19
     ce2:	82 0f       	add	r24, r18
     ce4:	93 1f       	adc	r25, r19
     ce6:	84 0f       	add	r24, r20
     ce8:	95 1f       	adc	r25, r21
     cea:	fc 01       	movw	r30, r24
     cec:	e6 5e       	subi	r30, 0xE6	; 230
     cee:	fe 4f       	sbci	r31, 0xFE	; 254
     cf0:	20 81       	ld	r18, Z
     cf2:	31 81       	ldd	r19, Z+1	; 0x01
     cf4:	cb 01       	movw	r24, r22
     cf6:	6a 2f       	mov	r22, r26
     cf8:	4b 2f       	mov	r20, r27
     cfa:	9b d1       	rcall	.+822    	; 0x1032 <odometry_move_to_position>
     cfc:	8a 83       	std	Y+2, r24	; 0x02
																green_tactic_one_positions[current_position].direction, green_tactic_one_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	81 30       	cpi	r24, 0x01	; 1
     d02:	09 f4       	brne	.+2      	; 0xd06 <greenside+0xea>
     d04:	a2 cf       	rjmp	.-188    	; 0xc4a <greenside+0x2e>
					{
						break;
					}
					if(current_position == 0)
     d06:	8c 81       	ldd	r24, Y+4	; 0x04
     d08:	88 23       	and	r24, r24
     d0a:	09 f4       	brne	.+2      	; 0xd0e <greenside+0xf2>
     d0c:	ff cf       	rjmp	.-2      	; 0xd0c <greenside+0xf0>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
     d0e:	8c 81       	ldd	r24, Y+4	; 0x04
     d10:	8f 5f       	subi	r24, 0xFF	; 255
     d12:	8c 83       	std	Y+4, r24	; 0x04
     d14:	8c 81       	ldd	r24, Y+4	; 0x04
     d16:	88 23       	and	r24, r24
     d18:	09 f4       	brne	.+2      	; 0xd1c <greenside+0x100>
     d1a:	a0 cf       	rjmp	.-192    	; 0xc5c <greenside+0x40>
     d1c:	96 cf       	rjmp	.-212    	; 0xc4a <greenside+0x2e>

00000d1e <odometry_set_speed>:
	.angle = 0,
	.state = IDLE
};

void odometry_set_speed(uint8_t speed)
{
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	67 97       	sbiw	r28, 0x17	; 23
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	cd bf       	out	0x3d, r28	; 61
     d32:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
     d34:	90 91 50 01 	lds	r25, 0x0150
     d38:	8f 89       	ldd	r24, Y+23	; 0x17
     d3a:	89 17       	cp	r24, r25
     d3c:	09 f4       	brne	.+2      	; 0xd40 <odometry_set_speed+0x22>
     d3e:	7b c0       	rjmp	.+246    	; 0xe36 <odometry_set_speed+0x118>
		return;

	uint8_t buffer[8];
	buffer[0] = 'V';
     d40:	86 e5       	ldi	r24, 0x56	; 86
     d42:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
     d44:	8f 89       	ldd	r24, Y+23	; 0x17
     d46:	88 8b       	std	Y+16, r24	; 0x10
     d48:	6c c0       	rjmp	.+216    	; 0xe22 <odometry_set_speed+0x104>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	a8 e4       	ldi	r26, 0x48	; 72
     d50:	b2 e4       	ldi	r27, 0x42	; 66
     d52:	8b 87       	std	Y+11, r24	; 0x0b
     d54:	9c 87       	std	Y+12, r25	; 0x0c
     d56:	ad 87       	std	Y+13, r26	; 0x0d
     d58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d5a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d5c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d5e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d60:	9e 85       	ldd	r25, Y+14	; 0x0e
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e4       	ldi	r19, 0x40	; 64
     d66:	4c e1       	ldi	r20, 0x1C	; 28
     d68:	55 e4       	ldi	r21, 0x45	; 69
     d6a:	3f d7       	rcall	.+3710   	; 0x1bea <__mulsf3>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	8f 83       	std	Y+7, r24	; 0x07
     d72:	98 87       	std	Y+8, r25	; 0x08
     d74:	a9 87       	std	Y+9, r26	; 0x09
     d76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d78:	6f 81       	ldd	r22, Y+7	; 0x07
     d7a:	78 85       	ldd	r23, Y+8	; 0x08
     d7c:	89 85       	ldd	r24, Y+9	; 0x09
     d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 e8       	ldi	r20, 0x80	; 128
     d86:	5f e3       	ldi	r21, 0x3F	; 63
     d88:	e2 d5       	rcall	.+3012   	; 0x194e <__cmpsf2>
     d8a:	88 23       	and	r24, r24
     d8c:	2c f4       	brge	.+10     	; 0xd98 <odometry_set_speed+0x7a>
		__ticks = 1;
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	9e 83       	std	Y+6, r25	; 0x06
     d94:	8d 83       	std	Y+5, r24	; 0x05
     d96:	3b c0       	rjmp	.+118    	; 0xe0e <odometry_set_speed+0xf0>
	else if (__tmp > 65535)
     d98:	6f 81       	ldd	r22, Y+7	; 0x07
     d9a:	78 85       	ldd	r23, Y+8	; 0x08
     d9c:	89 85       	ldd	r24, Y+9	; 0x09
     d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	3f ef       	ldi	r19, 0xFF	; 255
     da4:	4f e7       	ldi	r20, 0x7F	; 127
     da6:	57 e4       	ldi	r21, 0x47	; 71
     da8:	1c d7       	rcall	.+3640   	; 0x1be2 <__gesf2>
     daa:	18 16       	cp	r1, r24
     dac:	3c f5       	brge	.+78     	; 0xdfc <odometry_set_speed+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dae:	6b 85       	ldd	r22, Y+11	; 0x0b
     db0:	7c 85       	ldd	r23, Y+12	; 0x0c
     db2:	8d 85       	ldd	r24, Y+13	; 0x0d
     db4:	9e 85       	ldd	r25, Y+14	; 0x0e
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	40 e2       	ldi	r20, 0x20	; 32
     dbc:	51 e4       	ldi	r21, 0x41	; 65
     dbe:	15 d7       	rcall	.+3626   	; 0x1bea <__mulsf3>
     dc0:	dc 01       	movw	r26, r24
     dc2:	cb 01       	movw	r24, r22
     dc4:	bc 01       	movw	r22, r24
     dc6:	cd 01       	movw	r24, r26
     dc8:	2e d6       	rcall	.+3164   	; 0x1a26 <__fixunssfsi>
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	9e 83       	std	Y+6, r25	; 0x06
     dd0:	8d 83       	std	Y+5, r24	; 0x05
     dd2:	0f c0       	rjmp	.+30     	; 0xdf2 <odometry_set_speed+0xd4>
     dd4:	8a ef       	ldi	r24, 0xFA	; 250
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	9c 83       	std	Y+4, r25	; 0x04
     dda:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	9c 81       	ldd	r25, Y+4	; 0x04
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	f1 f7       	brne	.-4      	; 0xde0 <odometry_set_speed+0xc2>
     de4:	9c 83       	std	Y+4, r25	; 0x04
     de6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de8:	8d 81       	ldd	r24, Y+5	; 0x05
     dea:	9e 81       	ldd	r25, Y+6	; 0x06
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	9e 83       	std	Y+6, r25	; 0x06
     df0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df2:	8d 81       	ldd	r24, Y+5	; 0x05
     df4:	9e 81       	ldd	r25, Y+6	; 0x06
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	69 f7       	brne	.-38     	; 0xdd4 <odometry_set_speed+0xb6>
     dfa:	13 c0       	rjmp	.+38     	; 0xe22 <odometry_set_speed+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dfc:	6f 81       	ldd	r22, Y+7	; 0x07
     dfe:	78 85       	ldd	r23, Y+8	; 0x08
     e00:	89 85       	ldd	r24, Y+9	; 0x09
     e02:	9a 85       	ldd	r25, Y+10	; 0x0a
     e04:	10 d6       	rcall	.+3104   	; 0x1a26 <__fixunssfsi>
     e06:	dc 01       	movw	r26, r24
     e08:	cb 01       	movw	r24, r22
     e0a:	9e 83       	std	Y+6, r25	; 0x06
     e0c:	8d 83       	std	Y+5, r24	; 0x05
     e0e:	8d 81       	ldd	r24, Y+5	; 0x05
     e10:	9e 81       	ldd	r25, Y+6	; 0x06
     e12:	9a 83       	std	Y+2, r25	; 0x02
     e14:	89 83       	std	Y+1, r24	; 0x01
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	9a 81       	ldd	r25, Y+2	; 0x02
     e1a:	01 97       	sbiw	r24, 0x01	; 1
     e1c:	f1 f7       	brne	.-4      	; 0xe1a <odometry_set_speed+0xfc>
     e1e:	9a 83       	std	Y+2, r25	; 0x02
     e20:	89 83       	std	Y+1, r24	; 0x01
     e22:	ce 01       	movw	r24, r28
     e24:	0f 96       	adiw	r24, 0x0f	; 15
     e26:	63 ec       	ldi	r22, 0xC3	; 195
     e28:	56 dc       	rcall	.-1876   	; 0x6d6 <CAN_Write>
     e2a:	88 23       	and	r24, r24
     e2c:	09 f0       	breq	.+2      	; 0xe30 <odometry_set_speed+0x112>
     e2e:	8d cf       	rjmp	.-230    	; 0xd4a <odometry_set_speed+0x2c>
		_delay_ms(50);

	current_speed = speed;
     e30:	8f 89       	ldd	r24, Y+23	; 0x17
     e32:	80 93 50 01 	sts	0x0150, r24
}
     e36:	67 96       	adiw	r28, 0x17	; 23
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	08 95       	ret

00000e48 <odometry_query_position>:

static void odometry_query_position(void)
{
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	66 97       	sbiw	r28, 0x16	; 22
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
     e5c:	80 e5       	ldi	r24, 0x50	; 80
     e5e:	8f 87       	std	Y+15, r24	; 0x0f
     e60:	6c c0       	rjmp	.+216    	; 0xf3a <odometry_query_position+0xf2>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	a8 e4       	ldi	r26, 0x48	; 72
     e68:	b2 e4       	ldi	r27, 0x42	; 66
     e6a:	8b 87       	std	Y+11, r24	; 0x0b
     e6c:	9c 87       	std	Y+12, r25	; 0x0c
     e6e:	ad 87       	std	Y+13, r26	; 0x0d
     e70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e72:	6b 85       	ldd	r22, Y+11	; 0x0b
     e74:	7c 85       	ldd	r23, Y+12	; 0x0c
     e76:	8d 85       	ldd	r24, Y+13	; 0x0d
     e78:	9e 85       	ldd	r25, Y+14	; 0x0e
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e4       	ldi	r19, 0x40	; 64
     e7e:	4c e1       	ldi	r20, 0x1C	; 28
     e80:	55 e4       	ldi	r21, 0x45	; 69
     e82:	b3 d6       	rcall	.+3430   	; 0x1bea <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	8f 83       	std	Y+7, r24	; 0x07
     e8a:	98 87       	std	Y+8, r25	; 0x08
     e8c:	a9 87       	std	Y+9, r26	; 0x09
     e8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e90:	6f 81       	ldd	r22, Y+7	; 0x07
     e92:	78 85       	ldd	r23, Y+8	; 0x08
     e94:	89 85       	ldd	r24, Y+9	; 0x09
     e96:	9a 85       	ldd	r25, Y+10	; 0x0a
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 e8       	ldi	r20, 0x80	; 128
     e9e:	5f e3       	ldi	r21, 0x3F	; 63
     ea0:	56 d5       	rcall	.+2732   	; 0x194e <__cmpsf2>
     ea2:	88 23       	and	r24, r24
     ea4:	2c f4       	brge	.+10     	; 0xeb0 <odometry_query_position+0x68>
		__ticks = 1;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	9e 83       	std	Y+6, r25	; 0x06
     eac:	8d 83       	std	Y+5, r24	; 0x05
     eae:	3b c0       	rjmp	.+118    	; 0xf26 <odometry_query_position+0xde>
	else if (__tmp > 65535)
     eb0:	6f 81       	ldd	r22, Y+7	; 0x07
     eb2:	78 85       	ldd	r23, Y+8	; 0x08
     eb4:	89 85       	ldd	r24, Y+9	; 0x09
     eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	3f ef       	ldi	r19, 0xFF	; 255
     ebc:	4f e7       	ldi	r20, 0x7F	; 127
     ebe:	57 e4       	ldi	r21, 0x47	; 71
     ec0:	90 d6       	rcall	.+3360   	; 0x1be2 <__gesf2>
     ec2:	18 16       	cp	r1, r24
     ec4:	3c f5       	brge	.+78     	; 0xf14 <odometry_query_position+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ec6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ec8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eca:	8d 85       	ldd	r24, Y+13	; 0x0d
     ecc:	9e 85       	ldd	r25, Y+14	; 0x0e
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	40 e2       	ldi	r20, 0x20	; 32
     ed4:	51 e4       	ldi	r21, 0x41	; 65
     ed6:	89 d6       	rcall	.+3346   	; 0x1bea <__mulsf3>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	bc 01       	movw	r22, r24
     ede:	cd 01       	movw	r24, r26
     ee0:	a2 d5       	rcall	.+2884   	; 0x1a26 <__fixunssfsi>
     ee2:	dc 01       	movw	r26, r24
     ee4:	cb 01       	movw	r24, r22
     ee6:	9e 83       	std	Y+6, r25	; 0x06
     ee8:	8d 83       	std	Y+5, r24	; 0x05
     eea:	0f c0       	rjmp	.+30     	; 0xf0a <odometry_query_position+0xc2>
     eec:	8a ef       	ldi	r24, 0xFA	; 250
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	9c 83       	std	Y+4, r25	; 0x04
     ef2:	8b 83       	std	Y+3, r24	; 0x03
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	9c 81       	ldd	r25, Y+4	; 0x04
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	f1 f7       	brne	.-4      	; 0xef8 <odometry_query_position+0xb0>
     efc:	9c 83       	std	Y+4, r25	; 0x04
     efe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f00:	8d 81       	ldd	r24, Y+5	; 0x05
     f02:	9e 81       	ldd	r25, Y+6	; 0x06
     f04:	01 97       	sbiw	r24, 0x01	; 1
     f06:	9e 83       	std	Y+6, r25	; 0x06
     f08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f0a:	8d 81       	ldd	r24, Y+5	; 0x05
     f0c:	9e 81       	ldd	r25, Y+6	; 0x06
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	69 f7       	brne	.-38     	; 0xeec <odometry_query_position+0xa4>
     f12:	13 c0       	rjmp	.+38     	; 0xf3a <odometry_query_position+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f14:	6f 81       	ldd	r22, Y+7	; 0x07
     f16:	78 85       	ldd	r23, Y+8	; 0x08
     f18:	89 85       	ldd	r24, Y+9	; 0x09
     f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1c:	84 d5       	rcall	.+2824   	; 0x1a26 <__fixunssfsi>
     f1e:	dc 01       	movw	r26, r24
     f20:	cb 01       	movw	r24, r22
     f22:	9e 83       	std	Y+6, r25	; 0x06
     f24:	8d 83       	std	Y+5, r24	; 0x05
     f26:	8d 81       	ldd	r24, Y+5	; 0x05
     f28:	9e 81       	ldd	r25, Y+6	; 0x06
     f2a:	9a 83       	std	Y+2, r25	; 0x02
     f2c:	89 83       	std	Y+1, r24	; 0x01
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	9a 81       	ldd	r25, Y+2	; 0x02
     f32:	01 97       	sbiw	r24, 0x01	; 1
     f34:	f1 f7       	brne	.-4      	; 0xf32 <odometry_query_position+0xea>
     f36:	9a 83       	std	Y+2, r25	; 0x02
     f38:	89 83       	std	Y+1, r24	; 0x01
     f3a:	ce 01       	movw	r24, r28
     f3c:	0f 96       	adiw	r24, 0x0f	; 15
     f3e:	63 ec       	ldi	r22, 0xC3	; 195
     f40:	ca db       	rcall	.-2156   	; 0x6d6 <CAN_Write>
     f42:	88 23       	and	r24, r24
     f44:	09 f0       	breq	.+2      	; 0xf48 <odometry_query_position+0x100>
     f46:	8d cf       	rjmp	.-230    	; 0xe62 <odometry_query_position+0x1a>
		_delay_ms(50);

	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
     f48:	ce 01       	movw	r24, r28
     f4a:	0f 96       	adiw	r24, 0x0f	; 15
     f4c:	61 e0       	ldi	r22, 0x01	; 1
     f4e:	4f db       	rcall	.-2402   	; 0x5ee <CAN_Read>

	position.state = buffer[0];
     f50:	8f 85       	ldd	r24, Y+15	; 0x0f
     f52:	80 93 10 01 	sts	0x0110, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
     f56:	88 89       	ldd	r24, Y+16	; 0x10
     f58:	88 2f       	mov	r24, r24
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	38 2f       	mov	r19, r24
     f5e:	22 27       	eor	r18, r18
     f60:	89 89       	ldd	r24, Y+17	; 0x11
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	82 2b       	or	r24, r18
     f68:	93 2b       	or	r25, r19
     f6a:	90 93 0b 01 	sts	0x010B, r25
     f6e:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
     f72:	8a 89       	ldd	r24, Y+18	; 0x12
     f74:	88 2f       	mov	r24, r24
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	38 2f       	mov	r19, r24
     f7a:	22 27       	eor	r18, r18
     f7c:	8b 89       	ldd	r24, Y+19	; 0x13
     f7e:	88 2f       	mov	r24, r24
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	82 2b       	or	r24, r18
     f84:	93 2b       	or	r25, r19
     f86:	90 93 0d 01 	sts	0x010D, r25
     f8a:	80 93 0c 01 	sts	0x010C, r24
	position.angle = (buffer[5] << 8) | buffer[6];
     f8e:	8c 89       	ldd	r24, Y+20	; 0x14
     f90:	88 2f       	mov	r24, r24
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	38 2f       	mov	r19, r24
     f96:	22 27       	eor	r18, r18
     f98:	8d 89       	ldd	r24, Y+21	; 0x15
     f9a:	88 2f       	mov	r24, r24
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	82 2b       	or	r24, r18
     fa0:	93 2b       	or	r25, r19
     fa2:	90 93 0f 01 	sts	0x010F, r25
     fa6:	80 93 0e 01 	sts	0x010E, r24
}
     faa:	66 96       	adiw	r28, 0x16	; 22
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	de bf       	out	0x3e, r29	; 62
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	cd bf       	out	0x3d, r28	; 61
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <odometry_wait_until_done>:

static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	27 97       	sbiw	r28, 0x07	; 7
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
     fd0:	9e 83       	std	Y+6, r25	; 0x06
     fd2:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
     fd4:	34 d3       	rcall	.+1640   	; 0x163e <system_get_system_time>
     fd6:	aa 27       	eor	r26, r26
     fd8:	97 fd       	sbrc	r25, 7
     fda:	a0 95       	com	r26
     fdc:	ba 2f       	mov	r27, r26
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	9a 83       	std	Y+2, r25	; 0x02
     fe2:	ab 83       	std	Y+3, r26	; 0x03
     fe4:	bc 83       	std	Y+4, r27	; 0x04
	do
	{
		odometry_query_position();
     fe6:	30 df       	rcall	.-416    	; 0xe48 <odometry_query_position>
		if(callback != NULL)
     fe8:	8d 81       	ldd	r24, Y+5	; 0x05
     fea:	9e 81       	ldd	r25, Y+6	; 0x06
     fec:	00 97       	sbiw	r24, 0x00	; 0
     fee:	71 f0       	breq	.+28     	; 0x100c <odometry_wait_until_done+0x50>
		{
			if(callback(time) == 1)
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	9a 81       	ldd	r25, Y+2	; 0x02
     ff4:	ab 81       	ldd	r26, Y+3	; 0x03
     ff6:	bc 81       	ldd	r27, Y+4	; 0x04
     ff8:	ed 81       	ldd	r30, Y+5	; 0x05
     ffa:	fe 81       	ldd	r31, Y+6	; 0x06
     ffc:	bc 01       	movw	r22, r24
     ffe:	cd 01       	movw	r24, r26
    1000:	09 95       	icall
    1002:	81 30       	cpi	r24, 0x01	; 1
    1004:	19 f4       	brne	.+6      	; 0x100c <odometry_wait_until_done+0x50>
				return ODOMETRY_FAIL;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	8f 83       	std	Y+7, r24	; 0x07
    100a:	09 c0       	rjmp	.+18     	; 0x101e <odometry_wait_until_done+0x62>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    100c:	80 91 10 01 	lds	r24, 0x0110
    1010:	8d 34       	cpi	r24, 0x4D	; 77
    1012:	49 f3       	breq	.-46     	; 0xfe6 <odometry_wait_until_done+0x2a>
    1014:	80 91 10 01 	lds	r24, 0x0110
    1018:	82 35       	cpi	r24, 0x52	; 82
    101a:	29 f3       	breq	.-54     	; 0xfe6 <odometry_wait_until_done+0x2a>

	return ODOMETRY_SUCCESS;
    101c:	1f 82       	std	Y+7, r1	; 0x07
    101e:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1020:	27 96       	adiw	r28, 0x07	; 7
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <odometry_move_to_position>:

	return odometry_wait_until_done(callback);
}

uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	6c 97       	sbiw	r28, 0x1c	; 28
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	98 8f       	std	Y+24, r25	; 0x18
    1048:	8f 8b       	std	Y+23, r24	; 0x17
    104a:	69 8f       	std	Y+25, r22	; 0x19
    104c:	4a 8f       	std	Y+26, r20	; 0x1a
    104e:	3c 8f       	std	Y+28, r19	; 0x1c
    1050:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    1052:	89 8d       	ldd	r24, Y+25	; 0x19
    1054:	64 de       	rcall	.-824    	; 0xd1e <odometry_set_speed>

	buffer[0] = 'G';
    1056:	87 e4       	ldi	r24, 0x47	; 71
    1058:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    105a:	ef 89       	ldd	r30, Y+23	; 0x17
    105c:	f8 8d       	ldd	r31, Y+24	; 0x18
    105e:	80 81       	ld	r24, Z
    1060:	91 81       	ldd	r25, Z+1	; 0x01
    1062:	89 2f       	mov	r24, r25
    1064:	99 0f       	add	r25, r25
    1066:	99 0b       	sbc	r25, r25
    1068:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    106a:	ef 89       	ldd	r30, Y+23	; 0x17
    106c:	f8 8d       	ldd	r31, Y+24	; 0x18
    106e:	80 81       	ld	r24, Z
    1070:	91 81       	ldd	r25, Z+1	; 0x01
    1072:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    1074:	ef 89       	ldd	r30, Y+23	; 0x17
    1076:	f8 8d       	ldd	r31, Y+24	; 0x18
    1078:	82 81       	ldd	r24, Z+2	; 0x02
    107a:	93 81       	ldd	r25, Z+3	; 0x03
    107c:	89 2f       	mov	r24, r25
    107e:	99 0f       	add	r25, r25
    1080:	99 0b       	sbc	r25, r25
    1082:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    1084:	ef 89       	ldd	r30, Y+23	; 0x17
    1086:	f8 8d       	ldd	r31, Y+24	; 0x18
    1088:	82 81       	ldd	r24, Z+2	; 0x02
    108a:	93 81       	ldd	r25, Z+3	; 0x03
    108c:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;//Mozda ne treba 0
    108e:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction;
    1090:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1092:	8d 8b       	std	Y+21, r24	; 0x15
    1094:	6c c0       	rjmp	.+216    	; 0x116e <__stack+0x6f>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	a8 e4       	ldi	r26, 0x48	; 72
    109c:	b2 e4       	ldi	r27, 0x42	; 66
    109e:	8b 87       	std	Y+11, r24	; 0x0b
    10a0:	9c 87       	std	Y+12, r25	; 0x0c
    10a2:	ad 87       	std	Y+13, r26	; 0x0d
    10a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e4       	ldi	r19, 0x40	; 64
    10b2:	4c e1       	ldi	r20, 0x1C	; 28
    10b4:	55 e4       	ldi	r21, 0x45	; 69
    10b6:	99 d5       	rcall	.+2866   	; 0x1bea <__mulsf3>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	8f 83       	std	Y+7, r24	; 0x07
    10be:	98 87       	std	Y+8, r25	; 0x08
    10c0:	a9 87       	std	Y+9, r26	; 0x09
    10c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10c4:	6f 81       	ldd	r22, Y+7	; 0x07
    10c6:	78 85       	ldd	r23, Y+8	; 0x08
    10c8:	89 85       	ldd	r24, Y+9	; 0x09
    10ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	40 e8       	ldi	r20, 0x80	; 128
    10d2:	5f e3       	ldi	r21, 0x3F	; 63
    10d4:	3c d4       	rcall	.+2168   	; 0x194e <__cmpsf2>
    10d6:	88 23       	and	r24, r24
    10d8:	2c f4       	brge	.+10     	; 0x10e4 <odometry_move_to_position+0xb2>
		__ticks = 1;
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	9e 83       	std	Y+6, r25	; 0x06
    10e0:	8d 83       	std	Y+5, r24	; 0x05
    10e2:	3b c0       	rjmp	.+118    	; 0x115a <__stack+0x5b>
	else if (__tmp > 65535)
    10e4:	6f 81       	ldd	r22, Y+7	; 0x07
    10e6:	78 85       	ldd	r23, Y+8	; 0x08
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	3f ef       	ldi	r19, 0xFF	; 255
    10f0:	4f e7       	ldi	r20, 0x7F	; 127
    10f2:	57 e4       	ldi	r21, 0x47	; 71
    10f4:	76 d5       	rcall	.+2796   	; 0x1be2 <__gesf2>
    10f6:	18 16       	cp	r1, r24
    10f8:	3c f5       	brge	.+78     	; 0x1148 <__stack+0x49>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    10fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    10fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1100:	9e 85       	ldd	r25, Y+14	; 0x0e
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 e2       	ldi	r20, 0x20	; 32
    1108:	51 e4       	ldi	r21, 0x41	; 65
    110a:	6f d5       	rcall	.+2782   	; 0x1bea <__mulsf3>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	bc 01       	movw	r22, r24
    1112:	cd 01       	movw	r24, r26
    1114:	88 d4       	rcall	.+2320   	; 0x1a26 <__fixunssfsi>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	9e 83       	std	Y+6, r25	; 0x06
    111c:	8d 83       	std	Y+5, r24	; 0x05
    111e:	0f c0       	rjmp	.+30     	; 0x113e <__stack+0x3f>
    1120:	8a ef       	ldi	r24, 0xFA	; 250
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	9c 83       	std	Y+4, r25	; 0x04
    1126:	8b 83       	std	Y+3, r24	; 0x03
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	9c 81       	ldd	r25, Y+4	; 0x04
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	f1 f7       	brne	.-4      	; 0x112c <__stack+0x2d>
    1130:	9c 83       	std	Y+4, r25	; 0x04
    1132:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1134:	8d 81       	ldd	r24, Y+5	; 0x05
    1136:	9e 81       	ldd	r25, Y+6	; 0x06
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	9e 83       	std	Y+6, r25	; 0x06
    113c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    113e:	8d 81       	ldd	r24, Y+5	; 0x05
    1140:	9e 81       	ldd	r25, Y+6	; 0x06
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	69 f7       	brne	.-38     	; 0x1120 <__stack+0x21>
    1146:	13 c0       	rjmp	.+38     	; 0x116e <__stack+0x6f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1148:	6f 81       	ldd	r22, Y+7	; 0x07
    114a:	78 85       	ldd	r23, Y+8	; 0x08
    114c:	89 85       	ldd	r24, Y+9	; 0x09
    114e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1150:	6a d4       	rcall	.+2260   	; 0x1a26 <__fixunssfsi>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	9e 83       	std	Y+6, r25	; 0x06
    1158:	8d 83       	std	Y+5, r24	; 0x05
    115a:	8d 81       	ldd	r24, Y+5	; 0x05
    115c:	9e 81       	ldd	r25, Y+6	; 0x06
    115e:	9a 83       	std	Y+2, r25	; 0x02
    1160:	89 83       	std	Y+1, r24	; 0x01
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	9a 81       	ldd	r25, Y+2	; 0x02
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	f1 f7       	brne	.-4      	; 0x1166 <__stack+0x67>
    116a:	9a 83       	std	Y+2, r25	; 0x02
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	ce 01       	movw	r24, r28
    1170:	0f 96       	adiw	r24, 0x0f	; 15
    1172:	63 ec       	ldi	r22, 0xC3	; 195
    1174:	b0 da       	rcall	.-2720   	; 0x6d6 <CAN_Write>
    1176:	88 23       	and	r24, r24
    1178:	09 f0       	breq	.+2      	; 0x117c <__stack+0x7d>
    117a:	8d cf       	rjmp	.-230    	; 0x1096 <odometry_move_to_position+0x64>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    117c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    117e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1180:	1d df       	rcall	.-454    	; 0xfbc <odometry_wait_until_done>
}
    1182:	6c 96       	adiw	r28, 0x1c	; 28
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	68 97       	sbiw	r28, 0x18	; 24
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	cd bf       	out	0x3d, r28	; 61
    11a8:	98 8f       	std	Y+24, r25	; 0x18
    11aa:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	buffer[0] = 'I';
    11ac:	89 e4       	ldi	r24, 0x49	; 73
    11ae:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = new_position->x >> 8;
    11b0:	ef 89       	ldd	r30, Y+23	; 0x17
    11b2:	f8 8d       	ldd	r31, Y+24	; 0x18
    11b4:	80 81       	ld	r24, Z
    11b6:	91 81       	ldd	r25, Z+1	; 0x01
    11b8:	89 2f       	mov	r24, r25
    11ba:	99 0f       	add	r25, r25
    11bc:	99 0b       	sbc	r25, r25
    11be:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = new_position->x & 0xFF;
    11c0:	ef 89       	ldd	r30, Y+23	; 0x17
    11c2:	f8 8d       	ldd	r31, Y+24	; 0x18
    11c4:	80 81       	ld	r24, Z
    11c6:	91 81       	ldd	r25, Z+1	; 0x01
    11c8:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = new_position->y >> 8;
    11ca:	ef 89       	ldd	r30, Y+23	; 0x17
    11cc:	f8 8d       	ldd	r31, Y+24	; 0x18
    11ce:	82 81       	ldd	r24, Z+2	; 0x02
    11d0:	93 81       	ldd	r25, Z+3	; 0x03
    11d2:	89 2f       	mov	r24, r25
    11d4:	99 0f       	add	r25, r25
    11d6:	99 0b       	sbc	r25, r25
    11d8:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = new_position->y & 0xFF;
    11da:	ef 89       	ldd	r30, Y+23	; 0x17
    11dc:	f8 8d       	ldd	r31, Y+24	; 0x18
    11de:	82 81       	ldd	r24, Z+2	; 0x02
    11e0:	93 81       	ldd	r25, Z+3	; 0x03
    11e2:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = new_position->angle << 8;
    11e4:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = new_position->angle & 0xFF;
    11e6:	ef 89       	ldd	r30, Y+23	; 0x17
    11e8:	f8 8d       	ldd	r31, Y+24	; 0x18
    11ea:	84 81       	ldd	r24, Z+4	; 0x04
    11ec:	95 81       	ldd	r25, Z+5	; 0x05
    11ee:	8d 8b       	std	Y+21, r24	; 0x15

	position.x	   = new_position->x;
    11f0:	ef 89       	ldd	r30, Y+23	; 0x17
    11f2:	f8 8d       	ldd	r31, Y+24	; 0x18
    11f4:	80 81       	ld	r24, Z
    11f6:	91 81       	ldd	r25, Z+1	; 0x01
    11f8:	90 93 0b 01 	sts	0x010B, r25
    11fc:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = new_position->y;
    1200:	ef 89       	ldd	r30, Y+23	; 0x17
    1202:	f8 8d       	ldd	r31, Y+24	; 0x18
    1204:	82 81       	ldd	r24, Z+2	; 0x02
    1206:	93 81       	ldd	r25, Z+3	; 0x03
    1208:	90 93 0d 01 	sts	0x010D, r25
    120c:	80 93 0c 01 	sts	0x010C, r24
	position.angle = new_position->angle;
    1210:	ef 89       	ldd	r30, Y+23	; 0x17
    1212:	f8 8d       	ldd	r31, Y+24	; 0x18
    1214:	84 81       	ldd	r24, Z+4	; 0x04
    1216:	95 81       	ldd	r25, Z+5	; 0x05
    1218:	90 93 0f 01 	sts	0x010F, r25
    121c:	80 93 0e 01 	sts	0x010E, r24
    1220:	6c c0       	rjmp	.+216    	; 0x12fa <odometry_set_position+0x166>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	a8 e4       	ldi	r26, 0x48	; 72
    1228:	b2 e4       	ldi	r27, 0x42	; 66
    122a:	8b 87       	std	Y+11, r24	; 0x0b
    122c:	9c 87       	std	Y+12, r25	; 0x0c
    122e:	ad 87       	std	Y+13, r26	; 0x0d
    1230:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1232:	6b 85       	ldd	r22, Y+11	; 0x0b
    1234:	7c 85       	ldd	r23, Y+12	; 0x0c
    1236:	8d 85       	ldd	r24, Y+13	; 0x0d
    1238:	9e 85       	ldd	r25, Y+14	; 0x0e
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e4       	ldi	r19, 0x40	; 64
    123e:	4c e1       	ldi	r20, 0x1C	; 28
    1240:	55 e4       	ldi	r21, 0x45	; 69
    1242:	d3 d4       	rcall	.+2470   	; 0x1bea <__mulsf3>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	8f 83       	std	Y+7, r24	; 0x07
    124a:	98 87       	std	Y+8, r25	; 0x08
    124c:	a9 87       	std	Y+9, r26	; 0x09
    124e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1250:	6f 81       	ldd	r22, Y+7	; 0x07
    1252:	78 85       	ldd	r23, Y+8	; 0x08
    1254:	89 85       	ldd	r24, Y+9	; 0x09
    1256:	9a 85       	ldd	r25, Y+10	; 0x0a
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	40 e8       	ldi	r20, 0x80	; 128
    125e:	5f e3       	ldi	r21, 0x3F	; 63
    1260:	76 d3       	rcall	.+1772   	; 0x194e <__cmpsf2>
    1262:	88 23       	and	r24, r24
    1264:	2c f4       	brge	.+10     	; 0x1270 <odometry_set_position+0xdc>
		__ticks = 1;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	9e 83       	std	Y+6, r25	; 0x06
    126c:	8d 83       	std	Y+5, r24	; 0x05
    126e:	3b c0       	rjmp	.+118    	; 0x12e6 <odometry_set_position+0x152>
	else if (__tmp > 65535)
    1270:	6f 81       	ldd	r22, Y+7	; 0x07
    1272:	78 85       	ldd	r23, Y+8	; 0x08
    1274:	89 85       	ldd	r24, Y+9	; 0x09
    1276:	9a 85       	ldd	r25, Y+10	; 0x0a
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	3f ef       	ldi	r19, 0xFF	; 255
    127c:	4f e7       	ldi	r20, 0x7F	; 127
    127e:	57 e4       	ldi	r21, 0x47	; 71
    1280:	b0 d4       	rcall	.+2400   	; 0x1be2 <__gesf2>
    1282:	18 16       	cp	r1, r24
    1284:	3c f5       	brge	.+78     	; 0x12d4 <odometry_set_position+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1286:	6b 85       	ldd	r22, Y+11	; 0x0b
    1288:	7c 85       	ldd	r23, Y+12	; 0x0c
    128a:	8d 85       	ldd	r24, Y+13	; 0x0d
    128c:	9e 85       	ldd	r25, Y+14	; 0x0e
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e2       	ldi	r20, 0x20	; 32
    1294:	51 e4       	ldi	r21, 0x41	; 65
    1296:	a9 d4       	rcall	.+2386   	; 0x1bea <__mulsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	bc 01       	movw	r22, r24
    129e:	cd 01       	movw	r24, r26
    12a0:	c2 d3       	rcall	.+1924   	; 0x1a26 <__fixunssfsi>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	9e 83       	std	Y+6, r25	; 0x06
    12a8:	8d 83       	std	Y+5, r24	; 0x05
    12aa:	0f c0       	rjmp	.+30     	; 0x12ca <odometry_set_position+0x136>
    12ac:	8a ef       	ldi	r24, 0xFA	; 250
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	9c 83       	std	Y+4, r25	; 0x04
    12b2:	8b 83       	std	Y+3, r24	; 0x03
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	01 97       	sbiw	r24, 0x01	; 1
    12ba:	f1 f7       	brne	.-4      	; 0x12b8 <odometry_set_position+0x124>
    12bc:	9c 83       	std	Y+4, r25	; 0x04
    12be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c0:	8d 81       	ldd	r24, Y+5	; 0x05
    12c2:	9e 81       	ldd	r25, Y+6	; 0x06
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	9e 83       	std	Y+6, r25	; 0x06
    12c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ca:	8d 81       	ldd	r24, Y+5	; 0x05
    12cc:	9e 81       	ldd	r25, Y+6	; 0x06
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	69 f7       	brne	.-38     	; 0x12ac <odometry_set_position+0x118>
    12d2:	13 c0       	rjmp	.+38     	; 0x12fa <odometry_set_position+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d4:	6f 81       	ldd	r22, Y+7	; 0x07
    12d6:	78 85       	ldd	r23, Y+8	; 0x08
    12d8:	89 85       	ldd	r24, Y+9	; 0x09
    12da:	9a 85       	ldd	r25, Y+10	; 0x0a
    12dc:	a4 d3       	rcall	.+1864   	; 0x1a26 <__fixunssfsi>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	9e 83       	std	Y+6, r25	; 0x06
    12e4:	8d 83       	std	Y+5, r24	; 0x05
    12e6:	8d 81       	ldd	r24, Y+5	; 0x05
    12e8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ea:	9a 83       	std	Y+2, r25	; 0x02
    12ec:	89 83       	std	Y+1, r24	; 0x01
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	9a 81       	ldd	r25, Y+2	; 0x02
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	f1 f7       	brne	.-4      	; 0x12f2 <odometry_set_position+0x15e>
    12f6:	9a 83       	std	Y+2, r25	; 0x02
    12f8:	89 83       	std	Y+1, r24	; 0x01
    12fa:	ce 01       	movw	r24, r28
    12fc:	0f 96       	adiw	r24, 0x0f	; 15
    12fe:	63 ec       	ldi	r22, 0xC3	; 195
    1300:	ea d9       	rcall	.-3116   	; 0x6d6 <CAN_Write>
    1302:	88 23       	and	r24, r24
    1304:	09 f0       	breq	.+2      	; 0x1308 <odometry_set_position+0x174>
    1306:	8d cf       	rjmp	.-230    	; 0x1222 <odometry_set_position+0x8e>
		_delay_ms(50);
}
    1308:	68 96       	adiw	r28, 0x18	; 24
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <timer_init>:


void timer_init(unsigned int freq)
{
    131a:	0f 93       	push	r16
    131c:	1f 93       	push	r17
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	00 d0       	rcall	.+0      	; 0x1324 <timer_init+0xa>
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	9a 83       	std	Y+2, r25	; 0x02
    132a:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    132c:	e0 e8       	ldi	r30, 0x80	; 128
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    1332:	e1 e8       	ldi	r30, 0x81	; 129
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	89 e0       	ldi	r24, 0x09	; 9
    1338:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    133a:	08 e8       	ldi	r16, 0x88	; 136
    133c:	10 e0       	ldi	r17, 0x00	; 0
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	9a 81       	ldd	r25, Y+2	; 0x02
    1342:	cc 01       	movw	r24, r24
    1344:	a0 e0       	ldi	r26, 0x00	; 0
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	bc 01       	movw	r22, r24
    134a:	cd 01       	movw	r24, r26
    134c:	98 d3       	rcall	.+1840   	; 0x1a7e <__floatunsisf>
    134e:	9b 01       	movw	r18, r22
    1350:	ac 01       	movw	r20, r24
    1352:	60 e8       	ldi	r22, 0x80	; 128
    1354:	76 e9       	ldi	r23, 0x96	; 150
    1356:	88 e1       	ldi	r24, 0x18	; 24
    1358:	9b e4       	ldi	r25, 0x4B	; 75
    135a:	fd d2       	rcall	.+1530   	; 0x1956 <__divsf3>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	bc 01       	movw	r22, r24
    1362:	cd 01       	movw	r24, r26
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	40 e0       	ldi	r20, 0x00	; 0
    136a:	5f e3       	ldi	r21, 0x3F	; 63
    136c:	8c d2       	rcall	.+1304   	; 0x1886 <__addsf3>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
    1372:	bc 01       	movw	r22, r24
    1374:	cd 01       	movw	r24, r26
    1376:	57 d3       	rcall	.+1710   	; 0x1a26 <__fixunssfsi>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	f8 01       	movw	r30, r16
    137e:	91 83       	std	Z+1, r25	; 0x01
    1380:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    1382:	ef e6       	ldi	r30, 0x6F	; 111
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	82 e0       	ldi	r24, 0x02	; 2
    1388:	80 83       	st	Z, r24

	SREG |= 0x80;
    138a:	af e5       	ldi	r26, 0x5F	; 95
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	ef e5       	ldi	r30, 0x5F	; 95
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	80 68       	ori	r24, 0x80	; 128
    1396:	8c 93       	st	X, r24
}
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	1f 91       	pop	r17
    13a2:	0f 91       	pop	r16
    13a4:	08 95       	ret

000013a6 <__vector_12>:


ISR(TIMER1_COMPA_vect)
{
    13a6:	1f 92       	push	r1
    13a8:	0f 92       	push	r0
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	0f 92       	push	r0
    13ae:	00 90 5b 00 	lds	r0, 0x005B
    13b2:	0f 92       	push	r0
    13b4:	11 24       	eor	r1, r1
    13b6:	2f 93       	push	r18
    13b8:	3f 93       	push	r19
    13ba:	4f 93       	push	r20
    13bc:	5f 93       	push	r21
    13be:	6f 93       	push	r22
    13c0:	7f 93       	push	r23
    13c2:	8f 93       	push	r24
    13c4:	9f 93       	push	r25
    13c6:	af 93       	push	r26
    13c8:	bf 93       	push	r27
    13ca:	ef 93       	push	r30
    13cc:	ff 93       	push	r31
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    13d6:	80 91 51 01 	lds	r24, 0x0151
    13da:	90 91 52 01 	lds	r25, 0x0152
    13de:	00 97       	sbiw	r24, 0x00	; 0
    13e0:	29 f0       	breq	.+10     	; 0x13ec <__vector_12+0x46>
        timer_callback();
    13e2:	e0 91 51 01 	lds	r30, 0x0151
    13e6:	f0 91 52 01 	lds	r31, 0x0152
    13ea:	09 95       	icall
	sys_time++;
    13ec:	80 91 53 01 	lds	r24, 0x0153
    13f0:	90 91 54 01 	lds	r25, 0x0154
    13f4:	a0 91 55 01 	lds	r26, 0x0155
    13f8:	b0 91 56 01 	lds	r27, 0x0156
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	a1 1d       	adc	r26, r1
    1400:	b1 1d       	adc	r27, r1
    1402:	80 93 53 01 	sts	0x0153, r24
    1406:	90 93 54 01 	sts	0x0154, r25
    140a:	a0 93 55 01 	sts	0x0155, r26
    140e:	b0 93 56 01 	sts	0x0156, r27
}
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	ff 91       	pop	r31
    1418:	ef 91       	pop	r30
    141a:	bf 91       	pop	r27
    141c:	af 91       	pop	r26
    141e:	9f 91       	pop	r25
    1420:	8f 91       	pop	r24
    1422:	7f 91       	pop	r23
    1424:	6f 91       	pop	r22
    1426:	5f 91       	pop	r21
    1428:	4f 91       	pop	r20
    142a:	3f 91       	pop	r19
    142c:	2f 91       	pop	r18
    142e:	0f 90       	pop	r0
    1430:	00 92 5b 00 	sts	0x005B, r0
    1434:	0f 90       	pop	r0
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	0f 90       	pop	r0
    143a:	1f 90       	pop	r1
    143c:	18 95       	reti

0000143e <system_init>:

void system_init(void)
{
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	6c 97       	sbiw	r28, 0x1c	; 28
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	aa e7       	ldi	r26, 0x7A	; 122
    1458:	b4 e4       	ldi	r27, 0x44	; 68
    145a:	89 8f       	std	Y+25, r24	; 0x19
    145c:	9a 8f       	std	Y+26, r25	; 0x1a
    145e:	ab 8f       	std	Y+27, r26	; 0x1b
    1460:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1462:	69 8d       	ldd	r22, Y+25	; 0x19
    1464:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1466:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1468:	9c 8d       	ldd	r25, Y+28	; 0x1c
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e4       	ldi	r19, 0x40	; 64
    146e:	4c e1       	ldi	r20, 0x1C	; 28
    1470:	55 e4       	ldi	r21, 0x45	; 69
    1472:	bb d3       	rcall	.+1910   	; 0x1bea <__mulsf3>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	8d 8b       	std	Y+21, r24	; 0x15
    147a:	9e 8b       	std	Y+22, r25	; 0x16
    147c:	af 8b       	std	Y+23, r26	; 0x17
    147e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1480:	6d 89       	ldd	r22, Y+21	; 0x15
    1482:	7e 89       	ldd	r23, Y+22	; 0x16
    1484:	8f 89       	ldd	r24, Y+23	; 0x17
    1486:	98 8d       	ldd	r25, Y+24	; 0x18
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	40 e8       	ldi	r20, 0x80	; 128
    148e:	5f e3       	ldi	r21, 0x3F	; 63
    1490:	5e d2       	rcall	.+1212   	; 0x194e <__cmpsf2>
    1492:	88 23       	and	r24, r24
    1494:	2c f4       	brge	.+10     	; 0x14a0 <system_init+0x62>
		__ticks = 1;
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	9c 8b       	std	Y+20, r25	; 0x14
    149c:	8b 8b       	std	Y+19, r24	; 0x13
    149e:	3b c0       	rjmp	.+118    	; 0x1516 <system_init+0xd8>
	else if (__tmp > 65535)
    14a0:	6d 89       	ldd	r22, Y+21	; 0x15
    14a2:	7e 89       	ldd	r23, Y+22	; 0x16
    14a4:	8f 89       	ldd	r24, Y+23	; 0x17
    14a6:	98 8d       	ldd	r25, Y+24	; 0x18
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	3f ef       	ldi	r19, 0xFF	; 255
    14ac:	4f e7       	ldi	r20, 0x7F	; 127
    14ae:	57 e4       	ldi	r21, 0x47	; 71
    14b0:	98 d3       	rcall	.+1840   	; 0x1be2 <__gesf2>
    14b2:	18 16       	cp	r1, r24
    14b4:	3c f5       	brge	.+78     	; 0x1504 <system_init+0xc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b6:	69 8d       	ldd	r22, Y+25	; 0x19
    14b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	40 e2       	ldi	r20, 0x20	; 32
    14c4:	51 e4       	ldi	r21, 0x41	; 65
    14c6:	91 d3       	rcall	.+1826   	; 0x1bea <__mulsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	bc 01       	movw	r22, r24
    14ce:	cd 01       	movw	r24, r26
    14d0:	aa d2       	rcall	.+1364   	; 0x1a26 <__fixunssfsi>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	9c 8b       	std	Y+20, r25	; 0x14
    14d8:	8b 8b       	std	Y+19, r24	; 0x13
    14da:	0f c0       	rjmp	.+30     	; 0x14fa <system_init+0xbc>
    14dc:	8a ef       	ldi	r24, 0xFA	; 250
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	9a 8b       	std	Y+18, r25	; 0x12
    14e2:	89 8b       	std	Y+17, r24	; 0x11
    14e4:	89 89       	ldd	r24, Y+17	; 0x11
    14e6:	9a 89       	ldd	r25, Y+18	; 0x12
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	f1 f7       	brne	.-4      	; 0x14e8 <system_init+0xaa>
    14ec:	9a 8b       	std	Y+18, r25	; 0x12
    14ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f0:	8b 89       	ldd	r24, Y+19	; 0x13
    14f2:	9c 89       	ldd	r25, Y+20	; 0x14
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	9c 8b       	std	Y+20, r25	; 0x14
    14f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14fa:	8b 89       	ldd	r24, Y+19	; 0x13
    14fc:	9c 89       	ldd	r25, Y+20	; 0x14
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	69 f7       	brne	.-38     	; 0x14dc <system_init+0x9e>
    1502:	13 c0       	rjmp	.+38     	; 0x152a <system_init+0xec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1504:	6d 89       	ldd	r22, Y+21	; 0x15
    1506:	7e 89       	ldd	r23, Y+22	; 0x16
    1508:	8f 89       	ldd	r24, Y+23	; 0x17
    150a:	98 8d       	ldd	r25, Y+24	; 0x18
    150c:	8c d2       	rcall	.+1304   	; 0x1a26 <__fixunssfsi>
    150e:	dc 01       	movw	r26, r24
    1510:	cb 01       	movw	r24, r22
    1512:	9c 8b       	std	Y+20, r25	; 0x14
    1514:	8b 8b       	std	Y+19, r24	; 0x13
    1516:	8b 89       	ldd	r24, Y+19	; 0x13
    1518:	9c 89       	ldd	r25, Y+20	; 0x14
    151a:	98 8b       	std	Y+16, r25	; 0x10
    151c:	8f 87       	std	Y+15, r24	; 0x0f
    151e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1520:	98 89       	ldd	r25, Y+16	; 0x10
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	f1 f7       	brne	.-4      	; 0x1522 <system_init+0xe4>
    1526:	98 8b       	std	Y+16, r25	; 0x10
    1528:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	DDRG = 0xff;
    152a:	e3 e3       	ldi	r30, 0x33	; 51
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	8f ef       	ldi	r24, 0xFF	; 255
    1530:	80 83       	st	Z, r24
	PORTG = 0xFF;
    1532:	e4 e3       	ldi	r30, 0x34	; 52
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	8f ef       	ldi	r24, 0xFF	; 255
    1538:	80 83       	st	Z, r24
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	aa e7       	ldi	r26, 0x7A	; 122
    1540:	b4 e4       	ldi	r27, 0x44	; 68
    1542:	8b 87       	std	Y+11, r24	; 0x0b
    1544:	9c 87       	std	Y+12, r25	; 0x0c
    1546:	ad 87       	std	Y+13, r26	; 0x0d
    1548:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    154a:	6b 85       	ldd	r22, Y+11	; 0x0b
    154c:	7c 85       	ldd	r23, Y+12	; 0x0c
    154e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1550:	9e 85       	ldd	r25, Y+14	; 0x0e
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e4       	ldi	r19, 0x40	; 64
    1556:	4c e1       	ldi	r20, 0x1C	; 28
    1558:	55 e4       	ldi	r21, 0x45	; 69
    155a:	47 d3       	rcall	.+1678   	; 0x1bea <__mulsf3>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	8f 83       	std	Y+7, r24	; 0x07
    1562:	98 87       	std	Y+8, r25	; 0x08
    1564:	a9 87       	std	Y+9, r26	; 0x09
    1566:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1568:	6f 81       	ldd	r22, Y+7	; 0x07
    156a:	78 85       	ldd	r23, Y+8	; 0x08
    156c:	89 85       	ldd	r24, Y+9	; 0x09
    156e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e8       	ldi	r20, 0x80	; 128
    1576:	5f e3       	ldi	r21, 0x3F	; 63
    1578:	ea d1       	rcall	.+980    	; 0x194e <__cmpsf2>
    157a:	88 23       	and	r24, r24
    157c:	2c f4       	brge	.+10     	; 0x1588 <system_init+0x14a>
		__ticks = 1;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	9e 83       	std	Y+6, r25	; 0x06
    1584:	8d 83       	std	Y+5, r24	; 0x05
    1586:	3b c0       	rjmp	.+118    	; 0x15fe <system_init+0x1c0>
	else if (__tmp > 65535)
    1588:	6f 81       	ldd	r22, Y+7	; 0x07
    158a:	78 85       	ldd	r23, Y+8	; 0x08
    158c:	89 85       	ldd	r24, Y+9	; 0x09
    158e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	3f ef       	ldi	r19, 0xFF	; 255
    1594:	4f e7       	ldi	r20, 0x7F	; 127
    1596:	57 e4       	ldi	r21, 0x47	; 71
    1598:	24 d3       	rcall	.+1608   	; 0x1be2 <__gesf2>
    159a:	18 16       	cp	r1, r24
    159c:	3c f5       	brge	.+78     	; 0x15ec <system_init+0x1ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    159e:	6b 85       	ldd	r22, Y+11	; 0x0b
    15a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    15a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	40 e2       	ldi	r20, 0x20	; 32
    15ac:	51 e4       	ldi	r21, 0x41	; 65
    15ae:	1d d3       	rcall	.+1594   	; 0x1bea <__mulsf3>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	bc 01       	movw	r22, r24
    15b6:	cd 01       	movw	r24, r26
    15b8:	36 d2       	rcall	.+1132   	; 0x1a26 <__fixunssfsi>
    15ba:	dc 01       	movw	r26, r24
    15bc:	cb 01       	movw	r24, r22
    15be:	9e 83       	std	Y+6, r25	; 0x06
    15c0:	8d 83       	std	Y+5, r24	; 0x05
    15c2:	0f c0       	rjmp	.+30     	; 0x15e2 <system_init+0x1a4>
    15c4:	8a ef       	ldi	r24, 0xFA	; 250
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	9c 83       	std	Y+4, r25	; 0x04
    15ca:	8b 83       	std	Y+3, r24	; 0x03
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	9c 81       	ldd	r25, Y+4	; 0x04
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	f1 f7       	brne	.-4      	; 0x15d0 <system_init+0x192>
    15d4:	9c 83       	std	Y+4, r25	; 0x04
    15d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d8:	8d 81       	ldd	r24, Y+5	; 0x05
    15da:	9e 81       	ldd	r25, Y+6	; 0x06
    15dc:	01 97       	sbiw	r24, 0x01	; 1
    15de:	9e 83       	std	Y+6, r25	; 0x06
    15e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e2:	8d 81       	ldd	r24, Y+5	; 0x05
    15e4:	9e 81       	ldd	r25, Y+6	; 0x06
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	69 f7       	brne	.-38     	; 0x15c4 <system_init+0x186>
    15ea:	13 c0       	rjmp	.+38     	; 0x1612 <system_init+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ec:	6f 81       	ldd	r22, Y+7	; 0x07
    15ee:	78 85       	ldd	r23, Y+8	; 0x08
    15f0:	89 85       	ldd	r24, Y+9	; 0x09
    15f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f4:	18 d2       	rcall	.+1072   	; 0x1a26 <__fixunssfsi>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	9e 83       	std	Y+6, r25	; 0x06
    15fc:	8d 83       	std	Y+5, r24	; 0x05
    15fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1600:	9e 81       	ldd	r25, Y+6	; 0x06
    1602:	9a 83       	std	Y+2, r25	; 0x02
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	9a 81       	ldd	r25, Y+2	; 0x02
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	f1 f7       	brne	.-4      	; 0x160a <system_init+0x1cc>
    160e:	9a 83       	std	Y+2, r25	; 0x02
    1610:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	PORTG = 0x00;
    1612:	e4 e3       	ldi	r30, 0x34	; 52
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	10 82       	st	Z, r1
	servo_init(50);
    1618:	82 e3       	ldi	r24, 0x32	; 50
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	0e 94 92 00 	call	0x124	; 0x124 <servo_init>
	timer_init(1000);
    1620:	88 ee       	ldi	r24, 0xE8	; 232
    1622:	93 e0       	ldi	r25, 0x03	; 3
    1624:	7a de       	rcall	.-780    	; 0x131a <timer_init>
	CAN_Init(1);
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	0e 94 ab 02 	call	0x556	; 0x556 <CAN_Init>
}
    162c:	6c 96       	adiw	r28, 0x1c	; 28
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	f8 94       	cli
    1632:	de bf       	out	0x3e, r29	; 62
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	cd bf       	out	0x3d, r28	; 61
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <system_get_system_time>:
uint32_t system_get_system_time(void)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    1646:	80 91 53 01 	lds	r24, 0x0153
    164a:	90 91 54 01 	lds	r25, 0x0154
    164e:	a0 91 55 01 	lds	r26, 0x0155
    1652:	b0 91 56 01 	lds	r27, 0x0156
}
    1656:	bc 01       	movw	r22, r24
    1658:	cd 01       	movw	r24, r26
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    1660:	1f 92       	push	r1
    1662:	0f 92       	push	r0
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	0f 92       	push	r0
    1668:	00 90 5b 00 	lds	r0, 0x005B
    166c:	0f 92       	push	r0
    166e:	11 24       	eor	r1, r1
    1670:	8f 93       	push	r24
    1672:	9f 93       	push	r25
    1674:	af 93       	push	r26
    1676:	bf 93       	push	r27
    1678:	ef 93       	push	r30
    167a:	ff 93       	push	r31
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    1684:	80 91 57 01 	lds	r24, 0x0157
    1688:	88 23       	and	r24, r24
    168a:	d9 f0       	breq	.+54     	; 0x16c2 <__vector_23+0x62>
	{
		tx0_counter--;
    168c:	80 91 57 01 	lds	r24, 0x0157
    1690:	81 50       	subi	r24, 0x01	; 1
    1692:	80 93 57 01 	sts	0x0157, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    1696:	a6 ec       	ldi	r26, 0xC6	; 198
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	80 91 58 01 	lds	r24, 0x0158
    169e:	88 2f       	mov	r24, r24
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	fc 01       	movw	r30, r24
    16a4:	e1 5a       	subi	r30, 0xA1	; 161
    16a6:	fe 4f       	sbci	r31, 0xFE	; 254
    16a8:	80 81       	ld	r24, Z
    16aa:	8c 93       	st	X, r24
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    16ac:	80 91 58 01 	lds	r24, 0x0158
    16b0:	8f 5f       	subi	r24, 0xFF	; 255
    16b2:	80 93 58 01 	sts	0x0158, r24
    16b6:	80 91 58 01 	lds	r24, 0x0158
    16ba:	80 34       	cpi	r24, 0x40	; 64
    16bc:	11 f4       	brne	.+4      	; 0x16c2 <__vector_23+0x62>
			tx0_rd_index = 0;
    16be:	10 92 58 01 	sts	0x0158, r1
	}
}
    16c2:	cf 91       	pop	r28
    16c4:	df 91       	pop	r29
    16c6:	ff 91       	pop	r31
    16c8:	ef 91       	pop	r30
    16ca:	bf 91       	pop	r27
    16cc:	af 91       	pop	r26
    16ce:	9f 91       	pop	r25
    16d0:	8f 91       	pop	r24
    16d2:	0f 90       	pop	r0
    16d4:	00 92 5b 00 	sts	0x005B, r0
    16d8:	0f 90       	pop	r0
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	0f 90       	pop	r0
    16de:	1f 90       	pop	r1
    16e0:	18 95       	reti

000016e2 <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    16e2:	1f 92       	push	r1
    16e4:	0f 92       	push	r0
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	0f 92       	push	r0
    16ea:	00 90 5b 00 	lds	r0, 0x005B
    16ee:	0f 92       	push	r0
    16f0:	11 24       	eor	r1, r1
    16f2:	2f 93       	push	r18
    16f4:	8f 93       	push	r24
    16f6:	9f 93       	push	r25
    16f8:	ef 93       	push	r30
    16fa:	ff 93       	push	r31
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	0f 92       	push	r0
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    1706:	e0 ec       	ldi	r30, 0xC0	; 192
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	88 2f       	mov	r24, r24
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	8c 71       	andi	r24, 0x1C	; 28
    1716:	90 70       	andi	r25, 0x00	; 0
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	d9 f4       	brne	.+54     	; 0x1752 <__vector_21+0x70>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    171c:	80 91 59 01 	lds	r24, 0x0159
    1720:	88 2f       	mov	r24, r24
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	e6 ec       	ldi	r30, 0xC6	; 198
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	20 81       	ld	r18, Z
    172a:	fc 01       	movw	r30, r24
    172c:	e1 56       	subi	r30, 0x61	; 97
    172e:	fe 4f       	sbci	r31, 0xFE	; 254
    1730:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    1732:	80 91 59 01 	lds	r24, 0x0159
    1736:	8f 5f       	subi	r24, 0xFF	; 255
    1738:	80 93 59 01 	sts	0x0159, r24
    173c:	80 91 59 01 	lds	r24, 0x0159
    1740:	80 34       	cpi	r24, 0x40	; 64
    1742:	11 f4       	brne	.+4      	; 0x1748 <__vector_21+0x66>
			rx0_wr_index = 0;
    1744:	10 92 59 01 	sts	0x0159, r1

		rx0_counter++;
    1748:	80 91 5a 01 	lds	r24, 0x015A
    174c:	8f 5f       	subi	r24, 0xFF	; 255
    174e:	80 93 5a 01 	sts	0x015A, r24
	}
}
    1752:	0f 90       	pop	r0
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	ff 91       	pop	r31
    175a:	ef 91       	pop	r30
    175c:	9f 91       	pop	r25
    175e:	8f 91       	pop	r24
    1760:	2f 91       	pop	r18
    1762:	0f 90       	pop	r0
    1764:	00 92 5b 00 	sts	0x005B, r0
    1768:	0f 90       	pop	r0
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	0f 90       	pop	r0
    176e:	1f 90       	pop	r1
    1770:	18 95       	reti

00001772 <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    1772:	1f 92       	push	r1
    1774:	0f 92       	push	r0
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	0f 92       	push	r0
    177a:	00 90 5b 00 	lds	r0, 0x005B
    177e:	0f 92       	push	r0
    1780:	11 24       	eor	r1, r1
    1782:	8f 93       	push	r24
    1784:	9f 93       	push	r25
    1786:	af 93       	push	r26
    1788:	bf 93       	push	r27
    178a:	ef 93       	push	r30
    178c:	ff 93       	push	r31
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    1796:	80 91 5b 01 	lds	r24, 0x015B
    179a:	88 23       	and	r24, r24
    179c:	d9 f0       	breq	.+54     	; 0x17d4 <__vector_34+0x62>
	{
		tx1_counter--;
    179e:	80 91 5b 01 	lds	r24, 0x015B
    17a2:	81 50       	subi	r24, 0x01	; 1
    17a4:	80 93 5b 01 	sts	0x015B, r24
		UDR1=tx1_buffer[tx1_rd_index];
    17a8:	ae ec       	ldi	r26, 0xCE	; 206
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	80 91 5c 01 	lds	r24, 0x015C
    17b0:	88 2f       	mov	r24, r24
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	fc 01       	movw	r30, r24
    17b6:	e1 52       	subi	r30, 0x21	; 33
    17b8:	fe 4f       	sbci	r31, 0xFE	; 254
    17ba:	80 81       	ld	r24, Z
    17bc:	8c 93       	st	X, r24
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    17be:	80 91 5c 01 	lds	r24, 0x015C
    17c2:	8f 5f       	subi	r24, 0xFF	; 255
    17c4:	80 93 5c 01 	sts	0x015C, r24
    17c8:	80 91 5c 01 	lds	r24, 0x015C
    17cc:	80 34       	cpi	r24, 0x40	; 64
    17ce:	11 f4       	brne	.+4      	; 0x17d4 <__vector_34+0x62>
			tx1_rd_index = 0;
    17d0:	10 92 5c 01 	sts	0x015C, r1
	}
}
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	ff 91       	pop	r31
    17da:	ef 91       	pop	r30
    17dc:	bf 91       	pop	r27
    17de:	af 91       	pop	r26
    17e0:	9f 91       	pop	r25
    17e2:	8f 91       	pop	r24
    17e4:	0f 90       	pop	r0
    17e6:	00 92 5b 00 	sts	0x005B, r0
    17ea:	0f 90       	pop	r0
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	0f 90       	pop	r0
    17f0:	1f 90       	pop	r1
    17f2:	18 95       	reti

000017f4 <__vector_32>:

ISR(USART1_RX_vect)
{
    17f4:	1f 92       	push	r1
    17f6:	0f 92       	push	r0
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	0f 92       	push	r0
    17fc:	00 90 5b 00 	lds	r0, 0x005B
    1800:	0f 92       	push	r0
    1802:	11 24       	eor	r1, r1
    1804:	2f 93       	push	r18
    1806:	8f 93       	push	r24
    1808:	9f 93       	push	r25
    180a:	ef 93       	push	r30
    180c:	ff 93       	push	r31
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	0f 92       	push	r0
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    1818:	e8 ec       	ldi	r30, 0xC8	; 200
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	88 2f       	mov	r24, r24
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	8c 71       	andi	r24, 0x1C	; 28
    1828:	90 70       	andi	r25, 0x00	; 0
    182a:	00 97       	sbiw	r24, 0x00	; 0
    182c:	d9 f4       	brne	.+54     	; 0x1864 <__vector_32+0x70>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    182e:	80 91 5d 01 	lds	r24, 0x015D
    1832:	88 2f       	mov	r24, r24
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	ee ec       	ldi	r30, 0xCE	; 206
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	20 81       	ld	r18, Z
    183c:	fc 01       	movw	r30, r24
    183e:	e1 5e       	subi	r30, 0xE1	; 225
    1840:	fd 4f       	sbci	r31, 0xFD	; 253
    1842:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    1844:	80 91 5d 01 	lds	r24, 0x015D
    1848:	8f 5f       	subi	r24, 0xFF	; 255
    184a:	80 93 5d 01 	sts	0x015D, r24
    184e:	80 91 5d 01 	lds	r24, 0x015D
    1852:	80 34       	cpi	r24, 0x40	; 64
    1854:	11 f4       	brne	.+4      	; 0x185a <__vector_32+0x66>
		rx1_wr_index = 0;
    1856:	10 92 5d 01 	sts	0x015D, r1

		rx1_counter++;
    185a:	80 91 5e 01 	lds	r24, 0x015E
    185e:	8f 5f       	subi	r24, 0xFF	; 255
    1860:	80 93 5e 01 	sts	0x015E, r24
	}
}
    1864:	0f 90       	pop	r0
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	ff 91       	pop	r31
    186c:	ef 91       	pop	r30
    186e:	9f 91       	pop	r25
    1870:	8f 91       	pop	r24
    1872:	2f 91       	pop	r18
    1874:	0f 90       	pop	r0
    1876:	00 92 5b 00 	sts	0x005B, r0
    187a:	0f 90       	pop	r0
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	0f 90       	pop	r0
    1880:	1f 90       	pop	r1
    1882:	18 95       	reti

00001884 <__subsf3>:
    1884:	50 58       	subi	r21, 0x80	; 128

00001886 <__addsf3>:
    1886:	bb 27       	eor	r27, r27
    1888:	aa 27       	eor	r26, r26
    188a:	0e d0       	rcall	.+28     	; 0x18a8 <__addsf3x>
    188c:	70 c1       	rjmp	.+736    	; 0x1b6e <__fp_round>
    188e:	61 d1       	rcall	.+706    	; 0x1b52 <__fp_pscA>
    1890:	30 f0       	brcs	.+12     	; 0x189e <__addsf3+0x18>
    1892:	66 d1       	rcall	.+716    	; 0x1b60 <__fp_pscB>
    1894:	20 f0       	brcs	.+8      	; 0x189e <__addsf3+0x18>
    1896:	31 f4       	brne	.+12     	; 0x18a4 <__addsf3+0x1e>
    1898:	9f 3f       	cpi	r25, 0xFF	; 255
    189a:	11 f4       	brne	.+4      	; 0x18a0 <__addsf3+0x1a>
    189c:	1e f4       	brtc	.+6      	; 0x18a4 <__addsf3+0x1e>
    189e:	56 c1       	rjmp	.+684    	; 0x1b4c <__fp_nan>
    18a0:	0e f4       	brtc	.+2      	; 0x18a4 <__addsf3+0x1e>
    18a2:	e0 95       	com	r30
    18a4:	e7 fb       	bst	r30, 7
    18a6:	4c c1       	rjmp	.+664    	; 0x1b40 <__fp_inf>

000018a8 <__addsf3x>:
    18a8:	e9 2f       	mov	r30, r25
    18aa:	72 d1       	rcall	.+740    	; 0x1b90 <__fp_split3>
    18ac:	80 f3       	brcs	.-32     	; 0x188e <__addsf3+0x8>
    18ae:	ba 17       	cp	r27, r26
    18b0:	62 07       	cpc	r22, r18
    18b2:	73 07       	cpc	r23, r19
    18b4:	84 07       	cpc	r24, r20
    18b6:	95 07       	cpc	r25, r21
    18b8:	18 f0       	brcs	.+6      	; 0x18c0 <__addsf3x+0x18>
    18ba:	71 f4       	brne	.+28     	; 0x18d8 <__addsf3x+0x30>
    18bc:	9e f5       	brtc	.+102    	; 0x1924 <__addsf3x+0x7c>
    18be:	8a c1       	rjmp	.+788    	; 0x1bd4 <__fp_zero>
    18c0:	0e f4       	brtc	.+2      	; 0x18c4 <__addsf3x+0x1c>
    18c2:	e0 95       	com	r30
    18c4:	0b 2e       	mov	r0, r27
    18c6:	ba 2f       	mov	r27, r26
    18c8:	a0 2d       	mov	r26, r0
    18ca:	0b 01       	movw	r0, r22
    18cc:	b9 01       	movw	r22, r18
    18ce:	90 01       	movw	r18, r0
    18d0:	0c 01       	movw	r0, r24
    18d2:	ca 01       	movw	r24, r20
    18d4:	a0 01       	movw	r20, r0
    18d6:	11 24       	eor	r1, r1
    18d8:	ff 27       	eor	r31, r31
    18da:	59 1b       	sub	r21, r25
    18dc:	99 f0       	breq	.+38     	; 0x1904 <__addsf3x+0x5c>
    18de:	59 3f       	cpi	r21, 0xF9	; 249
    18e0:	50 f4       	brcc	.+20     	; 0x18f6 <__addsf3x+0x4e>
    18e2:	50 3e       	cpi	r21, 0xE0	; 224
    18e4:	68 f1       	brcs	.+90     	; 0x1940 <__addsf3x+0x98>
    18e6:	1a 16       	cp	r1, r26
    18e8:	f0 40       	sbci	r31, 0x00	; 0
    18ea:	a2 2f       	mov	r26, r18
    18ec:	23 2f       	mov	r18, r19
    18ee:	34 2f       	mov	r19, r20
    18f0:	44 27       	eor	r20, r20
    18f2:	58 5f       	subi	r21, 0xF8	; 248
    18f4:	f3 cf       	rjmp	.-26     	; 0x18dc <__addsf3x+0x34>
    18f6:	46 95       	lsr	r20
    18f8:	37 95       	ror	r19
    18fa:	27 95       	ror	r18
    18fc:	a7 95       	ror	r26
    18fe:	f0 40       	sbci	r31, 0x00	; 0
    1900:	53 95       	inc	r21
    1902:	c9 f7       	brne	.-14     	; 0x18f6 <__addsf3x+0x4e>
    1904:	7e f4       	brtc	.+30     	; 0x1924 <__addsf3x+0x7c>
    1906:	1f 16       	cp	r1, r31
    1908:	ba 0b       	sbc	r27, r26
    190a:	62 0b       	sbc	r22, r18
    190c:	73 0b       	sbc	r23, r19
    190e:	84 0b       	sbc	r24, r20
    1910:	ba f0       	brmi	.+46     	; 0x1940 <__addsf3x+0x98>
    1912:	91 50       	subi	r25, 0x01	; 1
    1914:	a1 f0       	breq	.+40     	; 0x193e <__addsf3x+0x96>
    1916:	ff 0f       	add	r31, r31
    1918:	bb 1f       	adc	r27, r27
    191a:	66 1f       	adc	r22, r22
    191c:	77 1f       	adc	r23, r23
    191e:	88 1f       	adc	r24, r24
    1920:	c2 f7       	brpl	.-16     	; 0x1912 <__addsf3x+0x6a>
    1922:	0e c0       	rjmp	.+28     	; 0x1940 <__addsf3x+0x98>
    1924:	ba 0f       	add	r27, r26
    1926:	62 1f       	adc	r22, r18
    1928:	73 1f       	adc	r23, r19
    192a:	84 1f       	adc	r24, r20
    192c:	48 f4       	brcc	.+18     	; 0x1940 <__addsf3x+0x98>
    192e:	87 95       	ror	r24
    1930:	77 95       	ror	r23
    1932:	67 95       	ror	r22
    1934:	b7 95       	ror	r27
    1936:	f7 95       	ror	r31
    1938:	9e 3f       	cpi	r25, 0xFE	; 254
    193a:	08 f0       	brcs	.+2      	; 0x193e <__addsf3x+0x96>
    193c:	b3 cf       	rjmp	.-154    	; 0x18a4 <__addsf3+0x1e>
    193e:	93 95       	inc	r25
    1940:	88 0f       	add	r24, r24
    1942:	08 f0       	brcs	.+2      	; 0x1946 <__addsf3x+0x9e>
    1944:	99 27       	eor	r25, r25
    1946:	ee 0f       	add	r30, r30
    1948:	97 95       	ror	r25
    194a:	87 95       	ror	r24
    194c:	08 95       	ret

0000194e <__cmpsf2>:
    194e:	d4 d0       	rcall	.+424    	; 0x1af8 <__fp_cmp>
    1950:	08 f4       	brcc	.+2      	; 0x1954 <__cmpsf2+0x6>
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	08 95       	ret

00001956 <__divsf3>:
    1956:	0c d0       	rcall	.+24     	; 0x1970 <__divsf3x>
    1958:	0a c1       	rjmp	.+532    	; 0x1b6e <__fp_round>
    195a:	02 d1       	rcall	.+516    	; 0x1b60 <__fp_pscB>
    195c:	40 f0       	brcs	.+16     	; 0x196e <__divsf3+0x18>
    195e:	f9 d0       	rcall	.+498    	; 0x1b52 <__fp_pscA>
    1960:	30 f0       	brcs	.+12     	; 0x196e <__divsf3+0x18>
    1962:	21 f4       	brne	.+8      	; 0x196c <__divsf3+0x16>
    1964:	5f 3f       	cpi	r21, 0xFF	; 255
    1966:	19 f0       	breq	.+6      	; 0x196e <__divsf3+0x18>
    1968:	eb c0       	rjmp	.+470    	; 0x1b40 <__fp_inf>
    196a:	51 11       	cpse	r21, r1
    196c:	34 c1       	rjmp	.+616    	; 0x1bd6 <__fp_szero>
    196e:	ee c0       	rjmp	.+476    	; 0x1b4c <__fp_nan>

00001970 <__divsf3x>:
    1970:	0f d1       	rcall	.+542    	; 0x1b90 <__fp_split3>
    1972:	98 f3       	brcs	.-26     	; 0x195a <__divsf3+0x4>

00001974 <__divsf3_pse>:
    1974:	99 23       	and	r25, r25
    1976:	c9 f3       	breq	.-14     	; 0x196a <__divsf3+0x14>
    1978:	55 23       	and	r21, r21
    197a:	b1 f3       	breq	.-20     	; 0x1968 <__divsf3+0x12>
    197c:	95 1b       	sub	r25, r21
    197e:	55 0b       	sbc	r21, r21
    1980:	bb 27       	eor	r27, r27
    1982:	aa 27       	eor	r26, r26
    1984:	62 17       	cp	r22, r18
    1986:	73 07       	cpc	r23, r19
    1988:	84 07       	cpc	r24, r20
    198a:	38 f0       	brcs	.+14     	; 0x199a <__divsf3_pse+0x26>
    198c:	9f 5f       	subi	r25, 0xFF	; 255
    198e:	5f 4f       	sbci	r21, 0xFF	; 255
    1990:	22 0f       	add	r18, r18
    1992:	33 1f       	adc	r19, r19
    1994:	44 1f       	adc	r20, r20
    1996:	aa 1f       	adc	r26, r26
    1998:	a9 f3       	breq	.-22     	; 0x1984 <__divsf3_pse+0x10>
    199a:	33 d0       	rcall	.+102    	; 0x1a02 <__divsf3_pse+0x8e>
    199c:	0e 2e       	mov	r0, r30
    199e:	3a f0       	brmi	.+14     	; 0x19ae <__divsf3_pse+0x3a>
    19a0:	e0 e8       	ldi	r30, 0x80	; 128
    19a2:	30 d0       	rcall	.+96     	; 0x1a04 <__divsf3_pse+0x90>
    19a4:	91 50       	subi	r25, 0x01	; 1
    19a6:	50 40       	sbci	r21, 0x00	; 0
    19a8:	e6 95       	lsr	r30
    19aa:	00 1c       	adc	r0, r0
    19ac:	ca f7       	brpl	.-14     	; 0x19a0 <__divsf3_pse+0x2c>
    19ae:	29 d0       	rcall	.+82     	; 0x1a02 <__divsf3_pse+0x8e>
    19b0:	fe 2f       	mov	r31, r30
    19b2:	27 d0       	rcall	.+78     	; 0x1a02 <__divsf3_pse+0x8e>
    19b4:	66 0f       	add	r22, r22
    19b6:	77 1f       	adc	r23, r23
    19b8:	88 1f       	adc	r24, r24
    19ba:	bb 1f       	adc	r27, r27
    19bc:	26 17       	cp	r18, r22
    19be:	37 07       	cpc	r19, r23
    19c0:	48 07       	cpc	r20, r24
    19c2:	ab 07       	cpc	r26, r27
    19c4:	b0 e8       	ldi	r27, 0x80	; 128
    19c6:	09 f0       	breq	.+2      	; 0x19ca <__divsf3_pse+0x56>
    19c8:	bb 0b       	sbc	r27, r27
    19ca:	80 2d       	mov	r24, r0
    19cc:	bf 01       	movw	r22, r30
    19ce:	ff 27       	eor	r31, r31
    19d0:	93 58       	subi	r25, 0x83	; 131
    19d2:	5f 4f       	sbci	r21, 0xFF	; 255
    19d4:	2a f0       	brmi	.+10     	; 0x19e0 <__divsf3_pse+0x6c>
    19d6:	9e 3f       	cpi	r25, 0xFE	; 254
    19d8:	51 05       	cpc	r21, r1
    19da:	68 f0       	brcs	.+26     	; 0x19f6 <__divsf3_pse+0x82>
    19dc:	b1 c0       	rjmp	.+354    	; 0x1b40 <__fp_inf>
    19de:	fb c0       	rjmp	.+502    	; 0x1bd6 <__fp_szero>
    19e0:	5f 3f       	cpi	r21, 0xFF	; 255
    19e2:	ec f3       	brlt	.-6      	; 0x19de <__divsf3_pse+0x6a>
    19e4:	98 3e       	cpi	r25, 0xE8	; 232
    19e6:	dc f3       	brlt	.-10     	; 0x19de <__divsf3_pse+0x6a>
    19e8:	86 95       	lsr	r24
    19ea:	77 95       	ror	r23
    19ec:	67 95       	ror	r22
    19ee:	b7 95       	ror	r27
    19f0:	f7 95       	ror	r31
    19f2:	9f 5f       	subi	r25, 0xFF	; 255
    19f4:	c9 f7       	brne	.-14     	; 0x19e8 <__divsf3_pse+0x74>
    19f6:	88 0f       	add	r24, r24
    19f8:	91 1d       	adc	r25, r1
    19fa:	96 95       	lsr	r25
    19fc:	87 95       	ror	r24
    19fe:	97 f9       	bld	r25, 7
    1a00:	08 95       	ret
    1a02:	e1 e0       	ldi	r30, 0x01	; 1
    1a04:	66 0f       	add	r22, r22
    1a06:	77 1f       	adc	r23, r23
    1a08:	88 1f       	adc	r24, r24
    1a0a:	bb 1f       	adc	r27, r27
    1a0c:	62 17       	cp	r22, r18
    1a0e:	73 07       	cpc	r23, r19
    1a10:	84 07       	cpc	r24, r20
    1a12:	ba 07       	cpc	r27, r26
    1a14:	20 f0       	brcs	.+8      	; 0x1a1e <__divsf3_pse+0xaa>
    1a16:	62 1b       	sub	r22, r18
    1a18:	73 0b       	sbc	r23, r19
    1a1a:	84 0b       	sbc	r24, r20
    1a1c:	ba 0b       	sbc	r27, r26
    1a1e:	ee 1f       	adc	r30, r30
    1a20:	88 f7       	brcc	.-30     	; 0x1a04 <__divsf3_pse+0x90>
    1a22:	e0 95       	com	r30
    1a24:	08 95       	ret

00001a26 <__fixunssfsi>:
    1a26:	bc d0       	rcall	.+376    	; 0x1ba0 <__fp_splitA>
    1a28:	88 f0       	brcs	.+34     	; 0x1a4c <__fixunssfsi+0x26>
    1a2a:	9f 57       	subi	r25, 0x7F	; 127
    1a2c:	90 f0       	brcs	.+36     	; 0x1a52 <__fixunssfsi+0x2c>
    1a2e:	b9 2f       	mov	r27, r25
    1a30:	99 27       	eor	r25, r25
    1a32:	b7 51       	subi	r27, 0x17	; 23
    1a34:	a0 f0       	brcs	.+40     	; 0x1a5e <__fixunssfsi+0x38>
    1a36:	d1 f0       	breq	.+52     	; 0x1a6c <__fixunssfsi+0x46>
    1a38:	66 0f       	add	r22, r22
    1a3a:	77 1f       	adc	r23, r23
    1a3c:	88 1f       	adc	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	1a f0       	brmi	.+6      	; 0x1a48 <__fixunssfsi+0x22>
    1a42:	ba 95       	dec	r27
    1a44:	c9 f7       	brne	.-14     	; 0x1a38 <__fixunssfsi+0x12>
    1a46:	12 c0       	rjmp	.+36     	; 0x1a6c <__fixunssfsi+0x46>
    1a48:	b1 30       	cpi	r27, 0x01	; 1
    1a4a:	81 f0       	breq	.+32     	; 0x1a6c <__fixunssfsi+0x46>
    1a4c:	c3 d0       	rcall	.+390    	; 0x1bd4 <__fp_zero>
    1a4e:	b1 e0       	ldi	r27, 0x01	; 1
    1a50:	08 95       	ret
    1a52:	c0 c0       	rjmp	.+384    	; 0x1bd4 <__fp_zero>
    1a54:	67 2f       	mov	r22, r23
    1a56:	78 2f       	mov	r23, r24
    1a58:	88 27       	eor	r24, r24
    1a5a:	b8 5f       	subi	r27, 0xF8	; 248
    1a5c:	39 f0       	breq	.+14     	; 0x1a6c <__fixunssfsi+0x46>
    1a5e:	b9 3f       	cpi	r27, 0xF9	; 249
    1a60:	cc f3       	brlt	.-14     	; 0x1a54 <__fixunssfsi+0x2e>
    1a62:	86 95       	lsr	r24
    1a64:	77 95       	ror	r23
    1a66:	67 95       	ror	r22
    1a68:	b3 95       	inc	r27
    1a6a:	d9 f7       	brne	.-10     	; 0x1a62 <__fixunssfsi+0x3c>
    1a6c:	3e f4       	brtc	.+14     	; 0x1a7c <__fixunssfsi+0x56>
    1a6e:	90 95       	com	r25
    1a70:	80 95       	com	r24
    1a72:	70 95       	com	r23
    1a74:	61 95       	neg	r22
    1a76:	7f 4f       	sbci	r23, 0xFF	; 255
    1a78:	8f 4f       	sbci	r24, 0xFF	; 255
    1a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7c:	08 95       	ret

00001a7e <__floatunsisf>:
    1a7e:	e8 94       	clt
    1a80:	09 c0       	rjmp	.+18     	; 0x1a94 <__floatsisf+0x12>

00001a82 <__floatsisf>:
    1a82:	97 fb       	bst	r25, 7
    1a84:	3e f4       	brtc	.+14     	; 0x1a94 <__floatsisf+0x12>
    1a86:	90 95       	com	r25
    1a88:	80 95       	com	r24
    1a8a:	70 95       	com	r23
    1a8c:	61 95       	neg	r22
    1a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a90:	8f 4f       	sbci	r24, 0xFF	; 255
    1a92:	9f 4f       	sbci	r25, 0xFF	; 255
    1a94:	99 23       	and	r25, r25
    1a96:	a9 f0       	breq	.+42     	; 0x1ac2 <__floatsisf+0x40>
    1a98:	f9 2f       	mov	r31, r25
    1a9a:	96 e9       	ldi	r25, 0x96	; 150
    1a9c:	bb 27       	eor	r27, r27
    1a9e:	93 95       	inc	r25
    1aa0:	f6 95       	lsr	r31
    1aa2:	87 95       	ror	r24
    1aa4:	77 95       	ror	r23
    1aa6:	67 95       	ror	r22
    1aa8:	b7 95       	ror	r27
    1aaa:	f1 11       	cpse	r31, r1
    1aac:	f8 cf       	rjmp	.-16     	; 0x1a9e <__floatsisf+0x1c>
    1aae:	fa f4       	brpl	.+62     	; 0x1aee <__floatsisf+0x6c>
    1ab0:	bb 0f       	add	r27, r27
    1ab2:	11 f4       	brne	.+4      	; 0x1ab8 <__floatsisf+0x36>
    1ab4:	60 ff       	sbrs	r22, 0
    1ab6:	1b c0       	rjmp	.+54     	; 0x1aee <__floatsisf+0x6c>
    1ab8:	6f 5f       	subi	r22, 0xFF	; 255
    1aba:	7f 4f       	sbci	r23, 0xFF	; 255
    1abc:	8f 4f       	sbci	r24, 0xFF	; 255
    1abe:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac0:	16 c0       	rjmp	.+44     	; 0x1aee <__floatsisf+0x6c>
    1ac2:	88 23       	and	r24, r24
    1ac4:	11 f0       	breq	.+4      	; 0x1aca <__floatsisf+0x48>
    1ac6:	96 e9       	ldi	r25, 0x96	; 150
    1ac8:	11 c0       	rjmp	.+34     	; 0x1aec <__floatsisf+0x6a>
    1aca:	77 23       	and	r23, r23
    1acc:	21 f0       	breq	.+8      	; 0x1ad6 <__floatsisf+0x54>
    1ace:	9e e8       	ldi	r25, 0x8E	; 142
    1ad0:	87 2f       	mov	r24, r23
    1ad2:	76 2f       	mov	r23, r22
    1ad4:	05 c0       	rjmp	.+10     	; 0x1ae0 <__floatsisf+0x5e>
    1ad6:	66 23       	and	r22, r22
    1ad8:	71 f0       	breq	.+28     	; 0x1af6 <__floatsisf+0x74>
    1ada:	96 e8       	ldi	r25, 0x86	; 134
    1adc:	86 2f       	mov	r24, r22
    1ade:	70 e0       	ldi	r23, 0x00	; 0
    1ae0:	60 e0       	ldi	r22, 0x00	; 0
    1ae2:	2a f0       	brmi	.+10     	; 0x1aee <__floatsisf+0x6c>
    1ae4:	9a 95       	dec	r25
    1ae6:	66 0f       	add	r22, r22
    1ae8:	77 1f       	adc	r23, r23
    1aea:	88 1f       	adc	r24, r24
    1aec:	da f7       	brpl	.-10     	; 0x1ae4 <__floatsisf+0x62>
    1aee:	88 0f       	add	r24, r24
    1af0:	96 95       	lsr	r25
    1af2:	87 95       	ror	r24
    1af4:	97 f9       	bld	r25, 7
    1af6:	08 95       	ret

00001af8 <__fp_cmp>:
    1af8:	99 0f       	add	r25, r25
    1afa:	00 08       	sbc	r0, r0
    1afc:	55 0f       	add	r21, r21
    1afe:	aa 0b       	sbc	r26, r26
    1b00:	e0 e8       	ldi	r30, 0x80	; 128
    1b02:	fe ef       	ldi	r31, 0xFE	; 254
    1b04:	16 16       	cp	r1, r22
    1b06:	17 06       	cpc	r1, r23
    1b08:	e8 07       	cpc	r30, r24
    1b0a:	f9 07       	cpc	r31, r25
    1b0c:	c0 f0       	brcs	.+48     	; 0x1b3e <__fp_cmp+0x46>
    1b0e:	12 16       	cp	r1, r18
    1b10:	13 06       	cpc	r1, r19
    1b12:	e4 07       	cpc	r30, r20
    1b14:	f5 07       	cpc	r31, r21
    1b16:	98 f0       	brcs	.+38     	; 0x1b3e <__fp_cmp+0x46>
    1b18:	62 1b       	sub	r22, r18
    1b1a:	73 0b       	sbc	r23, r19
    1b1c:	84 0b       	sbc	r24, r20
    1b1e:	95 0b       	sbc	r25, r21
    1b20:	39 f4       	brne	.+14     	; 0x1b30 <__fp_cmp+0x38>
    1b22:	0a 26       	eor	r0, r26
    1b24:	61 f0       	breq	.+24     	; 0x1b3e <__fp_cmp+0x46>
    1b26:	23 2b       	or	r18, r19
    1b28:	24 2b       	or	r18, r20
    1b2a:	25 2b       	or	r18, r21
    1b2c:	21 f4       	brne	.+8      	; 0x1b36 <__fp_cmp+0x3e>
    1b2e:	08 95       	ret
    1b30:	0a 26       	eor	r0, r26
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <__fp_cmp+0x3e>
    1b34:	a1 40       	sbci	r26, 0x01	; 1
    1b36:	a6 95       	lsr	r26
    1b38:	8f ef       	ldi	r24, 0xFF	; 255
    1b3a:	81 1d       	adc	r24, r1
    1b3c:	81 1d       	adc	r24, r1
    1b3e:	08 95       	ret

00001b40 <__fp_inf>:
    1b40:	97 f9       	bld	r25, 7
    1b42:	9f 67       	ori	r25, 0x7F	; 127
    1b44:	80 e8       	ldi	r24, 0x80	; 128
    1b46:	70 e0       	ldi	r23, 0x00	; 0
    1b48:	60 e0       	ldi	r22, 0x00	; 0
    1b4a:	08 95       	ret

00001b4c <__fp_nan>:
    1b4c:	9f ef       	ldi	r25, 0xFF	; 255
    1b4e:	80 ec       	ldi	r24, 0xC0	; 192
    1b50:	08 95       	ret

00001b52 <__fp_pscA>:
    1b52:	00 24       	eor	r0, r0
    1b54:	0a 94       	dec	r0
    1b56:	16 16       	cp	r1, r22
    1b58:	17 06       	cpc	r1, r23
    1b5a:	18 06       	cpc	r1, r24
    1b5c:	09 06       	cpc	r0, r25
    1b5e:	08 95       	ret

00001b60 <__fp_pscB>:
    1b60:	00 24       	eor	r0, r0
    1b62:	0a 94       	dec	r0
    1b64:	12 16       	cp	r1, r18
    1b66:	13 06       	cpc	r1, r19
    1b68:	14 06       	cpc	r1, r20
    1b6a:	05 06       	cpc	r0, r21
    1b6c:	08 95       	ret

00001b6e <__fp_round>:
    1b6e:	09 2e       	mov	r0, r25
    1b70:	03 94       	inc	r0
    1b72:	00 0c       	add	r0, r0
    1b74:	11 f4       	brne	.+4      	; 0x1b7a <__fp_round+0xc>
    1b76:	88 23       	and	r24, r24
    1b78:	52 f0       	brmi	.+20     	; 0x1b8e <__fp_round+0x20>
    1b7a:	bb 0f       	add	r27, r27
    1b7c:	40 f4       	brcc	.+16     	; 0x1b8e <__fp_round+0x20>
    1b7e:	bf 2b       	or	r27, r31
    1b80:	11 f4       	brne	.+4      	; 0x1b86 <__fp_round+0x18>
    1b82:	60 ff       	sbrs	r22, 0
    1b84:	04 c0       	rjmp	.+8      	; 0x1b8e <__fp_round+0x20>
    1b86:	6f 5f       	subi	r22, 0xFF	; 255
    1b88:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8e:	08 95       	ret

00001b90 <__fp_split3>:
    1b90:	57 fd       	sbrc	r21, 7
    1b92:	90 58       	subi	r25, 0x80	; 128
    1b94:	44 0f       	add	r20, r20
    1b96:	55 1f       	adc	r21, r21
    1b98:	59 f0       	breq	.+22     	; 0x1bb0 <__fp_splitA+0x10>
    1b9a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b9c:	71 f0       	breq	.+28     	; 0x1bba <__fp_splitA+0x1a>
    1b9e:	47 95       	ror	r20

00001ba0 <__fp_splitA>:
    1ba0:	88 0f       	add	r24, r24
    1ba2:	97 fb       	bst	r25, 7
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	61 f0       	breq	.+24     	; 0x1bc0 <__fp_splitA+0x20>
    1ba8:	9f 3f       	cpi	r25, 0xFF	; 255
    1baa:	79 f0       	breq	.+30     	; 0x1bca <__fp_splitA+0x2a>
    1bac:	87 95       	ror	r24
    1bae:	08 95       	ret
    1bb0:	12 16       	cp	r1, r18
    1bb2:	13 06       	cpc	r1, r19
    1bb4:	14 06       	cpc	r1, r20
    1bb6:	55 1f       	adc	r21, r21
    1bb8:	f2 cf       	rjmp	.-28     	; 0x1b9e <__fp_split3+0xe>
    1bba:	46 95       	lsr	r20
    1bbc:	f1 df       	rcall	.-30     	; 0x1ba0 <__fp_splitA>
    1bbe:	08 c0       	rjmp	.+16     	; 0x1bd0 <__fp_splitA+0x30>
    1bc0:	16 16       	cp	r1, r22
    1bc2:	17 06       	cpc	r1, r23
    1bc4:	18 06       	cpc	r1, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	f1 cf       	rjmp	.-30     	; 0x1bac <__fp_splitA+0xc>
    1bca:	86 95       	lsr	r24
    1bcc:	71 05       	cpc	r23, r1
    1bce:	61 05       	cpc	r22, r1
    1bd0:	08 94       	sec
    1bd2:	08 95       	ret

00001bd4 <__fp_zero>:
    1bd4:	e8 94       	clt

00001bd6 <__fp_szero>:
    1bd6:	bb 27       	eor	r27, r27
    1bd8:	66 27       	eor	r22, r22
    1bda:	77 27       	eor	r23, r23
    1bdc:	cb 01       	movw	r24, r22
    1bde:	97 f9       	bld	r25, 7
    1be0:	08 95       	ret

00001be2 <__gesf2>:
    1be2:	8a df       	rcall	.-236    	; 0x1af8 <__fp_cmp>
    1be4:	08 f4       	brcc	.+2      	; 0x1be8 <__gesf2+0x6>
    1be6:	8f ef       	ldi	r24, 0xFF	; 255
    1be8:	08 95       	ret

00001bea <__mulsf3>:
    1bea:	0b d0       	rcall	.+22     	; 0x1c02 <__mulsf3x>
    1bec:	c0 cf       	rjmp	.-128    	; 0x1b6e <__fp_round>
    1bee:	b1 df       	rcall	.-158    	; 0x1b52 <__fp_pscA>
    1bf0:	28 f0       	brcs	.+10     	; 0x1bfc <__mulsf3+0x12>
    1bf2:	b6 df       	rcall	.-148    	; 0x1b60 <__fp_pscB>
    1bf4:	18 f0       	brcs	.+6      	; 0x1bfc <__mulsf3+0x12>
    1bf6:	95 23       	and	r25, r21
    1bf8:	09 f0       	breq	.+2      	; 0x1bfc <__mulsf3+0x12>
    1bfa:	a2 cf       	rjmp	.-188    	; 0x1b40 <__fp_inf>
    1bfc:	a7 cf       	rjmp	.-178    	; 0x1b4c <__fp_nan>
    1bfe:	11 24       	eor	r1, r1
    1c00:	ea cf       	rjmp	.-44     	; 0x1bd6 <__fp_szero>

00001c02 <__mulsf3x>:
    1c02:	c6 df       	rcall	.-116    	; 0x1b90 <__fp_split3>
    1c04:	a0 f3       	brcs	.-24     	; 0x1bee <__mulsf3+0x4>

00001c06 <__mulsf3_pse>:
    1c06:	95 9f       	mul	r25, r21
    1c08:	d1 f3       	breq	.-12     	; 0x1bfe <__mulsf3+0x14>
    1c0a:	95 0f       	add	r25, r21
    1c0c:	50 e0       	ldi	r21, 0x00	; 0
    1c0e:	55 1f       	adc	r21, r21
    1c10:	62 9f       	mul	r22, r18
    1c12:	f0 01       	movw	r30, r0
    1c14:	72 9f       	mul	r23, r18
    1c16:	bb 27       	eor	r27, r27
    1c18:	f0 0d       	add	r31, r0
    1c1a:	b1 1d       	adc	r27, r1
    1c1c:	63 9f       	mul	r22, r19
    1c1e:	aa 27       	eor	r26, r26
    1c20:	f0 0d       	add	r31, r0
    1c22:	b1 1d       	adc	r27, r1
    1c24:	aa 1f       	adc	r26, r26
    1c26:	64 9f       	mul	r22, r20
    1c28:	66 27       	eor	r22, r22
    1c2a:	b0 0d       	add	r27, r0
    1c2c:	a1 1d       	adc	r26, r1
    1c2e:	66 1f       	adc	r22, r22
    1c30:	82 9f       	mul	r24, r18
    1c32:	22 27       	eor	r18, r18
    1c34:	b0 0d       	add	r27, r0
    1c36:	a1 1d       	adc	r26, r1
    1c38:	62 1f       	adc	r22, r18
    1c3a:	73 9f       	mul	r23, r19
    1c3c:	b0 0d       	add	r27, r0
    1c3e:	a1 1d       	adc	r26, r1
    1c40:	62 1f       	adc	r22, r18
    1c42:	83 9f       	mul	r24, r19
    1c44:	a0 0d       	add	r26, r0
    1c46:	61 1d       	adc	r22, r1
    1c48:	22 1f       	adc	r18, r18
    1c4a:	74 9f       	mul	r23, r20
    1c4c:	33 27       	eor	r19, r19
    1c4e:	a0 0d       	add	r26, r0
    1c50:	61 1d       	adc	r22, r1
    1c52:	23 1f       	adc	r18, r19
    1c54:	84 9f       	mul	r24, r20
    1c56:	60 0d       	add	r22, r0
    1c58:	21 1d       	adc	r18, r1
    1c5a:	82 2f       	mov	r24, r18
    1c5c:	76 2f       	mov	r23, r22
    1c5e:	6a 2f       	mov	r22, r26
    1c60:	11 24       	eor	r1, r1
    1c62:	9f 57       	subi	r25, 0x7F	; 127
    1c64:	50 40       	sbci	r21, 0x00	; 0
    1c66:	8a f0       	brmi	.+34     	; 0x1c8a <__mulsf3_pse+0x84>
    1c68:	e1 f0       	breq	.+56     	; 0x1ca2 <__mulsf3_pse+0x9c>
    1c6a:	88 23       	and	r24, r24
    1c6c:	4a f0       	brmi	.+18     	; 0x1c80 <__mulsf3_pse+0x7a>
    1c6e:	ee 0f       	add	r30, r30
    1c70:	ff 1f       	adc	r31, r31
    1c72:	bb 1f       	adc	r27, r27
    1c74:	66 1f       	adc	r22, r22
    1c76:	77 1f       	adc	r23, r23
    1c78:	88 1f       	adc	r24, r24
    1c7a:	91 50       	subi	r25, 0x01	; 1
    1c7c:	50 40       	sbci	r21, 0x00	; 0
    1c7e:	a9 f7       	brne	.-22     	; 0x1c6a <__mulsf3_pse+0x64>
    1c80:	9e 3f       	cpi	r25, 0xFE	; 254
    1c82:	51 05       	cpc	r21, r1
    1c84:	70 f0       	brcs	.+28     	; 0x1ca2 <__mulsf3_pse+0x9c>
    1c86:	5c cf       	rjmp	.-328    	; 0x1b40 <__fp_inf>
    1c88:	a6 cf       	rjmp	.-180    	; 0x1bd6 <__fp_szero>
    1c8a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c8c:	ec f3       	brlt	.-6      	; 0x1c88 <__mulsf3_pse+0x82>
    1c8e:	98 3e       	cpi	r25, 0xE8	; 232
    1c90:	dc f3       	brlt	.-10     	; 0x1c88 <__mulsf3_pse+0x82>
    1c92:	86 95       	lsr	r24
    1c94:	77 95       	ror	r23
    1c96:	67 95       	ror	r22
    1c98:	b7 95       	ror	r27
    1c9a:	f7 95       	ror	r31
    1c9c:	e7 95       	ror	r30
    1c9e:	9f 5f       	subi	r25, 0xFF	; 255
    1ca0:	c1 f7       	brne	.-16     	; 0x1c92 <__mulsf3_pse+0x8c>
    1ca2:	fe 2b       	or	r31, r30
    1ca4:	88 0f       	add	r24, r24
    1ca6:	91 1d       	adc	r25, r1
    1ca8:	96 95       	lsr	r25
    1caa:	87 95       	ror	r24
    1cac:	97 f9       	bld	r25, 7
    1cae:	08 95       	ret

00001cb0 <calloc>:
    1cb0:	0f 93       	push	r16
    1cb2:	1f 93       	push	r17
    1cb4:	cf 93       	push	r28
    1cb6:	df 93       	push	r29
    1cb8:	68 9f       	mul	r22, r24
    1cba:	80 01       	movw	r16, r0
    1cbc:	69 9f       	mul	r22, r25
    1cbe:	10 0d       	add	r17, r0
    1cc0:	78 9f       	mul	r23, r24
    1cc2:	10 0d       	add	r17, r0
    1cc4:	11 24       	eor	r1, r1
    1cc6:	c8 01       	movw	r24, r16
    1cc8:	0d d0       	rcall	.+26     	; 0x1ce4 <malloc>
    1cca:	ec 01       	movw	r28, r24
    1ccc:	00 97       	sbiw	r24, 0x00	; 0
    1cce:	21 f0       	breq	.+8      	; 0x1cd8 <calloc+0x28>
    1cd0:	60 e0       	ldi	r22, 0x00	; 0
    1cd2:	70 e0       	ldi	r23, 0x00	; 0
    1cd4:	a8 01       	movw	r20, r16
    1cd6:	0b d1       	rcall	.+534    	; 0x1eee <memset>
    1cd8:	ce 01       	movw	r24, r28
    1cda:	df 91       	pop	r29
    1cdc:	cf 91       	pop	r28
    1cde:	1f 91       	pop	r17
    1ce0:	0f 91       	pop	r16
    1ce2:	08 95       	ret

00001ce4 <malloc>:
    1ce4:	cf 93       	push	r28
    1ce6:	df 93       	push	r29
    1ce8:	bc 01       	movw	r22, r24
    1cea:	82 30       	cpi	r24, 0x02	; 2
    1cec:	91 05       	cpc	r25, r1
    1cee:	10 f4       	brcc	.+4      	; 0x1cf4 <malloc+0x10>
    1cf0:	62 e0       	ldi	r22, 0x02	; 2
    1cf2:	70 e0       	ldi	r23, 0x00	; 0
    1cf4:	a0 91 61 02 	lds	r26, 0x0261
    1cf8:	b0 91 62 02 	lds	r27, 0x0262
    1cfc:	ed 01       	movw	r28, r26
    1cfe:	e0 e0       	ldi	r30, 0x00	; 0
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	40 e0       	ldi	r20, 0x00	; 0
    1d04:	50 e0       	ldi	r21, 0x00	; 0
    1d06:	21 c0       	rjmp	.+66     	; 0x1d4a <malloc+0x66>
    1d08:	88 81       	ld	r24, Y
    1d0a:	99 81       	ldd	r25, Y+1	; 0x01
    1d0c:	86 17       	cp	r24, r22
    1d0e:	97 07       	cpc	r25, r23
    1d10:	69 f4       	brne	.+26     	; 0x1d2c <malloc+0x48>
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	9b 81       	ldd	r25, Y+3	; 0x03
    1d16:	30 97       	sbiw	r30, 0x00	; 0
    1d18:	19 f0       	breq	.+6      	; 0x1d20 <malloc+0x3c>
    1d1a:	93 83       	std	Z+3, r25	; 0x03
    1d1c:	82 83       	std	Z+2, r24	; 0x02
    1d1e:	04 c0       	rjmp	.+8      	; 0x1d28 <malloc+0x44>
    1d20:	90 93 62 02 	sts	0x0262, r25
    1d24:	80 93 61 02 	sts	0x0261, r24
    1d28:	fe 01       	movw	r30, r28
    1d2a:	34 c0       	rjmp	.+104    	; 0x1d94 <malloc+0xb0>
    1d2c:	68 17       	cp	r22, r24
    1d2e:	79 07       	cpc	r23, r25
    1d30:	38 f4       	brcc	.+14     	; 0x1d40 <malloc+0x5c>
    1d32:	41 15       	cp	r20, r1
    1d34:	51 05       	cpc	r21, r1
    1d36:	19 f0       	breq	.+6      	; 0x1d3e <malloc+0x5a>
    1d38:	84 17       	cp	r24, r20
    1d3a:	95 07       	cpc	r25, r21
    1d3c:	08 f4       	brcc	.+2      	; 0x1d40 <malloc+0x5c>
    1d3e:	ac 01       	movw	r20, r24
    1d40:	fe 01       	movw	r30, r28
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	9b 81       	ldd	r25, Y+3	; 0x03
    1d46:	9c 01       	movw	r18, r24
    1d48:	e9 01       	movw	r28, r18
    1d4a:	20 97       	sbiw	r28, 0x00	; 0
    1d4c:	e9 f6       	brne	.-70     	; 0x1d08 <malloc+0x24>
    1d4e:	41 15       	cp	r20, r1
    1d50:	51 05       	cpc	r21, r1
    1d52:	a9 f1       	breq	.+106    	; 0x1dbe <malloc+0xda>
    1d54:	ca 01       	movw	r24, r20
    1d56:	86 1b       	sub	r24, r22
    1d58:	97 0b       	sbc	r25, r23
    1d5a:	04 97       	sbiw	r24, 0x04	; 4
    1d5c:	08 f4       	brcc	.+2      	; 0x1d60 <malloc+0x7c>
    1d5e:	ba 01       	movw	r22, r20
    1d60:	e0 e0       	ldi	r30, 0x00	; 0
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	2a c0       	rjmp	.+84     	; 0x1dba <malloc+0xd6>
    1d66:	8d 91       	ld	r24, X+
    1d68:	9c 91       	ld	r25, X
    1d6a:	11 97       	sbiw	r26, 0x01	; 1
    1d6c:	84 17       	cp	r24, r20
    1d6e:	95 07       	cpc	r25, r21
    1d70:	f9 f4       	brne	.+62     	; 0x1db0 <malloc+0xcc>
    1d72:	64 17       	cp	r22, r20
    1d74:	75 07       	cpc	r23, r21
    1d76:	81 f4       	brne	.+32     	; 0x1d98 <malloc+0xb4>
    1d78:	12 96       	adiw	r26, 0x02	; 2
    1d7a:	8d 91       	ld	r24, X+
    1d7c:	9c 91       	ld	r25, X
    1d7e:	13 97       	sbiw	r26, 0x03	; 3
    1d80:	30 97       	sbiw	r30, 0x00	; 0
    1d82:	19 f0       	breq	.+6      	; 0x1d8a <malloc+0xa6>
    1d84:	93 83       	std	Z+3, r25	; 0x03
    1d86:	82 83       	std	Z+2, r24	; 0x02
    1d88:	04 c0       	rjmp	.+8      	; 0x1d92 <malloc+0xae>
    1d8a:	90 93 62 02 	sts	0x0262, r25
    1d8e:	80 93 61 02 	sts	0x0261, r24
    1d92:	fd 01       	movw	r30, r26
    1d94:	32 96       	adiw	r30, 0x02	; 2
    1d96:	4f c0       	rjmp	.+158    	; 0x1e36 <malloc+0x152>
    1d98:	ca 01       	movw	r24, r20
    1d9a:	86 1b       	sub	r24, r22
    1d9c:	97 0b       	sbc	r25, r23
    1d9e:	fd 01       	movw	r30, r26
    1da0:	e8 0f       	add	r30, r24
    1da2:	f9 1f       	adc	r31, r25
    1da4:	61 93       	st	Z+, r22
    1da6:	71 93       	st	Z+, r23
    1da8:	02 97       	sbiw	r24, 0x02	; 2
    1daa:	8d 93       	st	X+, r24
    1dac:	9c 93       	st	X, r25
    1dae:	43 c0       	rjmp	.+134    	; 0x1e36 <malloc+0x152>
    1db0:	fd 01       	movw	r30, r26
    1db2:	82 81       	ldd	r24, Z+2	; 0x02
    1db4:	93 81       	ldd	r25, Z+3	; 0x03
    1db6:	9c 01       	movw	r18, r24
    1db8:	d9 01       	movw	r26, r18
    1dba:	10 97       	sbiw	r26, 0x00	; 0
    1dbc:	a1 f6       	brne	.-88     	; 0x1d66 <malloc+0x82>
    1dbe:	80 91 5f 02 	lds	r24, 0x025F
    1dc2:	90 91 60 02 	lds	r25, 0x0260
    1dc6:	89 2b       	or	r24, r25
    1dc8:	41 f4       	brne	.+16     	; 0x1dda <malloc+0xf6>
    1dca:	80 91 02 01 	lds	r24, 0x0102
    1dce:	90 91 03 01 	lds	r25, 0x0103
    1dd2:	90 93 60 02 	sts	0x0260, r25
    1dd6:	80 93 5f 02 	sts	0x025F, r24
    1dda:	40 91 04 01 	lds	r20, 0x0104
    1dde:	50 91 05 01 	lds	r21, 0x0105
    1de2:	41 15       	cp	r20, r1
    1de4:	51 05       	cpc	r21, r1
    1de6:	41 f4       	brne	.+16     	; 0x1df8 <malloc+0x114>
    1de8:	4d b7       	in	r20, 0x3d	; 61
    1dea:	5e b7       	in	r21, 0x3e	; 62
    1dec:	80 91 00 01 	lds	r24, 0x0100
    1df0:	90 91 01 01 	lds	r25, 0x0101
    1df4:	48 1b       	sub	r20, r24
    1df6:	59 0b       	sbc	r21, r25
    1df8:	20 91 5f 02 	lds	r18, 0x025F
    1dfc:	30 91 60 02 	lds	r19, 0x0260
    1e00:	24 17       	cp	r18, r20
    1e02:	35 07       	cpc	r19, r21
    1e04:	b0 f4       	brcc	.+44     	; 0x1e32 <malloc+0x14e>
    1e06:	ca 01       	movw	r24, r20
    1e08:	82 1b       	sub	r24, r18
    1e0a:	93 0b       	sbc	r25, r19
    1e0c:	86 17       	cp	r24, r22
    1e0e:	97 07       	cpc	r25, r23
    1e10:	80 f0       	brcs	.+32     	; 0x1e32 <malloc+0x14e>
    1e12:	ab 01       	movw	r20, r22
    1e14:	4e 5f       	subi	r20, 0xFE	; 254
    1e16:	5f 4f       	sbci	r21, 0xFF	; 255
    1e18:	84 17       	cp	r24, r20
    1e1a:	95 07       	cpc	r25, r21
    1e1c:	50 f0       	brcs	.+20     	; 0x1e32 <malloc+0x14e>
    1e1e:	42 0f       	add	r20, r18
    1e20:	53 1f       	adc	r21, r19
    1e22:	50 93 60 02 	sts	0x0260, r21
    1e26:	40 93 5f 02 	sts	0x025F, r20
    1e2a:	f9 01       	movw	r30, r18
    1e2c:	61 93       	st	Z+, r22
    1e2e:	71 93       	st	Z+, r23
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <malloc+0x152>
    1e32:	e0 e0       	ldi	r30, 0x00	; 0
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	cf 01       	movw	r24, r30
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	08 95       	ret

00001e3e <free>:
    1e3e:	cf 93       	push	r28
    1e40:	df 93       	push	r29
    1e42:	00 97       	sbiw	r24, 0x00	; 0
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <free+0xa>
    1e46:	50 c0       	rjmp	.+160    	; 0x1ee8 <free+0xaa>
    1e48:	ec 01       	movw	r28, r24
    1e4a:	22 97       	sbiw	r28, 0x02	; 2
    1e4c:	1b 82       	std	Y+3, r1	; 0x03
    1e4e:	1a 82       	std	Y+2, r1	; 0x02
    1e50:	a0 91 61 02 	lds	r26, 0x0261
    1e54:	b0 91 62 02 	lds	r27, 0x0262
    1e58:	10 97       	sbiw	r26, 0x00	; 0
    1e5a:	09 f1       	breq	.+66     	; 0x1e9e <free+0x60>
    1e5c:	40 e0       	ldi	r20, 0x00	; 0
    1e5e:	50 e0       	ldi	r21, 0x00	; 0
    1e60:	ac 17       	cp	r26, r28
    1e62:	bd 07       	cpc	r27, r29
    1e64:	08 f1       	brcs	.+66     	; 0x1ea8 <free+0x6a>
    1e66:	bb 83       	std	Y+3, r27	; 0x03
    1e68:	aa 83       	std	Y+2, r26	; 0x02
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	21 91       	ld	r18, Z+
    1e6e:	31 91       	ld	r19, Z+
    1e70:	e2 0f       	add	r30, r18
    1e72:	f3 1f       	adc	r31, r19
    1e74:	ae 17       	cp	r26, r30
    1e76:	bf 07       	cpc	r27, r31
    1e78:	79 f4       	brne	.+30     	; 0x1e98 <free+0x5a>
    1e7a:	8d 91       	ld	r24, X+
    1e7c:	9c 91       	ld	r25, X
    1e7e:	11 97       	sbiw	r26, 0x01	; 1
    1e80:	28 0f       	add	r18, r24
    1e82:	39 1f       	adc	r19, r25
    1e84:	2e 5f       	subi	r18, 0xFE	; 254
    1e86:	3f 4f       	sbci	r19, 0xFF	; 255
    1e88:	39 83       	std	Y+1, r19	; 0x01
    1e8a:	28 83       	st	Y, r18
    1e8c:	12 96       	adiw	r26, 0x02	; 2
    1e8e:	8d 91       	ld	r24, X+
    1e90:	9c 91       	ld	r25, X
    1e92:	13 97       	sbiw	r26, 0x03	; 3
    1e94:	9b 83       	std	Y+3, r25	; 0x03
    1e96:	8a 83       	std	Y+2, r24	; 0x02
    1e98:	41 15       	cp	r20, r1
    1e9a:	51 05       	cpc	r21, r1
    1e9c:	71 f4       	brne	.+28     	; 0x1eba <free+0x7c>
    1e9e:	d0 93 62 02 	sts	0x0262, r29
    1ea2:	c0 93 61 02 	sts	0x0261, r28
    1ea6:	20 c0       	rjmp	.+64     	; 0x1ee8 <free+0xaa>
    1ea8:	12 96       	adiw	r26, 0x02	; 2
    1eaa:	8d 91       	ld	r24, X+
    1eac:	9c 91       	ld	r25, X
    1eae:	13 97       	sbiw	r26, 0x03	; 3
    1eb0:	ad 01       	movw	r20, r26
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	11 f0       	breq	.+4      	; 0x1eba <free+0x7c>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	d3 cf       	rjmp	.-90     	; 0x1e60 <free+0x22>
    1eba:	fa 01       	movw	r30, r20
    1ebc:	d3 83       	std	Z+3, r29	; 0x03
    1ebe:	c2 83       	std	Z+2, r28	; 0x02
    1ec0:	21 91       	ld	r18, Z+
    1ec2:	31 91       	ld	r19, Z+
    1ec4:	e2 0f       	add	r30, r18
    1ec6:	f3 1f       	adc	r31, r19
    1ec8:	ce 17       	cp	r28, r30
    1eca:	df 07       	cpc	r29, r31
    1ecc:	69 f4       	brne	.+26     	; 0x1ee8 <free+0xaa>
    1ece:	88 81       	ld	r24, Y
    1ed0:	99 81       	ldd	r25, Y+1	; 0x01
    1ed2:	28 0f       	add	r18, r24
    1ed4:	39 1f       	adc	r19, r25
    1ed6:	2e 5f       	subi	r18, 0xFE	; 254
    1ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eda:	fa 01       	movw	r30, r20
    1edc:	31 83       	std	Z+1, r19	; 0x01
    1ede:	20 83       	st	Z, r18
    1ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee4:	93 83       	std	Z+3, r25	; 0x03
    1ee6:	82 83       	std	Z+2, r24	; 0x02
    1ee8:	df 91       	pop	r29
    1eea:	cf 91       	pop	r28
    1eec:	08 95       	ret

00001eee <memset>:
    1eee:	dc 01       	movw	r26, r24
    1ef0:	01 c0       	rjmp	.+2      	; 0x1ef4 <memset+0x6>
    1ef2:	6d 93       	st	X+, r22
    1ef4:	41 50       	subi	r20, 0x01	; 1
    1ef6:	50 40       	sbci	r21, 0x00	; 0
    1ef8:	e0 f7       	brcc	.-8      	; 0x1ef2 <memset+0x4>
    1efa:	08 95       	ret

00001efc <_exit>:
    1efc:	f8 94       	cli

00001efe <__stop_program>:
    1efe:	ff cf       	rjmp	.-2      	; 0x1efe <__stop_program>
