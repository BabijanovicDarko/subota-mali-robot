
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00001084  00001118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001084  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013c  0080010a  0080010a  00001122  2**0
                  ALLOC
  3 .debug_aranges 00000220  00000000  00000000  00001122  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000404  00000000  00000000  00001342  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001445  00000000  00000000  00001746  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000670  00000000  00000000  00002b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000015e0  00000000  00000000  000031fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000360  00000000  00000000  000047dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000654  00000000  00000000  00004b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001e8  00000000  00000000  00005190  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	CANGIT = CANGIT; // zato sto tako treba.
}


static void CAN_InitModule(void)
{
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
        timer_callback();
	sys_time++;
}

uint32_t system_get_system_time(void)
{
       2:	00 00       	nop

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);

	UBRR0H = temp >> 8;
	UBRR0L = temp;
}
       4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
       6:	00 00       	nop
       8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
       a:	00 00       	nop
       c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
       e:	00 00       	nop
      10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
      12:	00 00       	nop
      14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
      16:	00 00       	nop
      18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
      1a:	00 00       	nop
      1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
      1e:	00 00       	nop
      20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
      22:	00 00       	nop
      24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
      26:	00 00       	nop
      28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
      2a:	00 00       	nop
      2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
      2e:	00 00       	nop
      30:	3d c4       	rjmp	.+2170   	; 0x8ac <__vector_12>
      32:	00 00       	nop
      34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
      36:	00 00       	nop
      38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
      3a:	00 00       	nop
      3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
      3e:	00 00       	nop
      40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
      42:	00 00       	nop
      44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
      46:	00 00       	nop
      48:	64 c0       	rjmp	.+200    	; 0x112 <__vector_18>
      4a:	00 00       	nop
      4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
      4e:	00 00       	nop
      50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c4       	rjmp	.+2416   	; 0x9c6 <__vector_21>
      56:	00 00       	nop
      58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
      5a:	00 00       	nop
      5c:	73 c4       	rjmp	.+2278   	; 0x944 <__vector_23>
      5e:	00 00       	nop
      60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
      62:	00 00       	nop
      64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
      66:	00 00       	nop
      68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
      6a:	00 00       	nop
      6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
      6e:	00 00       	nop
      70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
      72:	00 00       	nop
      74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
      76:	00 00       	nop
      78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
      7a:	00 00       	nop
      7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
      7e:	00 00       	nop
      80:	2b c5       	rjmp	.+2646   	; 0xad8 <__vector_32>
      82:	00 00       	nop
      84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
      86:	00 00       	nop
      88:	e6 c4       	rjmp	.+2508   	; 0xa56 <__vector_34>
      8a:	00 00       	nop
      8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
      8e:	00 00       	nop
      90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e4 e8       	ldi	r30, 0x84	; 132
      a8:	f0 e1       	ldi	r31, 0x10	; 16
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	aa 30       	cpi	r26, 0x0A	; 10
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	aa e0       	ldi	r26, 0x0A	; 10
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a6 34       	cpi	r26, 0x46	; 70
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	02 d0       	rcall	.+4      	; 0xd0 <main>
      cc:	d9 c7       	rjmp	.+4018   	; 0x1080 <_exit>

000000ce <__bad_interrupt>:
      ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <main>:
#include "system.h"
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
      d0:	df 93       	push	r29
      d2:	cf 93       	push	r28
      d4:	00 d0       	rcall	.+0      	; 0xd6 <main+0x6>
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
	timer_init(1000);
      da:	88 ee       	ldi	r24, 0xE8	; 232
      dc:	93 e0       	ldi	r25, 0x03	; 3
      de:	a0 d3       	rcall	.+1856   	; 0x820 <timer_init>
	timer_register_callback(gpio_debouncer);
      e0:	88 ea       	ldi	r24, 0xA8	; 168
      e2:	93 e0       	ldi	r25, 0x03	; 3
      e4:	8b d3       	rcall	.+1814   	; 0x7fc <timer_register_callback>
	/*gpio_register_pin(56, GPIO_DIRECTION_OUTPUT, false);
	gpio_register_pin(57, GPIO_DIRECTION_OUTPUT, false);
	gpio_register_pin(58, GPIO_DIRECTION_OUTPUT, false);*/
	gpio_register_pin(48, GPIO_DIRECTION_OUTPUT, false);
      e6:	80 e3       	ldi	r24, 0x30	; 48
      e8:	61 e0       	ldi	r22, 0x01	; 1
      ea:	40 e0       	ldi	r20, 0x00	; 0
      ec:	f2 d0       	rcall	.+484    	; 0x2d2 <gpio_register_pin>
	gpio_register_pin(19, GPIO_DIRECTION_INPUT, false);
      ee:	83 e1       	ldi	r24, 0x13	; 19
      f0:	60 e0       	ldi	r22, 0x00	; 0
      f2:	40 e0       	ldi	r20, 0x00	; 0
      f4:	ee d0       	rcall	.+476    	; 0x2d2 <gpio_register_pin>
	
	
	uint8_t val = 0;
      f6:	19 82       	std	Y+1, r1	; 0x01
    while (1) 
    {
		//PORTG = (gpio_read_pin(19) == 0) ? 0 : 0Xff;
			
		gpio_write_pin(48, gpio_read_pin(19));
      f8:	83 e1       	ldi	r24, 0x13	; 19
      fa:	aa d2       	rcall	.+1364   	; 0x650 <gpio_read_pin>
      fc:	8a 83       	std	Y+2, r24	; 0x02
      fe:	8a 81       	ldd	r24, Y+2	; 0x02
     100:	88 23       	and	r24, r24
     102:	11 f0       	breq	.+4      	; 0x108 <main+0x38>
     104:	81 e0       	ldi	r24, 0x01	; 1
     106:	8a 83       	std	Y+2, r24	; 0x02
     108:	9a 81       	ldd	r25, Y+2	; 0x02
     10a:	80 e3       	ldi	r24, 0x30	; 48
     10c:	69 2f       	mov	r22, r25
     10e:	fd d1       	rcall	.+1018   	; 0x50a <gpio_write_pin>
     110:	f3 cf       	rjmp	.-26     	; 0xf8 <main+0x28>

00000112 <__vector_18>:
static volatile unsigned char rxCounter[10];
volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     112:	1f 92       	push	r1
     114:	0f 92       	push	r0
     116:	0f b6       	in	r0, 0x3f	; 63
     118:	0f 92       	push	r0
     11a:	00 90 5b 00 	lds	r0, 0x005B
     11e:	0f 92       	push	r0
     120:	11 24       	eor	r1, r1
     122:	2f 93       	push	r18
     124:	3f 93       	push	r19
     126:	4f 93       	push	r20
     128:	5f 93       	push	r21
     12a:	8f 93       	push	r24
     12c:	9f 93       	push	r25
     12e:	af 93       	push	r26
     130:	bf 93       	push	r27
     132:	ef 93       	push	r30
     134:	ff 93       	push	r31
     136:	df 93       	push	r29
     138:	cf 93       	push	r28
     13a:	00 d0       	rcall	.+0      	; 0x13c <__vector_18+0x2a>
     13c:	00 d0       	rcall	.+0      	; 0x13e <__vector_18+0x2c>
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     142:	ed ee       	ldi	r30, 0xED	; 237
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	80 81       	ld	r24, Z
     148:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     14a:	1b 82       	std	Y+3, r1	; 0x03
     14c:	9c c0       	rjmp	.+312    	; 0x286 <__vector_18+0x174>
	{
		CANPAGE = ch << 4;
     14e:	ed ee       	ldi	r30, 0xED	; 237
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	8b 81       	ldd	r24, Y+3	; 0x03
     154:	82 95       	swap	r24
     156:	80 7f       	andi	r24, 0xF0	; 240
     158:	80 83       	st	Z, r24

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     15a:	ee ee       	ldi	r30, 0xEE	; 238
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	82 95       	swap	r24
     162:	86 95       	lsr	r24
     164:	87 70       	andi	r24, 0x07	; 7
     166:	88 2f       	mov	r24, r24
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	81 70       	andi	r24, 0x01	; 1
     16c:	90 70       	andi	r25, 0x00	; 0
     16e:	88 23       	and	r24, r24
     170:	09 f4       	brne	.+2      	; 0x174 <__vector_18+0x62>
     172:	6e c0       	rjmp	.+220    	; 0x250 <__vector_18+0x13e>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     174:	ef ee       	ldi	r30, 0xEF	; 239
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	80 e8       	ldi	r24, 0x80	; 128
     17a:	80 83       	st	Z, r24
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     17c:	ae ee       	ldi	r26, 0xEE	; 238
     17e:	b0 e0       	ldi	r27, 0x00	; 0
     180:	ee ee       	ldi	r30, 0xEE	; 238
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	80 81       	ld	r24, Z
     186:	8f 7d       	andi	r24, 0xDF	; 223
     188:	8c 93       	st	X, r24

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     18a:	e2 ef       	ldi	r30, 0xF2	; 242
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 81       	ld	r24, Z
     190:	82 95       	swap	r24
     192:	86 95       	lsr	r24
     194:	87 70       	andi	r24, 0x07	; 7
     196:	28 2f       	mov	r18, r24
     198:	e3 ef       	ldi	r30, 0xF3	; 243
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	80 81       	ld	r24, Z
     19e:	88 2f       	mov	r24, r24
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	88 0f       	add	r24, r24
     1a4:	99 1f       	adc	r25, r25
     1a6:	88 0f       	add	r24, r24
     1a8:	99 1f       	adc	r25, r25
     1aa:	88 0f       	add	r24, r24
     1ac:	99 1f       	adc	r25, r25
     1ae:	82 2b       	or	r24, r18
     1b0:	8a 83       	std	Y+2, r24	; 0x02

			for(i = 0; i < 8; ++i)
     1b2:	19 82       	std	Y+1, r1	; 0x01
     1b4:	2a c0       	rjmp	.+84     	; 0x20a <__vector_18+0xf8>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     1b6:	8a 81       	ldd	r24, Y+2	; 0x02
     1b8:	28 2f       	mov	r18, r24
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	82 1b       	sub	r24, r18
     1c2:	93 0b       	sbc	r25, r19
     1c4:	88 0f       	add	r24, r24
     1c6:	99 1f       	adc	r25, r25
     1c8:	90 95       	com	r25
     1ca:	81 95       	neg	r24
     1cc:	9f 4f       	sbci	r25, 0xFF	; 255
     1ce:	fc 01       	movw	r30, r24
     1d0:	e6 5f       	subi	r30, 0xF6	; 246
     1d2:	fe 4f       	sbci	r31, 0xFE	; 254
     1d4:	40 81       	ld	r20, Z
     1d6:	51 81       	ldd	r21, Z+1	; 0x01
     1d8:	8a 81       	ldd	r24, Y+2	; 0x02
     1da:	88 2f       	mov	r24, r24
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	01 97       	sbiw	r24, 0x01	; 1
     1e0:	fc 01       	movw	r30, r24
     1e2:	e2 5e       	subi	r30, 0xE2	; 226
     1e4:	fe 4f       	sbci	r31, 0xFE	; 254
     1e6:	80 81       	ld	r24, Z
     1e8:	28 2f       	mov	r18, r24
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	89 81       	ldd	r24, Y+1	; 0x01
     1ee:	88 2f       	mov	r24, r24
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	82 0f       	add	r24, r18
     1f4:	93 1f       	adc	r25, r19
     1f6:	da 01       	movw	r26, r20
     1f8:	a8 0f       	add	r26, r24
     1fa:	b9 1f       	adc	r27, r25
     1fc:	ea ef       	ldi	r30, 0xFA	; 250
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	8c 93       	st	X, r24
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     204:	89 81       	ldd	r24, Y+1	; 0x01
     206:	8f 5f       	subi	r24, 0xFF	; 255
     208:	89 83       	std	Y+1, r24	; 0x01
     20a:	89 81       	ldd	r24, Y+1	; 0x01
     20c:	88 30       	cpi	r24, 0x08	; 8
     20e:	98 f2       	brcs	.-90     	; 0x1b6 <__vector_18+0xa4>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     210:	8a 81       	ldd	r24, Y+2	; 0x02
     212:	88 2f       	mov	r24, r24
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	fc 01       	movw	r30, r24
     21a:	e2 5e       	subi	r30, 0xE2	; 226
     21c:	fe 4f       	sbci	r31, 0xFE	; 254
     21e:	80 81       	ld	r24, Z
     220:	8f 5f       	subi	r24, 0xFF	; 255
     222:	80 83       	st	Z, r24
     224:	80 81       	ld	r24, Z
     226:	85 30       	cpi	r24, 0x05	; 5
     228:	41 f4       	brne	.+16     	; 0x23a <__vector_18+0x128>
				*(rxWrIndex + ide - 1) = 0;
     22a:	8a 81       	ldd	r24, Y+2	; 0x02
     22c:	88 2f       	mov	r24, r24
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	01 97       	sbiw	r24, 0x01	; 1
     232:	fc 01       	movw	r30, r24
     234:	e2 5e       	subi	r30, 0xE2	; 226
     236:	fe 4f       	sbci	r31, 0xFE	; 254
     238:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     23a:	8a 81       	ldd	r24, Y+2	; 0x02
     23c:	88 2f       	mov	r24, r24
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	01 97       	sbiw	r24, 0x01	; 1
     242:	fc 01       	movw	r30, r24
     244:	e8 5d       	subi	r30, 0xD8	; 216
     246:	fe 4f       	sbci	r31, 0xFE	; 254
     248:	80 81       	ld	r24, Z
     24a:	8f 5f       	subi	r24, 0xFF	; 255
     24c:	80 83       	st	Z, r24
     24e:	1f c0       	rjmp	.+62     	; 0x28e <__vector_18+0x17c>

			break;
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     250:	ee ee       	ldi	r30, 0xEE	; 238
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	80 81       	ld	r24, Z
     256:	82 95       	swap	r24
     258:	86 95       	lsr	r24
     25a:	86 95       	lsr	r24
     25c:	83 70       	andi	r24, 0x03	; 3
     25e:	88 2f       	mov	r24, r24
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	81 70       	andi	r24, 0x01	; 1
     264:	90 70       	andi	r25, 0x00	; 0
     266:	88 23       	and	r24, r24
     268:	59 f0       	breq	.+22     	; 0x280 <__vector_18+0x16e>
		{
			CANCDMOB = 0; // disable mob
     26a:	ef ee       	ldi	r30, 0xEF	; 239
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     270:	ae ee       	ldi	r26, 0xEE	; 238
     272:	b0 e0       	ldi	r27, 0x00	; 0
     274:	ee ee       	ldi	r30, 0xEE	; 238
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	80 81       	ld	r24, Z
     27a:	8f 7b       	andi	r24, 0xBF	; 191
     27c:	8c 93       	st	X, r24
     27e:	07 c0       	rjmp	.+14     	; 0x28e <__vector_18+0x17c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     280:	8b 81       	ldd	r24, Y+3	; 0x03
     282:	8f 5f       	subi	r24, 0xFF	; 255
     284:	8b 83       	std	Y+3, r24	; 0x03
     286:	8b 81       	ldd	r24, Y+3	; 0x03
     288:	8f 30       	cpi	r24, 0x0F	; 15
     28a:	08 f4       	brcc	.+2      	; 0x28e <__vector_18+0x17c>
     28c:	60 cf       	rjmp	.-320    	; 0x14e <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     28e:	ed ee       	ldi	r30, 0xED	; 237
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	8c 81       	ldd	r24, Y+4	; 0x04
     294:	80 83       	st	Z, r24
	CANGIT = CANGIT; // zato sto tako treba.
     296:	aa ed       	ldi	r26, 0xDA	; 218
     298:	b0 e0       	ldi	r27, 0x00	; 0
     29a:	ea ed       	ldi	r30, 0xDA	; 218
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	80 81       	ld	r24, Z
     2a0:	8c 93       	st	X, r24
}
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	cf 91       	pop	r28
     2ac:	df 91       	pop	r29
     2ae:	ff 91       	pop	r31
     2b0:	ef 91       	pop	r30
     2b2:	bf 91       	pop	r27
     2b4:	af 91       	pop	r26
     2b6:	9f 91       	pop	r25
     2b8:	8f 91       	pop	r24
     2ba:	5f 91       	pop	r21
     2bc:	4f 91       	pop	r20
     2be:	3f 91       	pop	r19
     2c0:	2f 91       	pop	r18
     2c2:	0f 90       	pop	r0
     2c4:	00 92 5b 00 	sts	0x005B, r0
     2c8:	0f 90       	pop	r0
     2ca:	0f be       	out	0x3f, r0	; 63
     2cc:	0f 90       	pop	r0
     2ce:	1f 90       	pop	r1
     2d0:	18 95       	reti

000002d2 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
     2d2:	df 93       	push	r29
     2d4:	cf 93       	push	r28
     2d6:	cd b7       	in	r28, 0x3d	; 61
     2d8:	de b7       	in	r29, 0x3e	; 62
     2da:	2d 97       	sbiw	r28, 0x0d	; 13
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	f8 94       	cli
     2e0:	de bf       	out	0x3e, r29	; 62
     2e2:	0f be       	out	0x3f, r0	; 63
     2e4:	cd bf       	out	0x3d, r28	; 61
     2e6:	89 87       	std	Y+9, r24	; 0x09
     2e8:	6a 87       	std	Y+10, r22	; 0x0a
     2ea:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     2ec:	80 91 08 01 	lds	r24, 0x0108
     2f0:	90 91 09 01 	lds	r25, 0x0109
     2f4:	9c 83       	std	Y+4, r25	; 0x04
     2f6:	8b 83       	std	Y+3, r24	; 0x03
     2f8:	8b 81       	ldd	r24, Y+3	; 0x03
     2fa:	9c 81       	ldd	r25, Y+4	; 0x04
     2fc:	06 97       	sbiw	r24, 0x06	; 6
     2fe:	98 87       	std	Y+8, r25	; 0x08
     300:	8f 83       	std	Y+7, r24	; 0x07
     302:	14 c0       	rjmp	.+40     	; 0x32c <gpio_register_pin+0x5a>
    {
        if(input->pin == pin)
     304:	ef 81       	ldd	r30, Y+7	; 0x07
     306:	f8 85       	ldd	r31, Y+8	; 0x08
     308:	90 81       	ld	r25, Z
     30a:	89 85       	ldd	r24, Y+9	; 0x09
     30c:	98 17       	cp	r25, r24
     30e:	19 f4       	brne	.+6      	; 0x316 <gpio_register_pin+0x44>
            return 1;
     310:	21 e0       	ldi	r18, 0x01	; 1
     312:	2c 87       	std	Y+12, r18	; 0x0c
     314:	a5 c0       	rjmp	.+330    	; 0x460 <gpio_register_pin+0x18e>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     316:	ef 81       	ldd	r30, Y+7	; 0x07
     318:	f8 85       	ldd	r31, Y+8	; 0x08
     31a:	80 85       	ldd	r24, Z+8	; 0x08
     31c:	91 85       	ldd	r25, Z+9	; 0x09
     31e:	9a 83       	std	Y+2, r25	; 0x02
     320:	89 83       	std	Y+1, r24	; 0x01
     322:	89 81       	ldd	r24, Y+1	; 0x01
     324:	9a 81       	ldd	r25, Y+2	; 0x02
     326:	06 97       	sbiw	r24, 0x06	; 6
     328:	98 87       	std	Y+8, r25	; 0x08
     32a:	8f 83       	std	Y+7, r24	; 0x07
     32c:	8f 81       	ldd	r24, Y+7	; 0x07
     32e:	98 85       	ldd	r25, Y+8	; 0x08
     330:	06 96       	adiw	r24, 0x06	; 6
     332:	21 e0       	ldi	r18, 0x01	; 1
     334:	86 30       	cpi	r24, 0x06	; 6
     336:	92 07       	cpc	r25, r18
     338:	29 f7       	brne	.-54     	; 0x304 <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
     33a:	89 85       	ldd	r24, Y+9	; 0x09
     33c:	86 95       	lsr	r24
     33e:	86 95       	lsr	r24
     340:	86 95       	lsr	r24
     342:	8f 5f       	subi	r24, 0xFF	; 255
     344:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pin_reg = pin % 8;
     346:	89 85       	ldd	r24, Y+9	; 0x09
     348:	87 70       	andi	r24, 0x07	; 7
     34a:	8d 83       	std	Y+5, r24	; 0x05
	if(direction == GPIO_DIRECTION_OUTPUT)
     34c:	8a 85       	ldd	r24, Y+10	; 0x0a
     34e:	81 30       	cpi	r24, 0x01	; 1
     350:	09 f0       	breq	.+2      	; 0x354 <gpio_register_pin+0x82>
     352:	47 c0       	rjmp	.+142    	; 0x3e2 <gpio_register_pin+0x110>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
     354:	8e 81       	ldd	r24, Y+6	; 0x06
     356:	28 2f       	mov	r18, r24
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	c9 01       	movw	r24, r18
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	82 0f       	add	r24, r18
     362:	93 1f       	adc	r25, r19
     364:	4e 96       	adiw	r24, 0x1e	; 30
     366:	dc 01       	movw	r26, r24
     368:	8e 81       	ldd	r24, Y+6	; 0x06
     36a:	28 2f       	mov	r18, r24
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	c9 01       	movw	r24, r18
     370:	88 0f       	add	r24, r24
     372:	99 1f       	adc	r25, r25
     374:	82 0f       	add	r24, r18
     376:	93 1f       	adc	r25, r19
     378:	4e 96       	adiw	r24, 0x1e	; 30
     37a:	fc 01       	movw	r30, r24
     37c:	80 81       	ld	r24, Z
     37e:	48 2f       	mov	r20, r24
     380:	8d 81       	ldd	r24, Y+5	; 0x05
     382:	28 2f       	mov	r18, r24
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	02 c0       	rjmp	.+4      	; 0x390 <gpio_register_pin+0xbe>
     38c:	88 0f       	add	r24, r24
     38e:	99 1f       	adc	r25, r25
     390:	2a 95       	dec	r18
     392:	e2 f7       	brpl	.-8      	; 0x38c <gpio_register_pin+0xba>
     394:	84 2b       	or	r24, r20
     396:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     398:	8e 81       	ldd	r24, Y+6	; 0x06
     39a:	28 2f       	mov	r18, r24
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	c9 01       	movw	r24, r18
     3a0:	88 0f       	add	r24, r24
     3a2:	99 1f       	adc	r25, r25
     3a4:	82 0f       	add	r24, r18
     3a6:	93 1f       	adc	r25, r19
     3a8:	4f 96       	adiw	r24, 0x1f	; 31
     3aa:	dc 01       	movw	r26, r24
     3ac:	8e 81       	ldd	r24, Y+6	; 0x06
     3ae:	28 2f       	mov	r18, r24
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	c9 01       	movw	r24, r18
     3b4:	88 0f       	add	r24, r24
     3b6:	99 1f       	adc	r25, r25
     3b8:	82 0f       	add	r24, r18
     3ba:	93 1f       	adc	r25, r19
     3bc:	4f 96       	adiw	r24, 0x1f	; 31
     3be:	fc 01       	movw	r30, r24
     3c0:	80 81       	ld	r24, Z
     3c2:	48 2f       	mov	r20, r24
     3c4:	8d 81       	ldd	r24, Y+5	; 0x05
     3c6:	28 2f       	mov	r18, r24
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	02 2e       	mov	r0, r18
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <gpio_register_pin+0x104>
     3d2:	88 0f       	add	r24, r24
     3d4:	99 1f       	adc	r25, r25
     3d6:	0a 94       	dec	r0
     3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <gpio_register_pin+0x100>
     3da:	80 95       	com	r24
     3dc:	84 23       	and	r24, r20
     3de:	8c 93       	st	X, r24
     3e0:	41 c0       	rjmp	.+130    	; 0x464 <gpio_register_pin+0x192>
        return;
	}
	else
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     3e2:	8e 81       	ldd	r24, Y+6	; 0x06
     3e4:	28 2f       	mov	r18, r24
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	c9 01       	movw	r24, r18
     3ea:	88 0f       	add	r24, r24
     3ec:	99 1f       	adc	r25, r25
     3ee:	82 0f       	add	r24, r18
     3f0:	93 1f       	adc	r25, r19
     3f2:	4e 96       	adiw	r24, 0x1e	; 30
     3f4:	dc 01       	movw	r26, r24
     3f6:	8e 81       	ldd	r24, Y+6	; 0x06
     3f8:	28 2f       	mov	r18, r24
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	c9 01       	movw	r24, r18
     3fe:	88 0f       	add	r24, r24
     400:	99 1f       	adc	r25, r25
     402:	82 0f       	add	r24, r18
     404:	93 1f       	adc	r25, r19
     406:	4e 96       	adiw	r24, 0x1e	; 30
     408:	fc 01       	movw	r30, r24
     40a:	80 81       	ld	r24, Z
     40c:	48 2f       	mov	r20, r24
     40e:	8d 81       	ldd	r24, Y+5	; 0x05
     410:	28 2f       	mov	r18, r24
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	02 c0       	rjmp	.+4      	; 0x41e <gpio_register_pin+0x14c>
     41a:	88 0f       	add	r24, r24
     41c:	99 1f       	adc	r25, r25
     41e:	2a 95       	dec	r18
     420:	e2 f7       	brpl	.-8      	; 0x41a <gpio_register_pin+0x148>
     422:	80 95       	com	r24
     424:	84 23       	and	r24, r20
     426:	8c 93       	st	X, r24

    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
     428:	8a e0       	ldi	r24, 0x0A	; 10
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	24 d5       	rcall	.+2632   	; 0xe76 <malloc>
     42e:	98 87       	std	Y+8, r25	; 0x08
     430:	8f 83       	std	Y+7, r24	; 0x07
    if(input == NULL)
     432:	8f 81       	ldd	r24, Y+7	; 0x07
     434:	98 85       	ldd	r25, Y+8	; 0x08
     436:	00 97       	sbiw	r24, 0x00	; 0
     438:	19 f4       	brne	.+6      	; 0x440 <gpio_register_pin+0x16e>
        return 1;
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	8c 87       	std	Y+12, r24	; 0x0c
     43e:	10 c0       	rjmp	.+32     	; 0x460 <gpio_register_pin+0x18e>

    input->pin       = pin;
     440:	ef 81       	ldd	r30, Y+7	; 0x07
     442:	f8 85       	ldd	r31, Y+8	; 0x08
     444:	89 85       	ldd	r24, Y+9	; 0x09
     446:	80 83       	st	Z, r24
    input->pulled_up = pulled_up;
     448:	ef 81       	ldd	r30, Y+7	; 0x07
     44a:	f8 85       	ldd	r31, Y+8	; 0x08
     44c:	8b 85       	ldd	r24, Y+11	; 0x0b
     44e:	81 83       	std	Z+1, r24	; 0x01
    list_add(&input->list, &gpio_inputs);
     450:	8f 81       	ldd	r24, Y+7	; 0x07
     452:	98 85       	ldd	r25, Y+8	; 0x08
     454:	06 96       	adiw	r24, 0x06	; 6
     456:	26 e0       	ldi	r18, 0x06	; 6
     458:	31 e0       	ldi	r19, 0x01	; 1
     45a:	b9 01       	movw	r22, r18
     45c:	0d d0       	rcall	.+26     	; 0x478 <list_add>

    return 0;
     45e:	1c 86       	std	Y+12, r1	; 0x0c
     460:	2c 85       	ldd	r18, Y+12	; 0x0c
     462:	2d 87       	std	Y+13, r18	; 0x0d
}
     464:	8d 85       	ldd	r24, Y+13	; 0x0d
     466:	2d 96       	adiw	r28, 0x0d	; 13
     468:	0f b6       	in	r0, 0x3f	; 63
     46a:	f8 94       	cli
     46c:	de bf       	out	0x3e, r29	; 62
     46e:	0f be       	out	0x3f, r0	; 63
     470:	cd bf       	out	0x3d, r28	; 61
     472:	cf 91       	pop	r28
     474:	df 91       	pop	r29
     476:	08 95       	ret

00000478 <list_add>:
    new->prev = prev;
    prev->next = new;
}

static inline void list_add(struct list_head* new, struct list_head* head)
{
     478:	df 93       	push	r29
     47a:	cf 93       	push	r28
     47c:	00 d0       	rcall	.+0      	; 0x47e <list_add+0x6>
     47e:	00 d0       	rcall	.+0      	; 0x480 <list_add+0x8>
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
     484:	9a 83       	std	Y+2, r25	; 0x02
     486:	89 83       	std	Y+1, r24	; 0x01
     488:	7c 83       	std	Y+4, r23	; 0x04
     48a:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
     48c:	eb 81       	ldd	r30, Y+3	; 0x03
     48e:	fc 81       	ldd	r31, Y+4	; 0x04
     490:	42 81       	ldd	r20, Z+2	; 0x02
     492:	53 81       	ldd	r21, Z+3	; 0x03
     494:	89 81       	ldd	r24, Y+1	; 0x01
     496:	9a 81       	ldd	r25, Y+2	; 0x02
     498:	2b 81       	ldd	r18, Y+3	; 0x03
     49a:	3c 81       	ldd	r19, Y+4	; 0x04
     49c:	b9 01       	movw	r22, r18
     49e:	07 d0       	rcall	.+14     	; 0x4ae <__list_add>
}
     4a0:	0f 90       	pop	r0
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	cf 91       	pop	r28
     4aa:	df 91       	pop	r29
     4ac:	08 95       	ret

000004ae <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
     4ae:	df 93       	push	r29
     4b0:	cf 93       	push	r28
     4b2:	00 d0       	rcall	.+0      	; 0x4b4 <__list_add+0x6>
     4b4:	00 d0       	rcall	.+0      	; 0x4b6 <__list_add+0x8>
     4b6:	00 d0       	rcall	.+0      	; 0x4b8 <__list_add+0xa>
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
     4bc:	9a 83       	std	Y+2, r25	; 0x02
     4be:	89 83       	std	Y+1, r24	; 0x01
     4c0:	7c 83       	std	Y+4, r23	; 0x04
     4c2:	6b 83       	std	Y+3, r22	; 0x03
     4c4:	5e 83       	std	Y+6, r21	; 0x06
     4c6:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
     4c8:	ed 81       	ldd	r30, Y+5	; 0x05
     4ca:	fe 81       	ldd	r31, Y+6	; 0x06
     4cc:	89 81       	ldd	r24, Y+1	; 0x01
     4ce:	9a 81       	ldd	r25, Y+2	; 0x02
     4d0:	91 83       	std	Z+1, r25	; 0x01
     4d2:	80 83       	st	Z, r24
    new->next = next;
     4d4:	e9 81       	ldd	r30, Y+1	; 0x01
     4d6:	fa 81       	ldd	r31, Y+2	; 0x02
     4d8:	8d 81       	ldd	r24, Y+5	; 0x05
     4da:	9e 81       	ldd	r25, Y+6	; 0x06
     4dc:	93 83       	std	Z+3, r25	; 0x03
     4de:	82 83       	std	Z+2, r24	; 0x02
    new->prev = prev;
     4e0:	e9 81       	ldd	r30, Y+1	; 0x01
     4e2:	fa 81       	ldd	r31, Y+2	; 0x02
     4e4:	8b 81       	ldd	r24, Y+3	; 0x03
     4e6:	9c 81       	ldd	r25, Y+4	; 0x04
     4e8:	91 83       	std	Z+1, r25	; 0x01
     4ea:	80 83       	st	Z, r24
    prev->next = new;
     4ec:	eb 81       	ldd	r30, Y+3	; 0x03
     4ee:	fc 81       	ldd	r31, Y+4	; 0x04
     4f0:	89 81       	ldd	r24, Y+1	; 0x01
     4f2:	9a 81       	ldd	r25, Y+2	; 0x02
     4f4:	93 83       	std	Z+3, r25	; 0x03
     4f6:	82 83       	std	Z+2, r24	; 0x02
}
     4f8:	26 96       	adiw	r28, 0x06	; 6
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	f8 94       	cli
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	0f be       	out	0x3f, r0	; 63
     502:	cd bf       	out	0x3d, r28	; 61
     504:	cf 91       	pop	r28
     506:	df 91       	pop	r29
     508:	08 95       	ret

0000050a <gpio_write_pin>:

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
     50a:	df 93       	push	r29
     50c:	cf 93       	push	r28
     50e:	00 d0       	rcall	.+0      	; 0x510 <gpio_write_pin+0x6>
     510:	00 d0       	rcall	.+0      	; 0x512 <gpio_write_pin+0x8>
     512:	0f 92       	push	r0
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62
     518:	8b 83       	std	Y+3, r24	; 0x03
     51a:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t port = 1 + pin / 8;
     51c:	8b 81       	ldd	r24, Y+3	; 0x03
     51e:	86 95       	lsr	r24
     520:	86 95       	lsr	r24
     522:	86 95       	lsr	r24
     524:	8f 5f       	subi	r24, 0xFF	; 255
     526:	8a 83       	std	Y+2, r24	; 0x02
	pin = pin % 8;
     528:	8b 81       	ldd	r24, Y+3	; 0x03
     52a:	87 70       	andi	r24, 0x07	; 7
     52c:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = *(volatile uint32_t*)(0x22 + 3 * (port - 1));
     52e:	8a 81       	ldd	r24, Y+2	; 0x02
     530:	28 2f       	mov	r18, r24
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	c9 01       	movw	r24, r18
     536:	88 0f       	add	r24, r24
     538:	99 1f       	adc	r25, r25
     53a:	82 0f       	add	r24, r18
     53c:	93 1f       	adc	r25, r19
     53e:	4f 96       	adiw	r24, 0x1f	; 31
     540:	fc 01       	movw	r30, r24
     542:	80 81       	ld	r24, Z
     544:	91 81       	ldd	r25, Z+1	; 0x01
     546:	a2 81       	ldd	r26, Z+2	; 0x02
     548:	b3 81       	ldd	r27, Z+3	; 0x03
     54a:	89 83       	std	Y+1, r24	; 0x01
	if(value != 0)
     54c:	8c 81       	ldd	r24, Y+4	; 0x04
     54e:	88 23       	and	r24, r24
     550:	19 f1       	breq	.+70     	; 0x598 <gpio_write_pin+0x8e>
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp | (1 << pin);
     552:	8a 81       	ldd	r24, Y+2	; 0x02
     554:	28 2f       	mov	r18, r24
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	c9 01       	movw	r24, r18
     55a:	88 0f       	add	r24, r24
     55c:	99 1f       	adc	r25, r25
     55e:	82 0f       	add	r24, r18
     560:	93 1f       	adc	r25, r19
     562:	4f 96       	adiw	r24, 0x1f	; 31
     564:	fc 01       	movw	r30, r24
     566:	89 81       	ldd	r24, Y+1	; 0x01
     568:	48 2f       	mov	r20, r24
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	8b 81       	ldd	r24, Y+3	; 0x03
     56e:	28 2f       	mov	r18, r24
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	02 2e       	mov	r0, r18
     578:	02 c0       	rjmp	.+4      	; 0x57e <gpio_write_pin+0x74>
     57a:	88 0f       	add	r24, r24
     57c:	99 1f       	adc	r25, r25
     57e:	0a 94       	dec	r0
     580:	e2 f7       	brpl	.-8      	; 0x57a <gpio_write_pin+0x70>
     582:	84 2b       	or	r24, r20
     584:	95 2b       	or	r25, r21
     586:	aa 27       	eor	r26, r26
     588:	97 fd       	sbrc	r25, 7
     58a:	a0 95       	com	r26
     58c:	ba 2f       	mov	r27, r26
     58e:	80 83       	st	Z, r24
     590:	91 83       	std	Z+1, r25	; 0x01
     592:	a2 83       	std	Z+2, r26	; 0x02
     594:	b3 83       	std	Z+3, r27	; 0x03
     596:	24 c0       	rjmp	.+72     	; 0x5e0 <gpio_write_pin+0xd6>
	else
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
     598:	8a 81       	ldd	r24, Y+2	; 0x02
     59a:	28 2f       	mov	r18, r24
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	c9 01       	movw	r24, r18
     5a0:	88 0f       	add	r24, r24
     5a2:	99 1f       	adc	r25, r25
     5a4:	82 0f       	add	r24, r18
     5a6:	93 1f       	adc	r25, r19
     5a8:	4f 96       	adiw	r24, 0x1f	; 31
     5aa:	fc 01       	movw	r30, r24
     5ac:	89 81       	ldd	r24, Y+1	; 0x01
     5ae:	48 2f       	mov	r20, r24
     5b0:	50 e0       	ldi	r21, 0x00	; 0
     5b2:	8b 81       	ldd	r24, Y+3	; 0x03
     5b4:	28 2f       	mov	r18, r24
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	02 2e       	mov	r0, r18
     5be:	02 c0       	rjmp	.+4      	; 0x5c4 <gpio_write_pin+0xba>
     5c0:	88 0f       	add	r24, r24
     5c2:	99 1f       	adc	r25, r25
     5c4:	0a 94       	dec	r0
     5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <gpio_write_pin+0xb6>
     5c8:	80 95       	com	r24
     5ca:	90 95       	com	r25
     5cc:	84 23       	and	r24, r20
     5ce:	95 23       	and	r25, r21
     5d0:	aa 27       	eor	r26, r26
     5d2:	97 fd       	sbrc	r25, 7
     5d4:	a0 95       	com	r26
     5d6:	ba 2f       	mov	r27, r26
     5d8:	80 83       	st	Z, r24
     5da:	91 83       	std	Z+1, r25	; 0x01
     5dc:	a2 83       	std	Z+2, r26	; 0x02
     5de:	b3 83       	std	Z+3, r27	; 0x03
}
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	cf 91       	pop	r28
     5ec:	df 91       	pop	r29
     5ee:	08 95       	ret

000005f0 <__gpio_read_pin>:

static uint8_t __gpio_read_pin(uint8_t pin)
{
     5f0:	df 93       	push	r29
     5f2:	cf 93       	push	r28
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <__gpio_read_pin+0x6>
     5f6:	0f 92       	push	r0
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
     5fc:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
     5fe:	8b 81       	ldd	r24, Y+3	; 0x03
     600:	86 95       	lsr	r24
     602:	86 95       	lsr	r24
     604:	86 95       	lsr	r24
     606:	8f 5f       	subi	r24, 0xFF	; 255
     608:	8a 83       	std	Y+2, r24	; 0x02
    pin = pin % 8;
     60a:	8b 81       	ldd	r24, Y+3	; 0x03
     60c:	87 70       	andi	r24, 0x07	; 7
     60e:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
     610:	8a 81       	ldd	r24, Y+2	; 0x02
     612:	28 2f       	mov	r18, r24
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	c9 01       	movw	r24, r18
     618:	88 0f       	add	r24, r24
     61a:	99 1f       	adc	r25, r25
     61c:	82 0f       	add	r24, r18
     61e:	93 1f       	adc	r25, r19
     620:	4d 96       	adiw	r24, 0x1d	; 29
     622:	fc 01       	movw	r30, r24
     624:	80 81       	ld	r24, Z
     626:	89 83       	std	Y+1, r24	; 0x01

    return ((temp >> pin) & 0x01);
     628:	89 81       	ldd	r24, Y+1	; 0x01
     62a:	28 2f       	mov	r18, r24
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	8b 81       	ldd	r24, Y+3	; 0x03
     630:	88 2f       	mov	r24, r24
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	a9 01       	movw	r20, r18
     636:	02 c0       	rjmp	.+4      	; 0x63c <__gpio_read_pin+0x4c>
     638:	55 95       	asr	r21
     63a:	47 95       	ror	r20
     63c:	8a 95       	dec	r24
     63e:	e2 f7       	brpl	.-8      	; 0x638 <__gpio_read_pin+0x48>
     640:	ca 01       	movw	r24, r20
     642:	81 70       	andi	r24, 0x01	; 1
}
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	cf 91       	pop	r28
     64c:	df 91       	pop	r29
     64e:	08 95       	ret

00000650 <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
     650:	df 93       	push	r29
     652:	cf 93       	push	r28
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	2b 97       	sbiw	r28, 0x0b	; 11
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	de bf       	out	0x3e, r29	; 62
     660:	0f be       	out	0x3f, r0	; 63
     662:	cd bf       	out	0x3d, r28	; 61
     664:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     666:	80 91 08 01 	lds	r24, 0x0108
     66a:	90 91 09 01 	lds	r25, 0x0109
     66e:	9e 83       	std	Y+6, r25	; 0x06
     670:	8d 83       	std	Y+5, r24	; 0x05
     672:	8d 81       	ldd	r24, Y+5	; 0x05
     674:	9e 81       	ldd	r25, Y+6	; 0x06
     676:	06 97       	sbiw	r24, 0x06	; 6
     678:	98 87       	std	Y+8, r25	; 0x08
     67a:	8f 83       	std	Y+7, r24	; 0x07
     67c:	55 c0       	rjmp	.+170    	; 0x728 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
     67e:	ef 81       	ldd	r30, Y+7	; 0x07
     680:	f8 85       	ldd	r31, Y+8	; 0x08
     682:	90 81       	ld	r25, Z
     684:	89 85       	ldd	r24, Y+9	; 0x09
     686:	98 17       	cp	r25, r24
     688:	09 f0       	breq	.+2      	; 0x68c <gpio_read_pin+0x3c>
     68a:	43 c0       	rjmp	.+134    	; 0x712 <gpio_read_pin+0xc2>
        {
            uint8_t i = 0;
     68c:	1c 82       	std	Y+4, r1	; 0x04
     68e:	21 c0       	rjmp	.+66     	; 0x6d2 <gpio_read_pin+0x82>
            while(i < GPIO_DEBOUNCE_COUNT - 1)
            {
                if(input->values[i] != input->values[i + 1])
     690:	8c 81       	ldd	r24, Y+4	; 0x04
     692:	28 2f       	mov	r18, r24
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	8f 81       	ldd	r24, Y+7	; 0x07
     698:	98 85       	ldd	r25, Y+8	; 0x08
     69a:	82 0f       	add	r24, r18
     69c:	93 1f       	adc	r25, r19
     69e:	fc 01       	movw	r30, r24
     6a0:	32 96       	adiw	r30, 0x02	; 2
     6a2:	40 81       	ld	r20, Z
     6a4:	8c 81       	ldd	r24, Y+4	; 0x04
     6a6:	88 2f       	mov	r24, r24
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	9c 01       	movw	r18, r24
     6ac:	2f 5f       	subi	r18, 0xFF	; 255
     6ae:	3f 4f       	sbci	r19, 0xFF	; 255
     6b0:	8f 81       	ldd	r24, Y+7	; 0x07
     6b2:	98 85       	ldd	r25, Y+8	; 0x08
     6b4:	82 0f       	add	r24, r18
     6b6:	93 1f       	adc	r25, r19
     6b8:	fc 01       	movw	r30, r24
     6ba:	32 96       	adiw	r30, 0x02	; 2
     6bc:	80 81       	ld	r24, Z
     6be:	48 17       	cp	r20, r24
     6c0:	29 f0       	breq	.+10     	; 0x6cc <gpio_read_pin+0x7c>
                    return input->previous_state;
     6c2:	ef 81       	ldd	r30, Y+7	; 0x07
     6c4:	f8 85       	ldd	r31, Y+8	; 0x08
     6c6:	25 81       	ldd	r18, Z+5	; 0x05
     6c8:	2b 87       	std	Y+11, r18	; 0x0b
     6ca:	38 c0       	rjmp	.+112    	; 0x73c <gpio_read_pin+0xec>
                i++;
     6cc:	8c 81       	ldd	r24, Y+4	; 0x04
     6ce:	8f 5f       	subi	r24, 0xFF	; 255
     6d0:	8c 83       	std	Y+4, r24	; 0x04
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
     6d2:	8c 81       	ldd	r24, Y+4	; 0x04
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	e0 f2       	brcs	.-72     	; 0x690 <gpio_read_pin+0x40>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
     6d8:	ef 81       	ldd	r30, Y+7	; 0x07
     6da:	f8 85       	ldd	r31, Y+8	; 0x08
     6dc:	91 81       	ldd	r25, Z+1	; 0x01
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	89 27       	eor	r24, r25
     6e2:	88 23       	and	r24, r24
     6e4:	29 f0       	breq	.+10     	; 0x6f0 <gpio_read_pin+0xa0>
     6e6:	ef 81       	ldd	r30, Y+7	; 0x07
     6e8:	f8 85       	ldd	r31, Y+8	; 0x08
     6ea:	82 81       	ldd	r24, Z+2	; 0x02
     6ec:	8a 87       	std	Y+10, r24	; 0x0a
     6ee:	08 c0       	rjmp	.+16     	; 0x700 <gpio_read_pin+0xb0>
     6f0:	ef 81       	ldd	r30, Y+7	; 0x07
     6f2:	f8 85       	ldd	r31, Y+8	; 0x08
     6f4:	82 81       	ldd	r24, Z+2	; 0x02
     6f6:	1a 86       	std	Y+10, r1	; 0x0a
     6f8:	88 23       	and	r24, r24
     6fa:	11 f4       	brne	.+4      	; 0x700 <gpio_read_pin+0xb0>
     6fc:	21 e0       	ldi	r18, 0x01	; 1
     6fe:	2a 87       	std	Y+10, r18	; 0x0a
     700:	8a 85       	ldd	r24, Y+10	; 0x0a
     702:	8b 83       	std	Y+3, r24	; 0x03
            input->previous_state = state;
     704:	ef 81       	ldd	r30, Y+7	; 0x07
     706:	f8 85       	ldd	r31, Y+8	; 0x08
     708:	8b 81       	ldd	r24, Y+3	; 0x03
     70a:	85 83       	std	Z+5, r24	; 0x05

            return state;
     70c:	2b 81       	ldd	r18, Y+3	; 0x03
     70e:	2b 87       	std	Y+11, r18	; 0x0b
     710:	15 c0       	rjmp	.+42     	; 0x73c <gpio_read_pin+0xec>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     712:	ef 81       	ldd	r30, Y+7	; 0x07
     714:	f8 85       	ldd	r31, Y+8	; 0x08
     716:	80 85       	ldd	r24, Z+8	; 0x08
     718:	91 85       	ldd	r25, Z+9	; 0x09
     71a:	9a 83       	std	Y+2, r25	; 0x02
     71c:	89 83       	std	Y+1, r24	; 0x01
     71e:	89 81       	ldd	r24, Y+1	; 0x01
     720:	9a 81       	ldd	r25, Y+2	; 0x02
     722:	06 97       	sbiw	r24, 0x06	; 6
     724:	98 87       	std	Y+8, r25	; 0x08
     726:	8f 83       	std	Y+7, r24	; 0x07
     728:	8f 81       	ldd	r24, Y+7	; 0x07
     72a:	98 85       	ldd	r25, Y+8	; 0x08
     72c:	06 96       	adiw	r24, 0x06	; 6
     72e:	21 e0       	ldi	r18, 0x01	; 1
     730:	86 30       	cpi	r24, 0x06	; 6
     732:	92 07       	cpc	r25, r18
     734:	09 f0       	breq	.+2      	; 0x738 <gpio_read_pin+0xe8>
     736:	a3 cf       	rjmp	.-186    	; 0x67e <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 0xFF;
     738:	8f ef       	ldi	r24, 0xFF	; 255
     73a:	8b 87       	std	Y+11, r24	; 0x0b
     73c:	8b 85       	ldd	r24, Y+11	; 0x0b
}
     73e:	2b 96       	adiw	r28, 0x0b	; 11
     740:	0f b6       	in	r0, 0x3f	; 63
     742:	f8 94       	cli
     744:	de bf       	out	0x3e, r29	; 62
     746:	0f be       	out	0x3f, r0	; 63
     748:	cd bf       	out	0x3d, r28	; 61
     74a:	cf 91       	pop	r28
     74c:	df 91       	pop	r29
     74e:	08 95       	ret

00000750 <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	df 93       	push	r29
     756:	cf 93       	push	r28
     758:	00 d0       	rcall	.+0      	; 0x75a <gpio_debouncer+0xa>
     75a:	00 d0       	rcall	.+0      	; 0x75c <gpio_debouncer+0xc>
     75c:	00 d0       	rcall	.+0      	; 0x75e <gpio_debouncer+0xe>
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     762:	80 91 08 01 	lds	r24, 0x0108
     766:	90 91 09 01 	lds	r25, 0x0109
     76a:	9c 83       	std	Y+4, r25	; 0x04
     76c:	8b 83       	std	Y+3, r24	; 0x03
     76e:	8b 81       	ldd	r24, Y+3	; 0x03
     770:	9c 81       	ldd	r25, Y+4	; 0x04
     772:	06 97       	sbiw	r24, 0x06	; 6
     774:	9e 83       	std	Y+6, r25	; 0x06
     776:	8d 83       	std	Y+5, r24	; 0x05
     778:	1b c0       	rjmp	.+54     	; 0x7b0 <gpio_debouncer+0x60>
    {
        input->values[count] = __gpio_read_pin(input->pin);
     77a:	00 91 32 01 	lds	r16, 0x0132
     77e:	10 91 33 01 	lds	r17, 0x0133
     782:	ed 81       	ldd	r30, Y+5	; 0x05
     784:	fe 81       	ldd	r31, Y+6	; 0x06
     786:	80 81       	ld	r24, Z
     788:	33 df       	rcall	.-410    	; 0x5f0 <__gpio_read_pin>
     78a:	28 2f       	mov	r18, r24
     78c:	8d 81       	ldd	r24, Y+5	; 0x05
     78e:	9e 81       	ldd	r25, Y+6	; 0x06
     790:	80 0f       	add	r24, r16
     792:	91 1f       	adc	r25, r17
     794:	fc 01       	movw	r30, r24
     796:	32 96       	adiw	r30, 0x02	; 2
     798:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     79a:	ed 81       	ldd	r30, Y+5	; 0x05
     79c:	fe 81       	ldd	r31, Y+6	; 0x06
     79e:	80 85       	ldd	r24, Z+8	; 0x08
     7a0:	91 85       	ldd	r25, Z+9	; 0x09
     7a2:	9a 83       	std	Y+2, r25	; 0x02
     7a4:	89 83       	std	Y+1, r24	; 0x01
     7a6:	89 81       	ldd	r24, Y+1	; 0x01
     7a8:	9a 81       	ldd	r25, Y+2	; 0x02
     7aa:	06 97       	sbiw	r24, 0x06	; 6
     7ac:	9e 83       	std	Y+6, r25	; 0x06
     7ae:	8d 83       	std	Y+5, r24	; 0x05
     7b0:	8d 81       	ldd	r24, Y+5	; 0x05
     7b2:	9e 81       	ldd	r25, Y+6	; 0x06
     7b4:	06 96       	adiw	r24, 0x06	; 6
     7b6:	21 e0       	ldi	r18, 0x01	; 1
     7b8:	86 30       	cpi	r24, 0x06	; 6
     7ba:	92 07       	cpc	r25, r18
     7bc:	f1 f6       	brne	.-68     	; 0x77a <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
     7be:	80 91 32 01 	lds	r24, 0x0132
     7c2:	90 91 33 01 	lds	r25, 0x0133
     7c6:	01 96       	adiw	r24, 0x01	; 1
     7c8:	90 93 33 01 	sts	0x0133, r25
     7cc:	80 93 32 01 	sts	0x0132, r24
     7d0:	80 91 32 01 	lds	r24, 0x0132
     7d4:	90 91 33 01 	lds	r25, 0x0133
     7d8:	83 30       	cpi	r24, 0x03	; 3
     7da:	91 05       	cpc	r25, r1
     7dc:	21 f4       	brne	.+8      	; 0x7e6 <gpio_debouncer+0x96>
        count = 0;
     7de:	10 92 33 01 	sts	0x0133, r1
     7e2:	10 92 32 01 	sts	0x0132, r1
	
}
     7e6:	26 96       	adiw	r28, 0x06	; 6
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	f8 94       	cli
     7ec:	de bf       	out	0x3e, r29	; 62
     7ee:	0f be       	out	0x3f, r0	; 63
     7f0:	cd bf       	out	0x3d, r28	; 61
     7f2:	cf 91       	pop	r28
     7f4:	df 91       	pop	r29
     7f6:	1f 91       	pop	r17
     7f8:	0f 91       	pop	r16
     7fa:	08 95       	ret

000007fc <timer_register_callback>:
static void (*timer_callback)(void) = NULL;

unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
     7fc:	df 93       	push	r29
     7fe:	cf 93       	push	r28
     800:	00 d0       	rcall	.+0      	; 0x802 <timer_register_callback+0x6>
     802:	cd b7       	in	r28, 0x3d	; 61
     804:	de b7       	in	r29, 0x3e	; 62
     806:	9a 83       	std	Y+2, r25	; 0x02
     808:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	9a 81       	ldd	r25, Y+2	; 0x02
     80e:	90 93 35 01 	sts	0x0135, r25
     812:	80 93 34 01 	sts	0x0134, r24
}
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	cf 91       	pop	r28
     81c:	df 91       	pop	r29
     81e:	08 95       	ret

00000820 <timer_init>:


void timer_init(unsigned int freq)
{
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	df 93       	push	r29
     826:	cf 93       	push	r28
     828:	00 d0       	rcall	.+0      	; 0x82a <timer_init+0xa>
     82a:	cd b7       	in	r28, 0x3d	; 61
     82c:	de b7       	in	r29, 0x3e	; 62
     82e:	9a 83       	std	Y+2, r25	; 0x02
     830:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
     832:	e0 e8       	ldi	r30, 0x80	; 128
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
     838:	e1 e8       	ldi	r30, 0x81	; 129
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	89 e0       	ldi	r24, 0x09	; 9
     83e:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
     840:	08 e8       	ldi	r16, 0x88	; 136
     842:	10 e0       	ldi	r17, 0x00	; 0
     844:	89 81       	ldd	r24, Y+1	; 0x01
     846:	9a 81       	ldd	r25, Y+2	; 0x02
     848:	cc 01       	movw	r24, r24
     84a:	a0 e0       	ldi	r26, 0x00	; 0
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	bc 01       	movw	r22, r24
     850:	cd 01       	movw	r24, r26
     852:	83 d2       	rcall	.+1286   	; 0xd5a <__floatunsisf>
     854:	9b 01       	movw	r18, r22
     856:	ac 01       	movw	r20, r24
     858:	60 e8       	ldi	r22, 0x80	; 128
     85a:	76 e9       	ldi	r23, 0x96	; 150
     85c:	88 e1       	ldi	r24, 0x18	; 24
     85e:	9b e4       	ldi	r25, 0x4B	; 75
     860:	e8 d1       	rcall	.+976    	; 0xc32 <__divsf3>
     862:	dc 01       	movw	r26, r24
     864:	cb 01       	movw	r24, r22
     866:	bc 01       	movw	r22, r24
     868:	cd 01       	movw	r24, r26
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	5f e3       	ldi	r21, 0x3F	; 63
     872:	7b d1       	rcall	.+758    	; 0xb6a <__addsf3>
     874:	dc 01       	movw	r26, r24
     876:	cb 01       	movw	r24, r22
     878:	bc 01       	movw	r22, r24
     87a:	cd 01       	movw	r24, r26
     87c:	42 d2       	rcall	.+1156   	; 0xd02 <__fixunssfsi>
     87e:	dc 01       	movw	r26, r24
     880:	cb 01       	movw	r24, r22
     882:	f8 01       	movw	r30, r16
     884:	91 83       	std	Z+1, r25	; 0x01
     886:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
     888:	ef e6       	ldi	r30, 0x6F	; 111
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	82 e0       	ldi	r24, 0x02	; 2
     88e:	80 83       	st	Z, r24

	SREG |= 0x80;
     890:	af e5       	ldi	r26, 0x5F	; 95
     892:	b0 e0       	ldi	r27, 0x00	; 0
     894:	ef e5       	ldi	r30, 0x5F	; 95
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	80 81       	ld	r24, Z
     89a:	80 68       	ori	r24, 0x80	; 128
     89c:	8c 93       	st	X, r24
}
     89e:	0f 90       	pop	r0
     8a0:	0f 90       	pop	r0
     8a2:	cf 91       	pop	r28
     8a4:	df 91       	pop	r29
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	08 95       	ret

000008ac <__vector_12>:


ISR(TIMER1_COMPA_vect)
{
     8ac:	1f 92       	push	r1
     8ae:	0f 92       	push	r0
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	0f 92       	push	r0
     8b4:	00 90 5b 00 	lds	r0, 0x005B
     8b8:	0f 92       	push	r0
     8ba:	11 24       	eor	r1, r1
     8bc:	2f 93       	push	r18
     8be:	3f 93       	push	r19
     8c0:	4f 93       	push	r20
     8c2:	5f 93       	push	r21
     8c4:	6f 93       	push	r22
     8c6:	7f 93       	push	r23
     8c8:	8f 93       	push	r24
     8ca:	9f 93       	push	r25
     8cc:	af 93       	push	r26
     8ce:	bf 93       	push	r27
     8d0:	ef 93       	push	r30
     8d2:	ff 93       	push	r31
     8d4:	df 93       	push	r29
     8d6:	cf 93       	push	r28
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
     8dc:	80 91 34 01 	lds	r24, 0x0134
     8e0:	90 91 35 01 	lds	r25, 0x0135
     8e4:	00 97       	sbiw	r24, 0x00	; 0
     8e6:	29 f0       	breq	.+10     	; 0x8f2 <__vector_12+0x46>
        timer_callback();
     8e8:	e0 91 34 01 	lds	r30, 0x0134
     8ec:	f0 91 35 01 	lds	r31, 0x0135
     8f0:	09 95       	icall
	sys_time++;
     8f2:	80 91 36 01 	lds	r24, 0x0136
     8f6:	90 91 37 01 	lds	r25, 0x0137
     8fa:	a0 91 38 01 	lds	r26, 0x0138
     8fe:	b0 91 39 01 	lds	r27, 0x0139
     902:	01 96       	adiw	r24, 0x01	; 1
     904:	a1 1d       	adc	r26, r1
     906:	b1 1d       	adc	r27, r1
     908:	80 93 36 01 	sts	0x0136, r24
     90c:	90 93 37 01 	sts	0x0137, r25
     910:	a0 93 38 01 	sts	0x0138, r26
     914:	b0 93 39 01 	sts	0x0139, r27
}
     918:	cf 91       	pop	r28
     91a:	df 91       	pop	r29
     91c:	ff 91       	pop	r31
     91e:	ef 91       	pop	r30
     920:	bf 91       	pop	r27
     922:	af 91       	pop	r26
     924:	9f 91       	pop	r25
     926:	8f 91       	pop	r24
     928:	7f 91       	pop	r23
     92a:	6f 91       	pop	r22
     92c:	5f 91       	pop	r21
     92e:	4f 91       	pop	r20
     930:	3f 91       	pop	r19
     932:	2f 91       	pop	r18
     934:	0f 90       	pop	r0
     936:	00 92 5b 00 	sts	0x005B, r0
     93a:	0f 90       	pop	r0
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	0f 90       	pop	r0
     940:	1f 90       	pop	r1
     942:	18 95       	reti

00000944 <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
     944:	1f 92       	push	r1
     946:	0f 92       	push	r0
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	0f 92       	push	r0
     94c:	00 90 5b 00 	lds	r0, 0x005B
     950:	0f 92       	push	r0
     952:	11 24       	eor	r1, r1
     954:	8f 93       	push	r24
     956:	9f 93       	push	r25
     958:	af 93       	push	r26
     95a:	bf 93       	push	r27
     95c:	ef 93       	push	r30
     95e:	ff 93       	push	r31
     960:	df 93       	push	r29
     962:	cf 93       	push	r28
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
     968:	80 91 3a 01 	lds	r24, 0x013A
     96c:	88 23       	and	r24, r24
     96e:	d9 f0       	breq	.+54     	; 0x9a6 <__vector_23+0x62>
	{
		tx0_counter--;
     970:	80 91 3a 01 	lds	r24, 0x013A
     974:	81 50       	subi	r24, 0x01	; 1
     976:	80 93 3a 01 	sts	0x013A, r24
		UDR0 = tx0_buffer[tx0_rd_index];
     97a:	a6 ec       	ldi	r26, 0xC6	; 198
     97c:	b0 e0       	ldi	r27, 0x00	; 0
     97e:	80 91 3b 01 	lds	r24, 0x013B
     982:	88 2f       	mov	r24, r24
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	fc 01       	movw	r30, r24
     988:	ee 5b       	subi	r30, 0xBE	; 190
     98a:	fe 4f       	sbci	r31, 0xFE	; 254
     98c:	80 81       	ld	r24, Z
     98e:	8c 93       	st	X, r24
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
     990:	80 91 3b 01 	lds	r24, 0x013B
     994:	8f 5f       	subi	r24, 0xFF	; 255
     996:	80 93 3b 01 	sts	0x013B, r24
     99a:	80 91 3b 01 	lds	r24, 0x013B
     99e:	80 34       	cpi	r24, 0x40	; 64
     9a0:	11 f4       	brne	.+4      	; 0x9a6 <__vector_23+0x62>
			tx0_rd_index = 0;
     9a2:	10 92 3b 01 	sts	0x013B, r1
	}
}
     9a6:	cf 91       	pop	r28
     9a8:	df 91       	pop	r29
     9aa:	ff 91       	pop	r31
     9ac:	ef 91       	pop	r30
     9ae:	bf 91       	pop	r27
     9b0:	af 91       	pop	r26
     9b2:	9f 91       	pop	r25
     9b4:	8f 91       	pop	r24
     9b6:	0f 90       	pop	r0
     9b8:	00 92 5b 00 	sts	0x005B, r0
     9bc:	0f 90       	pop	r0
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	0f 90       	pop	r0
     9c2:	1f 90       	pop	r1
     9c4:	18 95       	reti

000009c6 <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
     9c6:	1f 92       	push	r1
     9c8:	0f 92       	push	r0
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	0f 92       	push	r0
     9ce:	00 90 5b 00 	lds	r0, 0x005B
     9d2:	0f 92       	push	r0
     9d4:	11 24       	eor	r1, r1
     9d6:	2f 93       	push	r18
     9d8:	8f 93       	push	r24
     9da:	9f 93       	push	r25
     9dc:	ef 93       	push	r30
     9de:	ff 93       	push	r31
     9e0:	df 93       	push	r29
     9e2:	cf 93       	push	r28
     9e4:	0f 92       	push	r0
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
     9ea:	e0 ec       	ldi	r30, 0xC0	; 192
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	80 81       	ld	r24, Z
     9f0:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
     9f2:	89 81       	ldd	r24, Y+1	; 0x01
     9f4:	88 2f       	mov	r24, r24
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	8c 71       	andi	r24, 0x1C	; 28
     9fa:	90 70       	andi	r25, 0x00	; 0
     9fc:	00 97       	sbiw	r24, 0x00	; 0
     9fe:	d9 f4       	brne	.+54     	; 0xa36 <__vector_21+0x70>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
     a00:	80 91 3c 01 	lds	r24, 0x013C
     a04:	88 2f       	mov	r24, r24
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	e6 ec       	ldi	r30, 0xC6	; 198
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	20 81       	ld	r18, Z
     a0e:	fc 01       	movw	r30, r24
     a10:	ee 57       	subi	r30, 0x7E	; 126
     a12:	fe 4f       	sbci	r31, 0xFE	; 254
     a14:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
     a16:	80 91 3c 01 	lds	r24, 0x013C
     a1a:	8f 5f       	subi	r24, 0xFF	; 255
     a1c:	80 93 3c 01 	sts	0x013C, r24
     a20:	80 91 3c 01 	lds	r24, 0x013C
     a24:	80 34       	cpi	r24, 0x40	; 64
     a26:	11 f4       	brne	.+4      	; 0xa2c <__vector_21+0x66>
			rx0_wr_index = 0;
     a28:	10 92 3c 01 	sts	0x013C, r1

		rx0_counter++;
     a2c:	80 91 3d 01 	lds	r24, 0x013D
     a30:	8f 5f       	subi	r24, 0xFF	; 255
     a32:	80 93 3d 01 	sts	0x013D, r24
	}
}
     a36:	0f 90       	pop	r0
     a38:	cf 91       	pop	r28
     a3a:	df 91       	pop	r29
     a3c:	ff 91       	pop	r31
     a3e:	ef 91       	pop	r30
     a40:	9f 91       	pop	r25
     a42:	8f 91       	pop	r24
     a44:	2f 91       	pop	r18
     a46:	0f 90       	pop	r0
     a48:	00 92 5b 00 	sts	0x005B, r0
     a4c:	0f 90       	pop	r0
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	0f 90       	pop	r0
     a52:	1f 90       	pop	r1
     a54:	18 95       	reti

00000a56 <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
     a56:	1f 92       	push	r1
     a58:	0f 92       	push	r0
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	0f 92       	push	r0
     a5e:	00 90 5b 00 	lds	r0, 0x005B
     a62:	0f 92       	push	r0
     a64:	11 24       	eor	r1, r1
     a66:	8f 93       	push	r24
     a68:	9f 93       	push	r25
     a6a:	af 93       	push	r26
     a6c:	bf 93       	push	r27
     a6e:	ef 93       	push	r30
     a70:	ff 93       	push	r31
     a72:	df 93       	push	r29
     a74:	cf 93       	push	r28
     a76:	cd b7       	in	r28, 0x3d	; 61
     a78:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
     a7a:	80 91 3e 01 	lds	r24, 0x013E
     a7e:	88 23       	and	r24, r24
     a80:	d9 f0       	breq	.+54     	; 0xab8 <__vector_34+0x62>
	{
		tx1_counter--;
     a82:	80 91 3e 01 	lds	r24, 0x013E
     a86:	81 50       	subi	r24, 0x01	; 1
     a88:	80 93 3e 01 	sts	0x013E, r24
		UDR1=tx1_buffer[tx1_rd_index];
     a8c:	ae ec       	ldi	r26, 0xCE	; 206
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	80 91 3f 01 	lds	r24, 0x013F
     a94:	88 2f       	mov	r24, r24
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	fc 01       	movw	r30, r24
     a9a:	ee 53       	subi	r30, 0x3E	; 62
     a9c:	fe 4f       	sbci	r31, 0xFE	; 254
     a9e:	80 81       	ld	r24, Z
     aa0:	8c 93       	st	X, r24
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
     aa2:	80 91 3f 01 	lds	r24, 0x013F
     aa6:	8f 5f       	subi	r24, 0xFF	; 255
     aa8:	80 93 3f 01 	sts	0x013F, r24
     aac:	80 91 3f 01 	lds	r24, 0x013F
     ab0:	80 34       	cpi	r24, 0x40	; 64
     ab2:	11 f4       	brne	.+4      	; 0xab8 <__vector_34+0x62>
			tx1_rd_index = 0;
     ab4:	10 92 3f 01 	sts	0x013F, r1
	}
}
     ab8:	cf 91       	pop	r28
     aba:	df 91       	pop	r29
     abc:	ff 91       	pop	r31
     abe:	ef 91       	pop	r30
     ac0:	bf 91       	pop	r27
     ac2:	af 91       	pop	r26
     ac4:	9f 91       	pop	r25
     ac6:	8f 91       	pop	r24
     ac8:	0f 90       	pop	r0
     aca:	00 92 5b 00 	sts	0x005B, r0
     ace:	0f 90       	pop	r0
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	0f 90       	pop	r0
     ad4:	1f 90       	pop	r1
     ad6:	18 95       	reti

00000ad8 <__vector_32>:

ISR(USART1_RX_vect)
{
     ad8:	1f 92       	push	r1
     ada:	0f 92       	push	r0
     adc:	0f b6       	in	r0, 0x3f	; 63
     ade:	0f 92       	push	r0
     ae0:	00 90 5b 00 	lds	r0, 0x005B
     ae4:	0f 92       	push	r0
     ae6:	11 24       	eor	r1, r1
     ae8:	2f 93       	push	r18
     aea:	8f 93       	push	r24
     aec:	9f 93       	push	r25
     aee:	ef 93       	push	r30
     af0:	ff 93       	push	r31
     af2:	df 93       	push	r29
     af4:	cf 93       	push	r28
     af6:	0f 92       	push	r0
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
     afc:	e8 ec       	ldi	r30, 0xC8	; 200
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	80 81       	ld	r24, Z
     b02:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
     b04:	89 81       	ldd	r24, Y+1	; 0x01
     b06:	88 2f       	mov	r24, r24
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	8c 71       	andi	r24, 0x1C	; 28
     b0c:	90 70       	andi	r25, 0x00	; 0
     b0e:	00 97       	sbiw	r24, 0x00	; 0
     b10:	d9 f4       	brne	.+54     	; 0xb48 <__vector_32+0x70>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
     b12:	80 91 40 01 	lds	r24, 0x0140
     b16:	88 2f       	mov	r24, r24
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	ee ec       	ldi	r30, 0xCE	; 206
     b1c:	f0 e0       	ldi	r31, 0x00	; 0
     b1e:	20 81       	ld	r18, Z
     b20:	fc 01       	movw	r30, r24
     b22:	ee 5f       	subi	r30, 0xFE	; 254
     b24:	fd 4f       	sbci	r31, 0xFD	; 253
     b26:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
     b28:	80 91 40 01 	lds	r24, 0x0140
     b2c:	8f 5f       	subi	r24, 0xFF	; 255
     b2e:	80 93 40 01 	sts	0x0140, r24
     b32:	80 91 40 01 	lds	r24, 0x0140
     b36:	80 34       	cpi	r24, 0x40	; 64
     b38:	11 f4       	brne	.+4      	; 0xb3e <__vector_32+0x66>
		rx1_wr_index = 0;
     b3a:	10 92 40 01 	sts	0x0140, r1

		rx1_counter++;
     b3e:	80 91 41 01 	lds	r24, 0x0141
     b42:	8f 5f       	subi	r24, 0xFF	; 255
     b44:	80 93 41 01 	sts	0x0141, r24
	}
}
     b48:	0f 90       	pop	r0
     b4a:	cf 91       	pop	r28
     b4c:	df 91       	pop	r29
     b4e:	ff 91       	pop	r31
     b50:	ef 91       	pop	r30
     b52:	9f 91       	pop	r25
     b54:	8f 91       	pop	r24
     b56:	2f 91       	pop	r18
     b58:	0f 90       	pop	r0
     b5a:	00 92 5b 00 	sts	0x005B, r0
     b5e:	0f 90       	pop	r0
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	0f 90       	pop	r0
     b64:	1f 90       	pop	r1
     b66:	18 95       	reti

00000b68 <__subsf3>:
     b68:	50 58       	subi	r21, 0x80	; 128

00000b6a <__addsf3>:
     b6a:	bb 27       	eor	r27, r27
     b6c:	aa 27       	eor	r26, r26
     b6e:	0e d0       	rcall	.+28     	; 0xb8c <__addsf3x>
     b70:	48 c1       	rjmp	.+656    	; 0xe02 <__fp_round>
     b72:	39 d1       	rcall	.+626    	; 0xde6 <__fp_pscA>
     b74:	30 f0       	brcs	.+12     	; 0xb82 <__addsf3+0x18>
     b76:	3e d1       	rcall	.+636    	; 0xdf4 <__fp_pscB>
     b78:	20 f0       	brcs	.+8      	; 0xb82 <__addsf3+0x18>
     b7a:	31 f4       	brne	.+12     	; 0xb88 <__addsf3+0x1e>
     b7c:	9f 3f       	cpi	r25, 0xFF	; 255
     b7e:	11 f4       	brne	.+4      	; 0xb84 <__addsf3+0x1a>
     b80:	1e f4       	brtc	.+6      	; 0xb88 <__addsf3+0x1e>
     b82:	2e c1       	rjmp	.+604    	; 0xde0 <__fp_nan>
     b84:	0e f4       	brtc	.+2      	; 0xb88 <__addsf3+0x1e>
     b86:	e0 95       	com	r30
     b88:	e7 fb       	bst	r30, 7
     b8a:	24 c1       	rjmp	.+584    	; 0xdd4 <__fp_inf>

00000b8c <__addsf3x>:
     b8c:	e9 2f       	mov	r30, r25
     b8e:	4a d1       	rcall	.+660    	; 0xe24 <__fp_split3>
     b90:	80 f3       	brcs	.-32     	; 0xb72 <__addsf3+0x8>
     b92:	ba 17       	cp	r27, r26
     b94:	62 07       	cpc	r22, r18
     b96:	73 07       	cpc	r23, r19
     b98:	84 07       	cpc	r24, r20
     b9a:	95 07       	cpc	r25, r21
     b9c:	18 f0       	brcs	.+6      	; 0xba4 <__addsf3x+0x18>
     b9e:	71 f4       	brne	.+28     	; 0xbbc <__addsf3x+0x30>
     ba0:	9e f5       	brtc	.+102    	; 0xc08 <__addsf3x+0x7c>
     ba2:	62 c1       	rjmp	.+708    	; 0xe68 <__fp_zero>
     ba4:	0e f4       	brtc	.+2      	; 0xba8 <__addsf3x+0x1c>
     ba6:	e0 95       	com	r30
     ba8:	0b 2e       	mov	r0, r27
     baa:	ba 2f       	mov	r27, r26
     bac:	a0 2d       	mov	r26, r0
     bae:	0b 01       	movw	r0, r22
     bb0:	b9 01       	movw	r22, r18
     bb2:	90 01       	movw	r18, r0
     bb4:	0c 01       	movw	r0, r24
     bb6:	ca 01       	movw	r24, r20
     bb8:	a0 01       	movw	r20, r0
     bba:	11 24       	eor	r1, r1
     bbc:	ff 27       	eor	r31, r31
     bbe:	59 1b       	sub	r21, r25
     bc0:	99 f0       	breq	.+38     	; 0xbe8 <__addsf3x+0x5c>
     bc2:	59 3f       	cpi	r21, 0xF9	; 249
     bc4:	50 f4       	brcc	.+20     	; 0xbda <__addsf3x+0x4e>
     bc6:	50 3e       	cpi	r21, 0xE0	; 224
     bc8:	68 f1       	brcs	.+90     	; 0xc24 <__addsf3x+0x98>
     bca:	1a 16       	cp	r1, r26
     bcc:	f0 40       	sbci	r31, 0x00	; 0
     bce:	a2 2f       	mov	r26, r18
     bd0:	23 2f       	mov	r18, r19
     bd2:	34 2f       	mov	r19, r20
     bd4:	44 27       	eor	r20, r20
     bd6:	58 5f       	subi	r21, 0xF8	; 248
     bd8:	f3 cf       	rjmp	.-26     	; 0xbc0 <__addsf3x+0x34>
     bda:	46 95       	lsr	r20
     bdc:	37 95       	ror	r19
     bde:	27 95       	ror	r18
     be0:	a7 95       	ror	r26
     be2:	f0 40       	sbci	r31, 0x00	; 0
     be4:	53 95       	inc	r21
     be6:	c9 f7       	brne	.-14     	; 0xbda <__addsf3x+0x4e>
     be8:	7e f4       	brtc	.+30     	; 0xc08 <__addsf3x+0x7c>
     bea:	1f 16       	cp	r1, r31
     bec:	ba 0b       	sbc	r27, r26
     bee:	62 0b       	sbc	r22, r18
     bf0:	73 0b       	sbc	r23, r19
     bf2:	84 0b       	sbc	r24, r20
     bf4:	ba f0       	brmi	.+46     	; 0xc24 <__addsf3x+0x98>
     bf6:	91 50       	subi	r25, 0x01	; 1
     bf8:	a1 f0       	breq	.+40     	; 0xc22 <__addsf3x+0x96>
     bfa:	ff 0f       	add	r31, r31
     bfc:	bb 1f       	adc	r27, r27
     bfe:	66 1f       	adc	r22, r22
     c00:	77 1f       	adc	r23, r23
     c02:	88 1f       	adc	r24, r24
     c04:	c2 f7       	brpl	.-16     	; 0xbf6 <__addsf3x+0x6a>
     c06:	0e c0       	rjmp	.+28     	; 0xc24 <__addsf3x+0x98>
     c08:	ba 0f       	add	r27, r26
     c0a:	62 1f       	adc	r22, r18
     c0c:	73 1f       	adc	r23, r19
     c0e:	84 1f       	adc	r24, r20
     c10:	48 f4       	brcc	.+18     	; 0xc24 <__addsf3x+0x98>
     c12:	87 95       	ror	r24
     c14:	77 95       	ror	r23
     c16:	67 95       	ror	r22
     c18:	b7 95       	ror	r27
     c1a:	f7 95       	ror	r31
     c1c:	9e 3f       	cpi	r25, 0xFE	; 254
     c1e:	08 f0       	brcs	.+2      	; 0xc22 <__addsf3x+0x96>
     c20:	b3 cf       	rjmp	.-154    	; 0xb88 <__addsf3+0x1e>
     c22:	93 95       	inc	r25
     c24:	88 0f       	add	r24, r24
     c26:	08 f0       	brcs	.+2      	; 0xc2a <__addsf3x+0x9e>
     c28:	99 27       	eor	r25, r25
     c2a:	ee 0f       	add	r30, r30
     c2c:	97 95       	ror	r25
     c2e:	87 95       	ror	r24
     c30:	08 95       	ret

00000c32 <__divsf3>:
     c32:	0c d0       	rcall	.+24     	; 0xc4c <__divsf3x>
     c34:	e6 c0       	rjmp	.+460    	; 0xe02 <__fp_round>
     c36:	de d0       	rcall	.+444    	; 0xdf4 <__fp_pscB>
     c38:	40 f0       	brcs	.+16     	; 0xc4a <__divsf3+0x18>
     c3a:	d5 d0       	rcall	.+426    	; 0xde6 <__fp_pscA>
     c3c:	30 f0       	brcs	.+12     	; 0xc4a <__divsf3+0x18>
     c3e:	21 f4       	brne	.+8      	; 0xc48 <__divsf3+0x16>
     c40:	5f 3f       	cpi	r21, 0xFF	; 255
     c42:	19 f0       	breq	.+6      	; 0xc4a <__divsf3+0x18>
     c44:	c7 c0       	rjmp	.+398    	; 0xdd4 <__fp_inf>
     c46:	51 11       	cpse	r21, r1
     c48:	10 c1       	rjmp	.+544    	; 0xe6a <__fp_szero>
     c4a:	ca c0       	rjmp	.+404    	; 0xde0 <__fp_nan>

00000c4c <__divsf3x>:
     c4c:	eb d0       	rcall	.+470    	; 0xe24 <__fp_split3>
     c4e:	98 f3       	brcs	.-26     	; 0xc36 <__divsf3+0x4>

00000c50 <__divsf3_pse>:
     c50:	99 23       	and	r25, r25
     c52:	c9 f3       	breq	.-14     	; 0xc46 <__divsf3+0x14>
     c54:	55 23       	and	r21, r21
     c56:	b1 f3       	breq	.-20     	; 0xc44 <__divsf3+0x12>
     c58:	95 1b       	sub	r25, r21
     c5a:	55 0b       	sbc	r21, r21
     c5c:	bb 27       	eor	r27, r27
     c5e:	aa 27       	eor	r26, r26
     c60:	62 17       	cp	r22, r18
     c62:	73 07       	cpc	r23, r19
     c64:	84 07       	cpc	r24, r20
     c66:	38 f0       	brcs	.+14     	; 0xc76 <__divsf3_pse+0x26>
     c68:	9f 5f       	subi	r25, 0xFF	; 255
     c6a:	5f 4f       	sbci	r21, 0xFF	; 255
     c6c:	22 0f       	add	r18, r18
     c6e:	33 1f       	adc	r19, r19
     c70:	44 1f       	adc	r20, r20
     c72:	aa 1f       	adc	r26, r26
     c74:	a9 f3       	breq	.-22     	; 0xc60 <__divsf3_pse+0x10>
     c76:	33 d0       	rcall	.+102    	; 0xcde <__divsf3_pse+0x8e>
     c78:	0e 2e       	mov	r0, r30
     c7a:	3a f0       	brmi	.+14     	; 0xc8a <__divsf3_pse+0x3a>
     c7c:	e0 e8       	ldi	r30, 0x80	; 128
     c7e:	30 d0       	rcall	.+96     	; 0xce0 <__divsf3_pse+0x90>
     c80:	91 50       	subi	r25, 0x01	; 1
     c82:	50 40       	sbci	r21, 0x00	; 0
     c84:	e6 95       	lsr	r30
     c86:	00 1c       	adc	r0, r0
     c88:	ca f7       	brpl	.-14     	; 0xc7c <__divsf3_pse+0x2c>
     c8a:	29 d0       	rcall	.+82     	; 0xcde <__divsf3_pse+0x8e>
     c8c:	fe 2f       	mov	r31, r30
     c8e:	27 d0       	rcall	.+78     	; 0xcde <__divsf3_pse+0x8e>
     c90:	66 0f       	add	r22, r22
     c92:	77 1f       	adc	r23, r23
     c94:	88 1f       	adc	r24, r24
     c96:	bb 1f       	adc	r27, r27
     c98:	26 17       	cp	r18, r22
     c9a:	37 07       	cpc	r19, r23
     c9c:	48 07       	cpc	r20, r24
     c9e:	ab 07       	cpc	r26, r27
     ca0:	b0 e8       	ldi	r27, 0x80	; 128
     ca2:	09 f0       	breq	.+2      	; 0xca6 <__divsf3_pse+0x56>
     ca4:	bb 0b       	sbc	r27, r27
     ca6:	80 2d       	mov	r24, r0
     ca8:	bf 01       	movw	r22, r30
     caa:	ff 27       	eor	r31, r31
     cac:	93 58       	subi	r25, 0x83	; 131
     cae:	5f 4f       	sbci	r21, 0xFF	; 255
     cb0:	2a f0       	brmi	.+10     	; 0xcbc <__divsf3_pse+0x6c>
     cb2:	9e 3f       	cpi	r25, 0xFE	; 254
     cb4:	51 05       	cpc	r21, r1
     cb6:	68 f0       	brcs	.+26     	; 0xcd2 <__divsf3_pse+0x82>
     cb8:	8d c0       	rjmp	.+282    	; 0xdd4 <__fp_inf>
     cba:	d7 c0       	rjmp	.+430    	; 0xe6a <__fp_szero>
     cbc:	5f 3f       	cpi	r21, 0xFF	; 255
     cbe:	ec f3       	brlt	.-6      	; 0xcba <__divsf3_pse+0x6a>
     cc0:	98 3e       	cpi	r25, 0xE8	; 232
     cc2:	dc f3       	brlt	.-10     	; 0xcba <__divsf3_pse+0x6a>
     cc4:	86 95       	lsr	r24
     cc6:	77 95       	ror	r23
     cc8:	67 95       	ror	r22
     cca:	b7 95       	ror	r27
     ccc:	f7 95       	ror	r31
     cce:	9f 5f       	subi	r25, 0xFF	; 255
     cd0:	c9 f7       	brne	.-14     	; 0xcc4 <__divsf3_pse+0x74>
     cd2:	88 0f       	add	r24, r24
     cd4:	91 1d       	adc	r25, r1
     cd6:	96 95       	lsr	r25
     cd8:	87 95       	ror	r24
     cda:	97 f9       	bld	r25, 7
     cdc:	08 95       	ret
     cde:	e1 e0       	ldi	r30, 0x01	; 1
     ce0:	66 0f       	add	r22, r22
     ce2:	77 1f       	adc	r23, r23
     ce4:	88 1f       	adc	r24, r24
     ce6:	bb 1f       	adc	r27, r27
     ce8:	62 17       	cp	r22, r18
     cea:	73 07       	cpc	r23, r19
     cec:	84 07       	cpc	r24, r20
     cee:	ba 07       	cpc	r27, r26
     cf0:	20 f0       	brcs	.+8      	; 0xcfa <__divsf3_pse+0xaa>
     cf2:	62 1b       	sub	r22, r18
     cf4:	73 0b       	sbc	r23, r19
     cf6:	84 0b       	sbc	r24, r20
     cf8:	ba 0b       	sbc	r27, r26
     cfa:	ee 1f       	adc	r30, r30
     cfc:	88 f7       	brcc	.-30     	; 0xce0 <__divsf3_pse+0x90>
     cfe:	e0 95       	com	r30
     d00:	08 95       	ret

00000d02 <__fixunssfsi>:
     d02:	98 d0       	rcall	.+304    	; 0xe34 <__fp_splitA>
     d04:	88 f0       	brcs	.+34     	; 0xd28 <__fixunssfsi+0x26>
     d06:	9f 57       	subi	r25, 0x7F	; 127
     d08:	90 f0       	brcs	.+36     	; 0xd2e <__fixunssfsi+0x2c>
     d0a:	b9 2f       	mov	r27, r25
     d0c:	99 27       	eor	r25, r25
     d0e:	b7 51       	subi	r27, 0x17	; 23
     d10:	a0 f0       	brcs	.+40     	; 0xd3a <__fixunssfsi+0x38>
     d12:	d1 f0       	breq	.+52     	; 0xd48 <__fixunssfsi+0x46>
     d14:	66 0f       	add	r22, r22
     d16:	77 1f       	adc	r23, r23
     d18:	88 1f       	adc	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	1a f0       	brmi	.+6      	; 0xd24 <__fixunssfsi+0x22>
     d1e:	ba 95       	dec	r27
     d20:	c9 f7       	brne	.-14     	; 0xd14 <__fixunssfsi+0x12>
     d22:	12 c0       	rjmp	.+36     	; 0xd48 <__fixunssfsi+0x46>
     d24:	b1 30       	cpi	r27, 0x01	; 1
     d26:	81 f0       	breq	.+32     	; 0xd48 <__fixunssfsi+0x46>
     d28:	9f d0       	rcall	.+318    	; 0xe68 <__fp_zero>
     d2a:	b1 e0       	ldi	r27, 0x01	; 1
     d2c:	08 95       	ret
     d2e:	9c c0       	rjmp	.+312    	; 0xe68 <__fp_zero>
     d30:	67 2f       	mov	r22, r23
     d32:	78 2f       	mov	r23, r24
     d34:	88 27       	eor	r24, r24
     d36:	b8 5f       	subi	r27, 0xF8	; 248
     d38:	39 f0       	breq	.+14     	; 0xd48 <__fixunssfsi+0x46>
     d3a:	b9 3f       	cpi	r27, 0xF9	; 249
     d3c:	cc f3       	brlt	.-14     	; 0xd30 <__fixunssfsi+0x2e>
     d3e:	86 95       	lsr	r24
     d40:	77 95       	ror	r23
     d42:	67 95       	ror	r22
     d44:	b3 95       	inc	r27
     d46:	d9 f7       	brne	.-10     	; 0xd3e <__fixunssfsi+0x3c>
     d48:	3e f4       	brtc	.+14     	; 0xd58 <__fixunssfsi+0x56>
     d4a:	90 95       	com	r25
     d4c:	80 95       	com	r24
     d4e:	70 95       	com	r23
     d50:	61 95       	neg	r22
     d52:	7f 4f       	sbci	r23, 0xFF	; 255
     d54:	8f 4f       	sbci	r24, 0xFF	; 255
     d56:	9f 4f       	sbci	r25, 0xFF	; 255
     d58:	08 95       	ret

00000d5a <__floatunsisf>:
     d5a:	e8 94       	clt
     d5c:	09 c0       	rjmp	.+18     	; 0xd70 <__floatsisf+0x12>

00000d5e <__floatsisf>:
     d5e:	97 fb       	bst	r25, 7
     d60:	3e f4       	brtc	.+14     	; 0xd70 <__floatsisf+0x12>
     d62:	90 95       	com	r25
     d64:	80 95       	com	r24
     d66:	70 95       	com	r23
     d68:	61 95       	neg	r22
     d6a:	7f 4f       	sbci	r23, 0xFF	; 255
     d6c:	8f 4f       	sbci	r24, 0xFF	; 255
     d6e:	9f 4f       	sbci	r25, 0xFF	; 255
     d70:	99 23       	and	r25, r25
     d72:	a9 f0       	breq	.+42     	; 0xd9e <__floatsisf+0x40>
     d74:	f9 2f       	mov	r31, r25
     d76:	96 e9       	ldi	r25, 0x96	; 150
     d78:	bb 27       	eor	r27, r27
     d7a:	93 95       	inc	r25
     d7c:	f6 95       	lsr	r31
     d7e:	87 95       	ror	r24
     d80:	77 95       	ror	r23
     d82:	67 95       	ror	r22
     d84:	b7 95       	ror	r27
     d86:	f1 11       	cpse	r31, r1
     d88:	f8 cf       	rjmp	.-16     	; 0xd7a <__floatsisf+0x1c>
     d8a:	fa f4       	brpl	.+62     	; 0xdca <__floatsisf+0x6c>
     d8c:	bb 0f       	add	r27, r27
     d8e:	11 f4       	brne	.+4      	; 0xd94 <__floatsisf+0x36>
     d90:	60 ff       	sbrs	r22, 0
     d92:	1b c0       	rjmp	.+54     	; 0xdca <__floatsisf+0x6c>
     d94:	6f 5f       	subi	r22, 0xFF	; 255
     d96:	7f 4f       	sbci	r23, 0xFF	; 255
     d98:	8f 4f       	sbci	r24, 0xFF	; 255
     d9a:	9f 4f       	sbci	r25, 0xFF	; 255
     d9c:	16 c0       	rjmp	.+44     	; 0xdca <__floatsisf+0x6c>
     d9e:	88 23       	and	r24, r24
     da0:	11 f0       	breq	.+4      	; 0xda6 <__floatsisf+0x48>
     da2:	96 e9       	ldi	r25, 0x96	; 150
     da4:	11 c0       	rjmp	.+34     	; 0xdc8 <__floatsisf+0x6a>
     da6:	77 23       	and	r23, r23
     da8:	21 f0       	breq	.+8      	; 0xdb2 <__floatsisf+0x54>
     daa:	9e e8       	ldi	r25, 0x8E	; 142
     dac:	87 2f       	mov	r24, r23
     dae:	76 2f       	mov	r23, r22
     db0:	05 c0       	rjmp	.+10     	; 0xdbc <__floatsisf+0x5e>
     db2:	66 23       	and	r22, r22
     db4:	71 f0       	breq	.+28     	; 0xdd2 <__floatsisf+0x74>
     db6:	96 e8       	ldi	r25, 0x86	; 134
     db8:	86 2f       	mov	r24, r22
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	2a f0       	brmi	.+10     	; 0xdca <__floatsisf+0x6c>
     dc0:	9a 95       	dec	r25
     dc2:	66 0f       	add	r22, r22
     dc4:	77 1f       	adc	r23, r23
     dc6:	88 1f       	adc	r24, r24
     dc8:	da f7       	brpl	.-10     	; 0xdc0 <__floatsisf+0x62>
     dca:	88 0f       	add	r24, r24
     dcc:	96 95       	lsr	r25
     dce:	87 95       	ror	r24
     dd0:	97 f9       	bld	r25, 7
     dd2:	08 95       	ret

00000dd4 <__fp_inf>:
     dd4:	97 f9       	bld	r25, 7
     dd6:	9f 67       	ori	r25, 0x7F	; 127
     dd8:	80 e8       	ldi	r24, 0x80	; 128
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	08 95       	ret

00000de0 <__fp_nan>:
     de0:	9f ef       	ldi	r25, 0xFF	; 255
     de2:	80 ec       	ldi	r24, 0xC0	; 192
     de4:	08 95       	ret

00000de6 <__fp_pscA>:
     de6:	00 24       	eor	r0, r0
     de8:	0a 94       	dec	r0
     dea:	16 16       	cp	r1, r22
     dec:	17 06       	cpc	r1, r23
     dee:	18 06       	cpc	r1, r24
     df0:	09 06       	cpc	r0, r25
     df2:	08 95       	ret

00000df4 <__fp_pscB>:
     df4:	00 24       	eor	r0, r0
     df6:	0a 94       	dec	r0
     df8:	12 16       	cp	r1, r18
     dfa:	13 06       	cpc	r1, r19
     dfc:	14 06       	cpc	r1, r20
     dfe:	05 06       	cpc	r0, r21
     e00:	08 95       	ret

00000e02 <__fp_round>:
     e02:	09 2e       	mov	r0, r25
     e04:	03 94       	inc	r0
     e06:	00 0c       	add	r0, r0
     e08:	11 f4       	brne	.+4      	; 0xe0e <__fp_round+0xc>
     e0a:	88 23       	and	r24, r24
     e0c:	52 f0       	brmi	.+20     	; 0xe22 <__fp_round+0x20>
     e0e:	bb 0f       	add	r27, r27
     e10:	40 f4       	brcc	.+16     	; 0xe22 <__fp_round+0x20>
     e12:	bf 2b       	or	r27, r31
     e14:	11 f4       	brne	.+4      	; 0xe1a <__fp_round+0x18>
     e16:	60 ff       	sbrs	r22, 0
     e18:	04 c0       	rjmp	.+8      	; 0xe22 <__fp_round+0x20>
     e1a:	6f 5f       	subi	r22, 0xFF	; 255
     e1c:	7f 4f       	sbci	r23, 0xFF	; 255
     e1e:	8f 4f       	sbci	r24, 0xFF	; 255
     e20:	9f 4f       	sbci	r25, 0xFF	; 255
     e22:	08 95       	ret

00000e24 <__fp_split3>:
     e24:	57 fd       	sbrc	r21, 7
     e26:	90 58       	subi	r25, 0x80	; 128
     e28:	44 0f       	add	r20, r20
     e2a:	55 1f       	adc	r21, r21
     e2c:	59 f0       	breq	.+22     	; 0xe44 <__fp_splitA+0x10>
     e2e:	5f 3f       	cpi	r21, 0xFF	; 255
     e30:	71 f0       	breq	.+28     	; 0xe4e <__fp_splitA+0x1a>
     e32:	47 95       	ror	r20

00000e34 <__fp_splitA>:
     e34:	88 0f       	add	r24, r24
     e36:	97 fb       	bst	r25, 7
     e38:	99 1f       	adc	r25, r25
     e3a:	61 f0       	breq	.+24     	; 0xe54 <__fp_splitA+0x20>
     e3c:	9f 3f       	cpi	r25, 0xFF	; 255
     e3e:	79 f0       	breq	.+30     	; 0xe5e <__fp_splitA+0x2a>
     e40:	87 95       	ror	r24
     e42:	08 95       	ret
     e44:	12 16       	cp	r1, r18
     e46:	13 06       	cpc	r1, r19
     e48:	14 06       	cpc	r1, r20
     e4a:	55 1f       	adc	r21, r21
     e4c:	f2 cf       	rjmp	.-28     	; 0xe32 <__fp_split3+0xe>
     e4e:	46 95       	lsr	r20
     e50:	f1 df       	rcall	.-30     	; 0xe34 <__fp_splitA>
     e52:	08 c0       	rjmp	.+16     	; 0xe64 <__fp_splitA+0x30>
     e54:	16 16       	cp	r1, r22
     e56:	17 06       	cpc	r1, r23
     e58:	18 06       	cpc	r1, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	f1 cf       	rjmp	.-30     	; 0xe40 <__fp_splitA+0xc>
     e5e:	86 95       	lsr	r24
     e60:	71 05       	cpc	r23, r1
     e62:	61 05       	cpc	r22, r1
     e64:	08 94       	sec
     e66:	08 95       	ret

00000e68 <__fp_zero>:
     e68:	e8 94       	clt

00000e6a <__fp_szero>:
     e6a:	bb 27       	eor	r27, r27
     e6c:	66 27       	eor	r22, r22
     e6e:	77 27       	eor	r23, r23
     e70:	cb 01       	movw	r24, r22
     e72:	97 f9       	bld	r25, 7
     e74:	08 95       	ret

00000e76 <malloc>:
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	bc 01       	movw	r22, r24
     e7c:	82 30       	cpi	r24, 0x02	; 2
     e7e:	91 05       	cpc	r25, r1
     e80:	10 f4       	brcc	.+4      	; 0xe86 <malloc+0x10>
     e82:	62 e0       	ldi	r22, 0x02	; 2
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	a0 91 44 02 	lds	r26, 0x0244
     e8a:	b0 91 45 02 	lds	r27, 0x0245
     e8e:	ed 01       	movw	r28, r26
     e90:	e0 e0       	ldi	r30, 0x00	; 0
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	40 e0       	ldi	r20, 0x00	; 0
     e96:	50 e0       	ldi	r21, 0x00	; 0
     e98:	21 c0       	rjmp	.+66     	; 0xedc <malloc+0x66>
     e9a:	88 81       	ld	r24, Y
     e9c:	99 81       	ldd	r25, Y+1	; 0x01
     e9e:	86 17       	cp	r24, r22
     ea0:	97 07       	cpc	r25, r23
     ea2:	69 f4       	brne	.+26     	; 0xebe <malloc+0x48>
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	9b 81       	ldd	r25, Y+3	; 0x03
     ea8:	30 97       	sbiw	r30, 0x00	; 0
     eaa:	19 f0       	breq	.+6      	; 0xeb2 <malloc+0x3c>
     eac:	93 83       	std	Z+3, r25	; 0x03
     eae:	82 83       	std	Z+2, r24	; 0x02
     eb0:	04 c0       	rjmp	.+8      	; 0xeba <malloc+0x44>
     eb2:	90 93 45 02 	sts	0x0245, r25
     eb6:	80 93 44 02 	sts	0x0244, r24
     eba:	fe 01       	movw	r30, r28
     ebc:	34 c0       	rjmp	.+104    	; 0xf26 <malloc+0xb0>
     ebe:	68 17       	cp	r22, r24
     ec0:	79 07       	cpc	r23, r25
     ec2:	38 f4       	brcc	.+14     	; 0xed2 <malloc+0x5c>
     ec4:	41 15       	cp	r20, r1
     ec6:	51 05       	cpc	r21, r1
     ec8:	19 f0       	breq	.+6      	; 0xed0 <malloc+0x5a>
     eca:	84 17       	cp	r24, r20
     ecc:	95 07       	cpc	r25, r21
     ece:	08 f4       	brcc	.+2      	; 0xed2 <malloc+0x5c>
     ed0:	ac 01       	movw	r20, r24
     ed2:	fe 01       	movw	r30, r28
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	9b 81       	ldd	r25, Y+3	; 0x03
     ed8:	9c 01       	movw	r18, r24
     eda:	e9 01       	movw	r28, r18
     edc:	20 97       	sbiw	r28, 0x00	; 0
     ede:	e9 f6       	brne	.-70     	; 0xe9a <malloc+0x24>
     ee0:	41 15       	cp	r20, r1
     ee2:	51 05       	cpc	r21, r1
     ee4:	a9 f1       	breq	.+106    	; 0xf50 <malloc+0xda>
     ee6:	ca 01       	movw	r24, r20
     ee8:	86 1b       	sub	r24, r22
     eea:	97 0b       	sbc	r25, r23
     eec:	04 97       	sbiw	r24, 0x04	; 4
     eee:	08 f4       	brcc	.+2      	; 0xef2 <malloc+0x7c>
     ef0:	ba 01       	movw	r22, r20
     ef2:	e0 e0       	ldi	r30, 0x00	; 0
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	2a c0       	rjmp	.+84     	; 0xf4c <malloc+0xd6>
     ef8:	8d 91       	ld	r24, X+
     efa:	9c 91       	ld	r25, X
     efc:	11 97       	sbiw	r26, 0x01	; 1
     efe:	84 17       	cp	r24, r20
     f00:	95 07       	cpc	r25, r21
     f02:	f9 f4       	brne	.+62     	; 0xf42 <malloc+0xcc>
     f04:	64 17       	cp	r22, r20
     f06:	75 07       	cpc	r23, r21
     f08:	81 f4       	brne	.+32     	; 0xf2a <malloc+0xb4>
     f0a:	12 96       	adiw	r26, 0x02	; 2
     f0c:	8d 91       	ld	r24, X+
     f0e:	9c 91       	ld	r25, X
     f10:	13 97       	sbiw	r26, 0x03	; 3
     f12:	30 97       	sbiw	r30, 0x00	; 0
     f14:	19 f0       	breq	.+6      	; 0xf1c <malloc+0xa6>
     f16:	93 83       	std	Z+3, r25	; 0x03
     f18:	82 83       	std	Z+2, r24	; 0x02
     f1a:	04 c0       	rjmp	.+8      	; 0xf24 <malloc+0xae>
     f1c:	90 93 45 02 	sts	0x0245, r25
     f20:	80 93 44 02 	sts	0x0244, r24
     f24:	fd 01       	movw	r30, r26
     f26:	32 96       	adiw	r30, 0x02	; 2
     f28:	4f c0       	rjmp	.+158    	; 0xfc8 <malloc+0x152>
     f2a:	ca 01       	movw	r24, r20
     f2c:	86 1b       	sub	r24, r22
     f2e:	97 0b       	sbc	r25, r23
     f30:	fd 01       	movw	r30, r26
     f32:	e8 0f       	add	r30, r24
     f34:	f9 1f       	adc	r31, r25
     f36:	61 93       	st	Z+, r22
     f38:	71 93       	st	Z+, r23
     f3a:	02 97       	sbiw	r24, 0x02	; 2
     f3c:	8d 93       	st	X+, r24
     f3e:	9c 93       	st	X, r25
     f40:	43 c0       	rjmp	.+134    	; 0xfc8 <malloc+0x152>
     f42:	fd 01       	movw	r30, r26
     f44:	82 81       	ldd	r24, Z+2	; 0x02
     f46:	93 81       	ldd	r25, Z+3	; 0x03
     f48:	9c 01       	movw	r18, r24
     f4a:	d9 01       	movw	r26, r18
     f4c:	10 97       	sbiw	r26, 0x00	; 0
     f4e:	a1 f6       	brne	.-88     	; 0xef8 <malloc+0x82>
     f50:	80 91 42 02 	lds	r24, 0x0242
     f54:	90 91 43 02 	lds	r25, 0x0243
     f58:	89 2b       	or	r24, r25
     f5a:	41 f4       	brne	.+16     	; 0xf6c <malloc+0xf6>
     f5c:	80 91 02 01 	lds	r24, 0x0102
     f60:	90 91 03 01 	lds	r25, 0x0103
     f64:	90 93 43 02 	sts	0x0243, r25
     f68:	80 93 42 02 	sts	0x0242, r24
     f6c:	40 91 04 01 	lds	r20, 0x0104
     f70:	50 91 05 01 	lds	r21, 0x0105
     f74:	41 15       	cp	r20, r1
     f76:	51 05       	cpc	r21, r1
     f78:	41 f4       	brne	.+16     	; 0xf8a <malloc+0x114>
     f7a:	4d b7       	in	r20, 0x3d	; 61
     f7c:	5e b7       	in	r21, 0x3e	; 62
     f7e:	80 91 00 01 	lds	r24, 0x0100
     f82:	90 91 01 01 	lds	r25, 0x0101
     f86:	48 1b       	sub	r20, r24
     f88:	59 0b       	sbc	r21, r25
     f8a:	20 91 42 02 	lds	r18, 0x0242
     f8e:	30 91 43 02 	lds	r19, 0x0243
     f92:	24 17       	cp	r18, r20
     f94:	35 07       	cpc	r19, r21
     f96:	b0 f4       	brcc	.+44     	; 0xfc4 <malloc+0x14e>
     f98:	ca 01       	movw	r24, r20
     f9a:	82 1b       	sub	r24, r18
     f9c:	93 0b       	sbc	r25, r19
     f9e:	86 17       	cp	r24, r22
     fa0:	97 07       	cpc	r25, r23
     fa2:	80 f0       	brcs	.+32     	; 0xfc4 <malloc+0x14e>
     fa4:	ab 01       	movw	r20, r22
     fa6:	4e 5f       	subi	r20, 0xFE	; 254
     fa8:	5f 4f       	sbci	r21, 0xFF	; 255
     faa:	84 17       	cp	r24, r20
     fac:	95 07       	cpc	r25, r21
     fae:	50 f0       	brcs	.+20     	; 0xfc4 <malloc+0x14e>
     fb0:	42 0f       	add	r20, r18
     fb2:	53 1f       	adc	r21, r19
     fb4:	50 93 43 02 	sts	0x0243, r21
     fb8:	40 93 42 02 	sts	0x0242, r20
     fbc:	f9 01       	movw	r30, r18
     fbe:	61 93       	st	Z+, r22
     fc0:	71 93       	st	Z+, r23
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <malloc+0x152>
     fc4:	e0 e0       	ldi	r30, 0x00	; 0
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	cf 01       	movw	r24, r30
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	08 95       	ret

00000fd0 <free>:
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	00 97       	sbiw	r24, 0x00	; 0
     fd6:	09 f4       	brne	.+2      	; 0xfda <free+0xa>
     fd8:	50 c0       	rjmp	.+160    	; 0x107a <free+0xaa>
     fda:	ec 01       	movw	r28, r24
     fdc:	22 97       	sbiw	r28, 0x02	; 2
     fde:	1b 82       	std	Y+3, r1	; 0x03
     fe0:	1a 82       	std	Y+2, r1	; 0x02
     fe2:	a0 91 44 02 	lds	r26, 0x0244
     fe6:	b0 91 45 02 	lds	r27, 0x0245
     fea:	10 97       	sbiw	r26, 0x00	; 0
     fec:	09 f1       	breq	.+66     	; 0x1030 <free+0x60>
     fee:	40 e0       	ldi	r20, 0x00	; 0
     ff0:	50 e0       	ldi	r21, 0x00	; 0
     ff2:	ac 17       	cp	r26, r28
     ff4:	bd 07       	cpc	r27, r29
     ff6:	08 f1       	brcs	.+66     	; 0x103a <free+0x6a>
     ff8:	bb 83       	std	Y+3, r27	; 0x03
     ffa:	aa 83       	std	Y+2, r26	; 0x02
     ffc:	fe 01       	movw	r30, r28
     ffe:	21 91       	ld	r18, Z+
    1000:	31 91       	ld	r19, Z+
    1002:	e2 0f       	add	r30, r18
    1004:	f3 1f       	adc	r31, r19
    1006:	ae 17       	cp	r26, r30
    1008:	bf 07       	cpc	r27, r31
    100a:	79 f4       	brne	.+30     	; 0x102a <free+0x5a>
    100c:	8d 91       	ld	r24, X+
    100e:	9c 91       	ld	r25, X
    1010:	11 97       	sbiw	r26, 0x01	; 1
    1012:	28 0f       	add	r18, r24
    1014:	39 1f       	adc	r19, r25
    1016:	2e 5f       	subi	r18, 0xFE	; 254
    1018:	3f 4f       	sbci	r19, 0xFF	; 255
    101a:	39 83       	std	Y+1, r19	; 0x01
    101c:	28 83       	st	Y, r18
    101e:	12 96       	adiw	r26, 0x02	; 2
    1020:	8d 91       	ld	r24, X+
    1022:	9c 91       	ld	r25, X
    1024:	13 97       	sbiw	r26, 0x03	; 3
    1026:	9b 83       	std	Y+3, r25	; 0x03
    1028:	8a 83       	std	Y+2, r24	; 0x02
    102a:	41 15       	cp	r20, r1
    102c:	51 05       	cpc	r21, r1
    102e:	71 f4       	brne	.+28     	; 0x104c <free+0x7c>
    1030:	d0 93 45 02 	sts	0x0245, r29
    1034:	c0 93 44 02 	sts	0x0244, r28
    1038:	20 c0       	rjmp	.+64     	; 0x107a <free+0xaa>
    103a:	12 96       	adiw	r26, 0x02	; 2
    103c:	8d 91       	ld	r24, X+
    103e:	9c 91       	ld	r25, X
    1040:	13 97       	sbiw	r26, 0x03	; 3
    1042:	ad 01       	movw	r20, r26
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	11 f0       	breq	.+4      	; 0x104c <free+0x7c>
    1048:	dc 01       	movw	r26, r24
    104a:	d3 cf       	rjmp	.-90     	; 0xff2 <free+0x22>
    104c:	fa 01       	movw	r30, r20
    104e:	d3 83       	std	Z+3, r29	; 0x03
    1050:	c2 83       	std	Z+2, r28	; 0x02
    1052:	21 91       	ld	r18, Z+
    1054:	31 91       	ld	r19, Z+
    1056:	e2 0f       	add	r30, r18
    1058:	f3 1f       	adc	r31, r19
    105a:	ce 17       	cp	r28, r30
    105c:	df 07       	cpc	r29, r31
    105e:	69 f4       	brne	.+26     	; 0x107a <free+0xaa>
    1060:	88 81       	ld	r24, Y
    1062:	99 81       	ldd	r25, Y+1	; 0x01
    1064:	28 0f       	add	r18, r24
    1066:	39 1f       	adc	r19, r25
    1068:	2e 5f       	subi	r18, 0xFE	; 254
    106a:	3f 4f       	sbci	r19, 0xFF	; 255
    106c:	fa 01       	movw	r30, r20
    106e:	31 83       	std	Z+1, r19	; 0x01
    1070:	20 83       	st	Z, r18
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	9b 81       	ldd	r25, Y+3	; 0x03
    1076:	93 83       	std	Z+3, r25	; 0x03
    1078:	82 83       	std	Z+2, r24	; 0x02
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	08 95       	ret

00001080 <_exit>:
    1080:	f8 94       	cli

00001082 <__stop_program>:
    1082:	ff cf       	rjmp	.-2      	; 0x1082 <__stop_program>
