
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00001bc2  00001c56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000145  0080011c  0080011c  00001c72  2**0
                  ALLOC
  3 .debug_aranges 00000268  00000000  00000000  00001c72  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004e1  00000000  00000000  00001eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001891  00000000  00000000  000023bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000861  00000000  00000000  00003c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000018d8  00000000  00000000  000044ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003b0  00000000  00000000  00005d88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000072c  00000000  00000000  00006138  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000220  00000000  00000000  00006864  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	ICR3 = ((double)F_CPU) / (8 * f_pwm) - 0.5; // FREKVENCIJA PWMA JE ~19kHz
}//END OF servo_init


void servo_position1(unsigned char dutyCycle)
{
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}


unsigned char CAN_CheckRX(unsigned char nodeID)
{
       2:	00 00       	nop

    return 0;
}

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>

	return ODOMETRY_SUCCESS;
}

void stop(int8_t type)
{
       6:	00 00       	nop
unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    timer_callback = callback;
}
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);

	UBRR0H = temp >> 8;
	UBRR0L = temp;
}
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 ad 08 	jmp	0x115a	; 0x115a <__vector_12>
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ad c0       	rjmp	.+346    	; 0x1a4 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 91 09 	jmp	0x1322	; 0x1322 <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e2 ec       	ldi	r30, 0xC2	; 194
      a8:	fb e1       	ldi	r31, 0x1B	; 27
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	ac 31       	cpi	r26, 0x1C	; 28
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	ac e1       	ldi	r26, 0x1C	; 28
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a1 36       	cpi	r26, 0x61	; 97
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
#include "system.h"
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
	gpio_register_pin(48, GPIO_DIRECTION_OUTPUT, false);
	gpio_register_pin(19, GPIO_DIRECTION_INPUT, false);
	
	
	uint8_t val = 0;*/
	system_init();
      da:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <system_init>
	
	//this is for testing the callback in greenside first position
	gpio_register_pin(48, GPIO_DIRECTION_OUTPUT,false);
      de:	80 e3       	ldi	r24, 0x30	; 48
      e0:	61 e0       	ldi	r22, 0x01	; 1
      e2:	40 e0       	ldi	r20, 0x00	; 0
      e4:	5c d3       	rcall	.+1720   	; 0x79e <gpio_register_pin>
    while (1) 
    {
		greenside();
      e6:	78 d4       	rcall	.+2288   	; 0x9d8 <greenside>
      e8:	fe cf       	rjmp	.-4      	; 0xe6 <main+0x14>

000000ea <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
      ea:	0f 93       	push	r16
      ec:	1f 93       	push	r17
      ee:	df 93       	push	r29
      f0:	cf 93       	push	r28
      f2:	00 d0       	rcall	.+0      	; 0xf4 <servo_init+0xa>
      f4:	cd b7       	in	r28, 0x3d	; 61
      f6:	de b7       	in	r29, 0x3e	; 62
      f8:	9a 83       	std	Y+2, r25	; 0x02
      fa:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= (1 << PINE3) | (1 << PINE4) | (1 << PINE5);
      fc:	ad e2       	ldi	r26, 0x2D	; 45
      fe:	b0 e0       	ldi	r27, 0x00	; 0
     100:	ed e2       	ldi	r30, 0x2D	; 45
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	80 81       	ld	r24, Z
     106:	88 63       	ori	r24, 0x38	; 56
     108:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     10a:	e4 e9       	ldi	r30, 0x94	; 148
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	11 82       	std	Z+1, r1	; 0x01
     110:	10 82       	st	Z, r1
	OCR3A = 0;
     112:	e8 e9       	ldi	r30, 0x98	; 152
     114:	f0 e0       	ldi	r31, 0x00	; 0
     116:	11 82       	std	Z+1, r1	; 0x01
     118:	10 82       	st	Z, r1
	OCR3B = 0;
     11a:	ea e9       	ldi	r30, 0x9A	; 154
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	11 82       	std	Z+1, r1	; 0x01
     120:	10 82       	st	Z, r1
	OCR3C = 0;
     122:	ec e9       	ldi	r30, 0x9C	; 156
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	11 82       	std	Z+1, r1	; 0x01
     128:	10 82       	st	Z, r1
	
	TCCR3A = (1 << COM3A1) | (1 << COM3A0) | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     12a:	e0 e9       	ldi	r30, 0x90	; 144
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	8e ef       	ldi	r24, 0xFE	; 254
     130:	80 83       	st	Z, r24
	TCCR3B = (1 << WGM32) | (1 << WGM33) | (1 << CS31); // PRESKALER = 1
     132:	e1 e9       	ldi	r30, 0x91	; 145
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	8a e1       	ldi	r24, 0x1A	; 26
     138:	80 83       	st	Z, r24
	ICR3 = ((double)F_CPU) / (8 * f_pwm) - 0.5; // FREKVENCIJA PWMA JE ~19kHz
     13a:	06 e9       	ldi	r16, 0x96	; 150
     13c:	10 e0       	ldi	r17, 0x00	; 0
     13e:	89 81       	ldd	r24, Y+1	; 0x01
     140:	9a 81       	ldd	r25, Y+2	; 0x02
     142:	88 0f       	add	r24, r24
     144:	99 1f       	adc	r25, r25
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	cc 01       	movw	r24, r24
     150:	a0 e0       	ldi	r26, 0x00	; 0
     152:	b0 e0       	ldi	r27, 0x00	; 0
     154:	bc 01       	movw	r22, r24
     156:	cd 01       	movw	r24, r26
     158:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__floatunsisf>
     15c:	9b 01       	movw	r18, r22
     15e:	ac 01       	movw	r20, r24
     160:	60 e8       	ldi	r22, 0x80	; 128
     162:	76 e9       	ldi	r23, 0x96	; 150
     164:	88 e1       	ldi	r24, 0x18	; 24
     166:	9b e4       	ldi	r25, 0x4B	; 75
     168:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__divsf3>
     16c:	dc 01       	movw	r26, r24
     16e:	cb 01       	movw	r24, r22
     170:	bc 01       	movw	r22, r24
     172:	cd 01       	movw	r24, r26
     174:	20 e0       	ldi	r18, 0x00	; 0
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	40 e0       	ldi	r20, 0x00	; 0
     17a:	5f e3       	ldi	r21, 0x3F	; 63
     17c:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__subsf3>
     180:	dc 01       	movw	r26, r24
     182:	cb 01       	movw	r24, r22
     184:	bc 01       	movw	r22, r24
     186:	cd 01       	movw	r24, r26
     188:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <__fixunssfsi>
     18c:	dc 01       	movw	r26, r24
     18e:	cb 01       	movw	r24, r22
     190:	f8 01       	movw	r30, r16
     192:	91 83       	std	Z+1, r25	; 0x01
     194:	80 83       	st	Z, r24
}//END OF servo_init
     196:	0f 90       	pop	r0
     198:	0f 90       	pop	r0
     19a:	cf 91       	pop	r28
     19c:	df 91       	pop	r29
     19e:	1f 91       	pop	r17
     1a0:	0f 91       	pop	r16
     1a2:	08 95       	ret

000001a4 <__vector_18>:
static volatile unsigned char rxCounter[10];
volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     1a4:	1f 92       	push	r1
     1a6:	0f 92       	push	r0
     1a8:	0f b6       	in	r0, 0x3f	; 63
     1aa:	0f 92       	push	r0
     1ac:	00 90 5b 00 	lds	r0, 0x005B
     1b0:	0f 92       	push	r0
     1b2:	11 24       	eor	r1, r1
     1b4:	2f 93       	push	r18
     1b6:	3f 93       	push	r19
     1b8:	4f 93       	push	r20
     1ba:	5f 93       	push	r21
     1bc:	8f 93       	push	r24
     1be:	9f 93       	push	r25
     1c0:	af 93       	push	r26
     1c2:	bf 93       	push	r27
     1c4:	ef 93       	push	r30
     1c6:	ff 93       	push	r31
     1c8:	df 93       	push	r29
     1ca:	cf 93       	push	r28
     1cc:	00 d0       	rcall	.+0      	; 0x1ce <__vector_18+0x2a>
     1ce:	00 d0       	rcall	.+0      	; 0x1d0 <__vector_18+0x2c>
     1d0:	cd b7       	in	r28, 0x3d	; 61
     1d2:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     1d4:	ed ee       	ldi	r30, 0xED	; 237
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     1dc:	1b 82       	std	Y+3, r1	; 0x03
     1de:	9c c0       	rjmp	.+312    	; 0x318 <__vector_18+0x174>
	{
		CANPAGE = ch << 4;
     1e0:	ed ee       	ldi	r30, 0xED	; 237
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	8b 81       	ldd	r24, Y+3	; 0x03
     1e6:	82 95       	swap	r24
     1e8:	80 7f       	andi	r24, 0xF0	; 240
     1ea:	80 83       	st	Z, r24

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     1ec:	ee ee       	ldi	r30, 0xEE	; 238
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	80 81       	ld	r24, Z
     1f2:	82 95       	swap	r24
     1f4:	86 95       	lsr	r24
     1f6:	87 70       	andi	r24, 0x07	; 7
     1f8:	88 2f       	mov	r24, r24
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	81 70       	andi	r24, 0x01	; 1
     1fe:	90 70       	andi	r25, 0x00	; 0
     200:	88 23       	and	r24, r24
     202:	09 f4       	brne	.+2      	; 0x206 <__vector_18+0x62>
     204:	6e c0       	rjmp	.+220    	; 0x2e2 <__vector_18+0x13e>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     206:	ef ee       	ldi	r30, 0xEF	; 239
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	80 e8       	ldi	r24, 0x80	; 128
     20c:	80 83       	st	Z, r24
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     20e:	ae ee       	ldi	r26, 0xEE	; 238
     210:	b0 e0       	ldi	r27, 0x00	; 0
     212:	ee ee       	ldi	r30, 0xEE	; 238
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	8f 7d       	andi	r24, 0xDF	; 223
     21a:	8c 93       	st	X, r24

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     21c:	e2 ef       	ldi	r30, 0xF2	; 242
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	82 95       	swap	r24
     224:	86 95       	lsr	r24
     226:	87 70       	andi	r24, 0x07	; 7
     228:	28 2f       	mov	r18, r24
     22a:	e3 ef       	ldi	r30, 0xF3	; 243
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	80 81       	ld	r24, Z
     230:	88 2f       	mov	r24, r24
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	88 0f       	add	r24, r24
     236:	99 1f       	adc	r25, r25
     238:	88 0f       	add	r24, r24
     23a:	99 1f       	adc	r25, r25
     23c:	88 0f       	add	r24, r24
     23e:	99 1f       	adc	r25, r25
     240:	82 2b       	or	r24, r18
     242:	8a 83       	std	Y+2, r24	; 0x02

			for(i = 0; i < 8; ++i)
     244:	19 82       	std	Y+1, r1	; 0x01
     246:	2a c0       	rjmp	.+84     	; 0x29c <__vector_18+0xf8>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     248:	8a 81       	ldd	r24, Y+2	; 0x02
     24a:	28 2f       	mov	r18, r24
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	82 1b       	sub	r24, r18
     254:	93 0b       	sbc	r25, r19
     256:	88 0f       	add	r24, r24
     258:	99 1f       	adc	r25, r25
     25a:	90 95       	com	r25
     25c:	81 95       	neg	r24
     25e:	9f 4f       	sbci	r25, 0xFF	; 255
     260:	fc 01       	movw	r30, r24
     262:	e4 5e       	subi	r30, 0xE4	; 228
     264:	fe 4f       	sbci	r31, 0xFE	; 254
     266:	40 81       	ld	r20, Z
     268:	51 81       	ldd	r21, Z+1	; 0x01
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	88 2f       	mov	r24, r24
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	fc 01       	movw	r30, r24
     274:	e0 5d       	subi	r30, 0xD0	; 208
     276:	fe 4f       	sbci	r31, 0xFE	; 254
     278:	80 81       	ld	r24, Z
     27a:	28 2f       	mov	r18, r24
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	89 81       	ldd	r24, Y+1	; 0x01
     280:	88 2f       	mov	r24, r24
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	82 0f       	add	r24, r18
     286:	93 1f       	adc	r25, r19
     288:	da 01       	movw	r26, r20
     28a:	a8 0f       	add	r26, r24
     28c:	b9 1f       	adc	r27, r25
     28e:	ea ef       	ldi	r30, 0xFA	; 250
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	80 81       	ld	r24, Z
     294:	8c 93       	st	X, r24
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	8f 5f       	subi	r24, 0xFF	; 255
     29a:	89 83       	std	Y+1, r24	; 0x01
     29c:	89 81       	ldd	r24, Y+1	; 0x01
     29e:	88 30       	cpi	r24, 0x08	; 8
     2a0:	98 f2       	brcs	.-90     	; 0x248 <__vector_18+0xa4>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     2a2:	8a 81       	ldd	r24, Y+2	; 0x02
     2a4:	88 2f       	mov	r24, r24
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	fc 01       	movw	r30, r24
     2ac:	e0 5d       	subi	r30, 0xD0	; 208
     2ae:	fe 4f       	sbci	r31, 0xFE	; 254
     2b0:	80 81       	ld	r24, Z
     2b2:	8f 5f       	subi	r24, 0xFF	; 255
     2b4:	80 83       	st	Z, r24
     2b6:	80 81       	ld	r24, Z
     2b8:	85 30       	cpi	r24, 0x05	; 5
     2ba:	41 f4       	brne	.+16     	; 0x2cc <__vector_18+0x128>
				*(rxWrIndex + ide - 1) = 0;
     2bc:	8a 81       	ldd	r24, Y+2	; 0x02
     2be:	88 2f       	mov	r24, r24
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	01 97       	sbiw	r24, 0x01	; 1
     2c4:	fc 01       	movw	r30, r24
     2c6:	e0 5d       	subi	r30, 0xD0	; 208
     2c8:	fe 4f       	sbci	r31, 0xFE	; 254
     2ca:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     2cc:	8a 81       	ldd	r24, Y+2	; 0x02
     2ce:	88 2f       	mov	r24, r24
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	01 97       	sbiw	r24, 0x01	; 1
     2d4:	fc 01       	movw	r30, r24
     2d6:	ec 5b       	subi	r30, 0xBC	; 188
     2d8:	fe 4f       	sbci	r31, 0xFE	; 254
     2da:	80 81       	ld	r24, Z
     2dc:	8f 5f       	subi	r24, 0xFF	; 255
     2de:	80 83       	st	Z, r24
     2e0:	1f c0       	rjmp	.+62     	; 0x320 <__vector_18+0x17c>

			break;
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     2e2:	ee ee       	ldi	r30, 0xEE	; 238
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	80 81       	ld	r24, Z
     2e8:	82 95       	swap	r24
     2ea:	86 95       	lsr	r24
     2ec:	86 95       	lsr	r24
     2ee:	83 70       	andi	r24, 0x03	; 3
     2f0:	88 2f       	mov	r24, r24
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	81 70       	andi	r24, 0x01	; 1
     2f6:	90 70       	andi	r25, 0x00	; 0
     2f8:	88 23       	and	r24, r24
     2fa:	59 f0       	breq	.+22     	; 0x312 <__vector_18+0x16e>
		{
			CANCDMOB = 0; // disable mob
     2fc:	ef ee       	ldi	r30, 0xEF	; 239
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     302:	ae ee       	ldi	r26, 0xEE	; 238
     304:	b0 e0       	ldi	r27, 0x00	; 0
     306:	ee ee       	ldi	r30, 0xEE	; 238
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	80 81       	ld	r24, Z
     30c:	8f 7b       	andi	r24, 0xBF	; 191
     30e:	8c 93       	st	X, r24
     310:	07 c0       	rjmp	.+14     	; 0x320 <__vector_18+0x17c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     312:	8b 81       	ldd	r24, Y+3	; 0x03
     314:	8f 5f       	subi	r24, 0xFF	; 255
     316:	8b 83       	std	Y+3, r24	; 0x03
     318:	8b 81       	ldd	r24, Y+3	; 0x03
     31a:	8f 30       	cpi	r24, 0x0F	; 15
     31c:	08 f4       	brcc	.+2      	; 0x320 <__vector_18+0x17c>
     31e:	60 cf       	rjmp	.-320    	; 0x1e0 <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     320:	ed ee       	ldi	r30, 0xED	; 237
     322:	f0 e0       	ldi	r31, 0x00	; 0
     324:	8c 81       	ldd	r24, Y+4	; 0x04
     326:	80 83       	st	Z, r24
	CANGIT = CANGIT; // zato sto tako treba.
     328:	aa ed       	ldi	r26, 0xDA	; 218
     32a:	b0 e0       	ldi	r27, 0x00	; 0
     32c:	ea ed       	ldi	r30, 0xDA	; 218
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	80 81       	ld	r24, Z
     332:	8c 93       	st	X, r24
}
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	cf 91       	pop	r28
     33e:	df 91       	pop	r29
     340:	ff 91       	pop	r31
     342:	ef 91       	pop	r30
     344:	bf 91       	pop	r27
     346:	af 91       	pop	r26
     348:	9f 91       	pop	r25
     34a:	8f 91       	pop	r24
     34c:	5f 91       	pop	r21
     34e:	4f 91       	pop	r20
     350:	3f 91       	pop	r19
     352:	2f 91       	pop	r18
     354:	0f 90       	pop	r0
     356:	00 92 5b 00 	sts	0x005B, r0
     35a:	0f 90       	pop	r0
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	0f 90       	pop	r0
     360:	1f 90       	pop	r1
     362:	18 95       	reti

00000364 <CAN_InitModule>:


static void CAN_InitModule(void)
{
     364:	df 93       	push	r29
     366:	cf 93       	push	r28
     368:	00 d0       	rcall	.+0      	; 0x36a <CAN_InitModule+0x6>
     36a:	cd b7       	in	r28, 0x3d	; 61
     36c:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     36e:	e8 ed       	ldi	r30, 0xD8	; 216
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	80 83       	st	Z, r24

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     376:	1a 82       	std	Y+2, r1	; 0x02
     378:	32 c0       	rjmp	.+100    	; 0x3de <CAN_InitModule+0x7a>
	{
		CANPAGE = ch << 4;
     37a:	ed ee       	ldi	r30, 0xED	; 237
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	8a 81       	ldd	r24, Y+2	; 0x02
     380:	82 95       	swap	r24
     382:	80 7f       	andi	r24, 0xF0	; 240
     384:	80 83       	st	Z, r24

		CANSTMOB = 0;
     386:	ee ee       	ldi	r30, 0xEE	; 238
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	10 82       	st	Z, r1
		CANCDMOB = 0;
     38c:	ef ee       	ldi	r30, 0xEF	; 239
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	10 82       	st	Z, r1

		CANIDT1 = 0;
     392:	e3 ef       	ldi	r30, 0xF3	; 243
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	10 82       	st	Z, r1
		CANIDT2 = 0;
     398:	e2 ef       	ldi	r30, 0xF2	; 242
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	10 82       	st	Z, r1
		CANIDT3 = 0;
     39e:	e1 ef       	ldi	r30, 0xF1	; 241
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	10 82       	st	Z, r1
		CANIDT4 = 0;
     3a4:	e0 ef       	ldi	r30, 0xF0	; 240
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	10 82       	st	Z, r1
		CANIDM1 = 0;
     3aa:	e7 ef       	ldi	r30, 0xF7	; 247
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	10 82       	st	Z, r1
		CANIDM2 = 0;
     3b0:	e6 ef       	ldi	r30, 0xF6	; 246
     3b2:	f0 e0       	ldi	r31, 0x00	; 0
     3b4:	10 82       	st	Z, r1
		CANIDM3 = 0;
     3b6:	e5 ef       	ldi	r30, 0xF5	; 245
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	10 82       	st	Z, r1
		CANIDM4 = 0;
     3bc:	e4 ef       	ldi	r30, 0xF4	; 244
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     3c2:	19 82       	std	Y+1, r1	; 0x01
     3c4:	06 c0       	rjmp	.+12     	; 0x3d2 <CAN_InitModule+0x6e>
			CANMSG = 0;
     3c6:	ea ef       	ldi	r30, 0xFA	; 250
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     3cc:	89 81       	ldd	r24, Y+1	; 0x01
     3ce:	8f 5f       	subi	r24, 0xFF	; 255
     3d0:	89 83       	std	Y+1, r24	; 0x01
     3d2:	89 81       	ldd	r24, Y+1	; 0x01
     3d4:	88 30       	cpi	r24, 0x08	; 8
     3d6:	b8 f3       	brcs	.-18     	; 0x3c6 <CAN_InitModule+0x62>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     3d8:	8a 81       	ldd	r24, Y+2	; 0x02
     3da:	8f 5f       	subi	r24, 0xFF	; 255
     3dc:	8a 83       	std	Y+2, r24	; 0x02
     3de:	8a 81       	ldd	r24, Y+2	; 0x02
     3e0:	8f 30       	cpi	r24, 0x0F	; 15
     3e2:	58 f2       	brcs	.-106    	; 0x37a <CAN_InitModule+0x16>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     3e4:	e8 ed       	ldi	r30, 0xD8	; 216
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	82 e0       	ldi	r24, 0x02	; 2
     3ea:	80 83       	st	Z, r24

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     3ec:	e2 ee       	ldi	r30, 0xE2	; 226
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 83       	st	Z, r24
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     3f4:	e3 ee       	ldi	r30, 0xE3	; 227
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	88 e0       	ldi	r24, 0x08	; 8
     3fa:	80 83       	st	Z, r24
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     3fc:	e4 ee       	ldi	r30, 0xE4	; 228
     3fe:	f0 e0       	ldi	r31, 0x00	; 0
     400:	8e e5       	ldi	r24, 0x5E	; 94
     402:	80 83       	st	Z, r24

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     404:	e5 ee       	ldi	r30, 0xE5	; 229
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     40a:	eb ed       	ldi	r30, 0xDB	; 219
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	80 eb       	ldi	r24, 0xB0	; 176
     410:	80 83       	st	Z, r24
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     412:	ef ed       	ldi	r30, 0xDF	; 223
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	8f e7       	ldi	r24, 0x7F	; 127
     418:	80 83       	st	Z, r24
	CANIE2 = 0xFF;
     41a:	ee ed       	ldi	r30, 0xDE	; 222
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	8f ef       	ldi	r24, 0xFF	; 255
     420:	80 83       	st	Z, r24
	sei();
     422:	78 94       	sei
}
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	cf 91       	pop	r28
     42a:	df 91       	pop	r29
     42c:	08 95       	ret

0000042e <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
     42e:	df 93       	push	r29
     430:	cf 93       	push	r28
     432:	00 d0       	rcall	.+0      	; 0x434 <CAN_InitRxMob+0x6>
     434:	00 d0       	rcall	.+0      	; 0x436 <CAN_InitRxMob+0x8>
     436:	0f 92       	push	r0
     438:	cd b7       	in	r28, 0x3d	; 61
     43a:	de b7       	in	r29, 0x3e	; 62
     43c:	9c 83       	std	Y+4, r25	; 0x04
     43e:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     440:	ed ee       	ldi	r30, 0xED	; 237
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	80 81       	ld	r24, Z
     446:	89 83       	std	Y+1, r24	; 0x01

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     448:	e9 ed       	ldi	r30, 0xD9	; 217
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	80 81       	ld	r24, Z
     44e:	82 95       	swap	r24
     450:	8f 70       	andi	r24, 0x0F	; 15
     452:	88 2f       	mov	r24, r24
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	81 70       	andi	r24, 0x01	; 1
     458:	90 70       	andi	r25, 0x00	; 0
     45a:	88 23       	and	r24, r24
     45c:	a9 f7       	brne	.-22     	; 0x448 <CAN_InitRxMob+0x1a>
     45e:	e9 ed       	ldi	r30, 0xD9	; 217
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	80 81       	ld	r24, Z
     464:	86 95       	lsr	r24
     466:	86 95       	lsr	r24
     468:	86 95       	lsr	r24
     46a:	88 2f       	mov	r24, r24
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	81 70       	andi	r24, 0x01	; 1
     470:	90 70       	andi	r25, 0x00	; 0
     472:	88 23       	and	r24, r24
     474:	49 f7       	brne	.-46     	; 0x448 <CAN_InitRxMob+0x1a>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     476:	1a 82       	std	Y+2, r1	; 0x02
     478:	3f c0       	rjmp	.+126    	; 0x4f8 <CAN_InitRxMob+0xca>
	{
		CANPAGE = ch << 4;
     47a:	ed ee       	ldi	r30, 0xED	; 237
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	8a 81       	ldd	r24, Y+2	; 0x02
     480:	82 95       	swap	r24
     482:	80 7f       	andi	r24, 0xF0	; 240
     484:	80 83       	st	Z, r24

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     486:	ef ee       	ldi	r30, 0xEF	; 239
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	82 95       	swap	r24
     48e:	86 95       	lsr	r24
     490:	86 95       	lsr	r24
     492:	83 70       	andi	r24, 0x03	; 3
     494:	88 23       	and	r24, r24
     496:	69 f5       	brne	.+90     	; 0x4f2 <CAN_InitRxMob+0xc4>
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     498:	ef ee       	ldi	r30, 0xEF	; 239
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	8f e0       	ldi	r24, 0x0F	; 15
     49e:	80 83       	st	Z, r24

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     4a0:	e3 ef       	ldi	r30, 0xF3	; 243
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	8b 81       	ldd	r24, Y+3	; 0x03
     4a6:	9c 81       	ldd	r25, Y+4	; 0x04
     4a8:	90 70       	andi	r25, 0x00	; 0
     4aa:	96 95       	lsr	r25
     4ac:	87 95       	ror	r24
     4ae:	96 95       	lsr	r25
     4b0:	87 95       	ror	r24
     4b2:	96 95       	lsr	r25
     4b4:	87 95       	ror	r24
     4b6:	80 83       	st	Z, r24
		CANIDT2 = (ide & 0x00FF) << 5;
     4b8:	e2 ef       	ldi	r30, 0xF2	; 242
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	8b 81       	ldd	r24, Y+3	; 0x03
     4be:	82 95       	swap	r24
     4c0:	88 0f       	add	r24, r24
     4c2:	80 7e       	andi	r24, 0xE0	; 224
     4c4:	80 83       	st	Z, r24

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     4c6:	e6 ef       	ldi	r30, 0xF6	; 246
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	80 ee       	ldi	r24, 0xE0	; 224
     4cc:	80 83       	st	Z, r24
		CANIDM1 = 0xFF;
     4ce:	e7 ef       	ldi	r30, 0xF7	; 247
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	8f ef       	ldi	r24, 0xFF	; 255
     4d4:	80 83       	st	Z, r24

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     4d6:	af ee       	ldi	r26, 0xEF	; 239
     4d8:	b0 e0       	ldi	r27, 0x00	; 0
     4da:	ef ee       	ldi	r30, 0xEF	; 239
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	80 81       	ld	r24, Z
     4e0:	80 68       	ori	r24, 0x80	; 128
     4e2:	8c 93       	st	X, r24

		CANPAGE = tempPage;
     4e4:	ed ee       	ldi	r30, 0xED	; 237
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	80 83       	st	Z, r24

		return 1;
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	8d 83       	std	Y+5, r24	; 0x05
     4f0:	0c c0       	rjmp	.+24     	; 0x50a <CAN_InitRxMob+0xdc>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     4f2:	8a 81       	ldd	r24, Y+2	; 0x02
     4f4:	8f 5f       	subi	r24, 0xFF	; 255
     4f6:	8a 83       	std	Y+2, r24	; 0x02
     4f8:	8a 81       	ldd	r24, Y+2	; 0x02
     4fa:	8f 30       	cpi	r24, 0x0F	; 15
     4fc:	08 f4       	brcc	.+2      	; 0x500 <CAN_InitRxMob+0xd2>
     4fe:	bd cf       	rjmp	.-134    	; 0x47a <CAN_InitRxMob+0x4c>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     500:	ed ee       	ldi	r30, 0xED	; 237
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	80 83       	st	Z, r24

	return 0;
     508:	1d 82       	std	Y+5, r1	; 0x05
     50a:	8d 81       	ldd	r24, Y+5	; 0x05
}
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	cf 91       	pop	r28
     518:	df 91       	pop	r29
     51a:	08 95       	ret

0000051c <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
     51c:	0f 93       	push	r16
     51e:	1f 93       	push	r17
     520:	df 93       	push	r29
     522:	cf 93       	push	r28
     524:	00 d0       	rcall	.+0      	; 0x526 <CAN_Init+0xa>
     526:	cd b7       	in	r28, 0x3d	; 61
     528:	de b7       	in	r29, 0x3e	; 62
     52a:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
     52c:	1b df       	rcall	.-458    	; 0x364 <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     52e:	19 82       	std	Y+1, r1	; 0x01
     530:	36 c0       	rjmp	.+108    	; 0x59e <CAN_Init+0x82>
	{
		CAN_InitRxMob(i + 1);
     532:	89 81       	ldd	r24, Y+1	; 0x01
     534:	88 2f       	mov	r24, r24
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	79 df       	rcall	.-270    	; 0x42e <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     53c:	89 81       	ldd	r24, Y+1	; 0x01
     53e:	88 2f       	mov	r24, r24
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	88 0f       	add	r24, r24
     544:	99 1f       	adc	r25, r25
     546:	8c 01       	movw	r16, r24
     548:	04 5e       	subi	r16, 0xE4	; 228
     54a:	1e 4f       	sbci	r17, 0xFE	; 254
     54c:	85 e0       	ldi	r24, 0x05	; 5
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	61 e0       	ldi	r22, 0x01	; 1
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	0e 94 b9 0c 	call	0x1972	; 0x1972 <calloc>
     558:	f8 01       	movw	r30, r16
     55a:	91 83       	std	Z+1, r25	; 0x01
     55c:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     55e:	89 81       	ldd	r24, Y+1	; 0x01
     560:	48 2f       	mov	r20, r24
     562:	50 e0       	ldi	r21, 0x00	; 0
     564:	89 81       	ldd	r24, Y+1	; 0x01
     566:	28 2f       	mov	r18, r24
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	89 81       	ldd	r24, Y+1	; 0x01
     56c:	88 2f       	mov	r24, r24
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	fc 01       	movw	r30, r24
     572:	ec 5b       	subi	r30, 0xBC	; 188
     574:	fe 4f       	sbci	r31, 0xFE	; 254
     576:	10 82       	st	Z, r1
     578:	fc 01       	movw	r30, r24
     57a:	ec 5b       	subi	r30, 0xBC	; 188
     57c:	fe 4f       	sbci	r31, 0xFE	; 254
     57e:	80 81       	ld	r24, Z
     580:	f9 01       	movw	r30, r18
     582:	e6 5c       	subi	r30, 0xC6	; 198
     584:	fe 4f       	sbci	r31, 0xFE	; 254
     586:	80 83       	st	Z, r24
     588:	f9 01       	movw	r30, r18
     58a:	e6 5c       	subi	r30, 0xC6	; 198
     58c:	fe 4f       	sbci	r31, 0xFE	; 254
     58e:	80 81       	ld	r24, Z
     590:	fa 01       	movw	r30, r20
     592:	e0 5d       	subi	r30, 0xD0	; 208
     594:	fe 4f       	sbci	r31, 0xFE	; 254
     596:	80 83       	st	Z, r24

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     598:	89 81       	ldd	r24, Y+1	; 0x01
     59a:	8f 5f       	subi	r24, 0xFF	; 255
     59c:	89 83       	std	Y+1, r24	; 0x01
     59e:	99 81       	ldd	r25, Y+1	; 0x01
     5a0:	8a 81       	ldd	r24, Y+2	; 0x02
     5a2:	98 17       	cp	r25, r24
     5a4:	30 f2       	brcs	.-116    	; 0x532 <CAN_Init+0x16>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	cf 91       	pop	r28
     5ac:	df 91       	pop	r29
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	08 95       	ret

000005b4 <CAN_Read>:
	return rxCounter[nodeID - 1];
}


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
     5b4:	df 93       	push	r29
     5b6:	cf 93       	push	r28
     5b8:	00 d0       	rcall	.+0      	; 0x5ba <CAN_Read+0x6>
     5ba:	00 d0       	rcall	.+0      	; 0x5bc <CAN_Read+0x8>
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
     5c0:	9b 83       	std	Y+3, r25	; 0x03
     5c2:	8a 83       	std	Y+2, r24	; 0x02
     5c4:	6c 83       	std	Y+4, r22	; 0x04
    unsigned char i;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
     5c6:	8c 81       	ldd	r24, Y+4	; 0x04
     5c8:	88 2f       	mov	r24, r24
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	01 97       	sbiw	r24, 0x01	; 1
     5ce:	fc 01       	movw	r30, r24
     5d0:	ec 5b       	subi	r30, 0xBC	; 188
     5d2:	fe 4f       	sbci	r31, 0xFE	; 254
     5d4:	80 81       	ld	r24, Z
     5d6:	88 23       	and	r24, r24
     5d8:	b1 f3       	breq	.-20     	; 0x5c6 <CAN_Read+0x12>

	for(i = 0; i < 8; ++i)
     5da:	19 82       	std	Y+1, r1	; 0x01
     5dc:	30 c0       	rjmp	.+96     	; 0x63e <CAN_Read+0x8a>
		*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
     5de:	89 81       	ldd	r24, Y+1	; 0x01
     5e0:	28 2f       	mov	r18, r24
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	8a 81       	ldd	r24, Y+2	; 0x02
     5e6:	9b 81       	ldd	r25, Y+3	; 0x03
     5e8:	dc 01       	movw	r26, r24
     5ea:	a2 0f       	add	r26, r18
     5ec:	b3 1f       	adc	r27, r19
     5ee:	8c 81       	ldd	r24, Y+4	; 0x04
     5f0:	28 2f       	mov	r18, r24
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	82 1b       	sub	r24, r18
     5fa:	93 0b       	sbc	r25, r19
     5fc:	88 0f       	add	r24, r24
     5fe:	99 1f       	adc	r25, r25
     600:	90 95       	com	r25
     602:	81 95       	neg	r24
     604:	9f 4f       	sbci	r25, 0xFF	; 255
     606:	fc 01       	movw	r30, r24
     608:	e4 5e       	subi	r30, 0xE4	; 228
     60a:	fe 4f       	sbci	r31, 0xFE	; 254
     60c:	40 81       	ld	r20, Z
     60e:	51 81       	ldd	r21, Z+1	; 0x01
     610:	8c 81       	ldd	r24, Y+4	; 0x04
     612:	88 2f       	mov	r24, r24
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	01 97       	sbiw	r24, 0x01	; 1
     618:	fc 01       	movw	r30, r24
     61a:	e6 5c       	subi	r30, 0xC6	; 198
     61c:	fe 4f       	sbci	r31, 0xFE	; 254
     61e:	80 81       	ld	r24, Z
     620:	28 2f       	mov	r18, r24
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	89 81       	ldd	r24, Y+1	; 0x01
     626:	88 2f       	mov	r24, r24
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	82 0f       	add	r24, r18
     62c:	93 1f       	adc	r25, r19
     62e:	fa 01       	movw	r30, r20
     630:	e8 0f       	add	r30, r24
     632:	f9 1f       	adc	r31, r25
     634:	80 81       	ld	r24, Z
     636:	8c 93       	st	X, r24
{
    unsigned char i;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
     638:	89 81       	ldd	r24, Y+1	; 0x01
     63a:	8f 5f       	subi	r24, 0xFF	; 255
     63c:	89 83       	std	Y+1, r24	; 0x01
     63e:	89 81       	ldd	r24, Y+1	; 0x01
     640:	88 30       	cpi	r24, 0x08	; 8
     642:	68 f2       	brcs	.-102    	; 0x5de <CAN_Read+0x2a>
		*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
     644:	8c 81       	ldd	r24, Y+4	; 0x04
     646:	88 2f       	mov	r24, r24
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	01 97       	sbiw	r24, 0x01	; 1
     64c:	fc 01       	movw	r30, r24
     64e:	e6 5c       	subi	r30, 0xC6	; 198
     650:	fe 4f       	sbci	r31, 0xFE	; 254
     652:	80 81       	ld	r24, Z
     654:	8f 5f       	subi	r24, 0xFF	; 255
     656:	80 83       	st	Z, r24
     658:	80 81       	ld	r24, Z
     65a:	85 30       	cpi	r24, 0x05	; 5
     65c:	41 f4       	brne	.+16     	; 0x66e <CAN_Read+0xba>
		*(rxRdIndex + sendingNodeID - 1) = 0;
     65e:	8c 81       	ldd	r24, Y+4	; 0x04
     660:	88 2f       	mov	r24, r24
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	01 97       	sbiw	r24, 0x01	; 1
     666:	fc 01       	movw	r30, r24
     668:	e6 5c       	subi	r30, 0xC6	; 198
     66a:	fe 4f       	sbci	r31, 0xFE	; 254
     66c:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
     66e:	8c 81       	ldd	r24, Y+4	; 0x04
     670:	88 2f       	mov	r24, r24
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	9c 01       	movw	r18, r24
     676:	21 50       	subi	r18, 0x01	; 1
     678:	30 40       	sbci	r19, 0x00	; 0
     67a:	f9 01       	movw	r30, r18
     67c:	ec 5b       	subi	r30, 0xBC	; 188
     67e:	fe 4f       	sbci	r31, 0xFE	; 254
     680:	80 81       	ld	r24, Z
     682:	81 50       	subi	r24, 0x01	; 1
     684:	f9 01       	movw	r30, r18
     686:	ec 5b       	subi	r30, 0xBC	; 188
     688:	fe 4f       	sbci	r31, 0xFE	; 254
     68a:	80 83       	st	Z, r24

	return 0;
     68c:	80 e0       	ldi	r24, 0x00	; 0
}
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	cf 91       	pop	r28
     698:	df 91       	pop	r29
     69a:	08 95       	ret

0000069c <CAN_Write>:


char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
     69c:	df 93       	push	r29
     69e:	cf 93       	push	r28
     6a0:	cd b7       	in	r28, 0x3d	; 61
     6a2:	de b7       	in	r29, 0x3e	; 62
     6a4:	27 97       	sbiw	r28, 0x07	; 7
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	f8 94       	cli
     6aa:	de bf       	out	0x3e, r29	; 62
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	cd bf       	out	0x3d, r28	; 61
     6b0:	9d 83       	std	Y+5, r25	; 0x05
     6b2:	8c 83       	std	Y+4, r24	; 0x04
     6b4:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     6b6:	e9 ed       	ldi	r30, 0xD9	; 217
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	80 81       	ld	r24, Z
     6bc:	82 95       	swap	r24
     6be:	8f 70       	andi	r24, 0x0F	; 15
     6c0:	88 2f       	mov	r24, r24
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	81 70       	andi	r24, 0x01	; 1
     6c6:	90 70       	andi	r25, 0x00	; 0
     6c8:	88 23       	and	r24, r24
     6ca:	a9 f7       	brne	.-22     	; 0x6b6 <CAN_Write+0x1a>
     6cc:	e9 ed       	ldi	r30, 0xD9	; 217
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	80 81       	ld	r24, Z
     6d2:	86 95       	lsr	r24
     6d4:	86 95       	lsr	r24
     6d6:	86 95       	lsr	r24
     6d8:	88 2f       	mov	r24, r24
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	81 70       	andi	r24, 0x01	; 1
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	88 23       	and	r24, r24
     6e2:	49 f7       	brne	.-46     	; 0x6b6 <CAN_Write+0x1a>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     6e4:	ed ee       	ldi	r30, 0xED	; 237
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	80 81       	ld	r24, Z
     6ea:	89 83       	std	Y+1, r24	; 0x01

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     6ec:	1a 82       	std	Y+2, r1	; 0x02
     6ee:	12 c0       	rjmp	.+36     	; 0x714 <CAN_Write+0x78>
	{
		CANPAGE = ch << 4;
     6f0:	ed ee       	ldi	r30, 0xED	; 237
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	8a 81       	ldd	r24, Y+2	; 0x02
     6f6:	82 95       	swap	r24
     6f8:	80 7f       	andi	r24, 0xF0	; 240
     6fa:	80 83       	st	Z, r24

		if(!(CANCDMOB >> 6))
     6fc:	ef ee       	ldi	r30, 0xEF	; 239
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	80 81       	ld	r24, Z
     702:	82 95       	swap	r24
     704:	86 95       	lsr	r24
     706:	86 95       	lsr	r24
     708:	83 70       	andi	r24, 0x03	; 3
     70a:	88 23       	and	r24, r24
     70c:	31 f0       	breq	.+12     	; 0x71a <CAN_Write+0x7e>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     70e:	8a 81       	ldd	r24, Y+2	; 0x02
     710:	8f 5f       	subi	r24, 0xFF	; 255
     712:	8a 83       	std	Y+2, r24	; 0x02
     714:	8a 81       	ldd	r24, Y+2	; 0x02
     716:	8f 30       	cpi	r24, 0x0F	; 15
     718:	58 f3       	brcs	.-42     	; 0x6f0 <CAN_Write+0x54>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
     71a:	8a 81       	ldd	r24, Y+2	; 0x02
     71c:	8f 30       	cpi	r24, 0x0F	; 15
     71e:	19 f4       	brne	.+6      	; 0x726 <CAN_Write+0x8a>
		return -1;
     720:	8f ef       	ldi	r24, 0xFF	; 255
     722:	8f 83       	std	Y+7, r24	; 0x07
     724:	32 c0       	rjmp	.+100    	; 0x78a <CAN_Write+0xee>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
     726:	e2 ef       	ldi	r30, 0xF2	; 242
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	8e 81       	ldd	r24, Y+6	; 0x06
     72c:	82 95       	swap	r24
     72e:	88 0f       	add	r24, r24
     730:	80 7e       	andi	r24, 0xE0	; 224
     732:	80 83       	st	Z, r24
	CANIDT1 = (receivingNodeAddress) >> 3;
     734:	e3 ef       	ldi	r30, 0xF3	; 243
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	8e 81       	ldd	r24, Y+6	; 0x06
     73a:	86 95       	lsr	r24
     73c:	86 95       	lsr	r24
     73e:	86 95       	lsr	r24
     740:	80 83       	st	Z, r24

	// DLC = 8
	CANCDMOB = 8;
     742:	ef ee       	ldi	r30, 0xEF	; 239
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	88 e0       	ldi	r24, 0x08	; 8
     748:	80 83       	st	Z, r24

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     74a:	1b 82       	std	Y+3, r1	; 0x03
     74c:	0f c0       	rjmp	.+30     	; 0x76c <CAN_Write+0xd0>
		CANMSG = data[i];
     74e:	aa ef       	ldi	r26, 0xFA	; 250
     750:	b0 e0       	ldi	r27, 0x00	; 0
     752:	8b 81       	ldd	r24, Y+3	; 0x03
     754:	28 2f       	mov	r18, r24
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	8c 81       	ldd	r24, Y+4	; 0x04
     75a:	9d 81       	ldd	r25, Y+5	; 0x05
     75c:	fc 01       	movw	r30, r24
     75e:	e2 0f       	add	r30, r18
     760:	f3 1f       	adc	r31, r19
     762:	80 81       	ld	r24, Z
     764:	8c 93       	st	X, r24

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     766:	8b 81       	ldd	r24, Y+3	; 0x03
     768:	8f 5f       	subi	r24, 0xFF	; 255
     76a:	8b 83       	std	Y+3, r24	; 0x03
     76c:	8b 81       	ldd	r24, Y+3	; 0x03
     76e:	88 30       	cpi	r24, 0x08	; 8
     770:	70 f3       	brcs	.-36     	; 0x74e <CAN_Write+0xb2>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
     772:	af ee       	ldi	r26, 0xEF	; 239
     774:	b0 e0       	ldi	r27, 0x00	; 0
     776:	ef ee       	ldi	r30, 0xEF	; 239
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	80 81       	ld	r24, Z
     77c:	80 64       	ori	r24, 0x40	; 64
     77e:	8c 93       	st	X, r24

	CANPAGE = tempPage;
     780:	ed ee       	ldi	r30, 0xED	; 237
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	89 81       	ldd	r24, Y+1	; 0x01
     786:	80 83       	st	Z, r24

	return 0;
     788:	1f 82       	std	Y+7, r1	; 0x07
     78a:	8f 81       	ldd	r24, Y+7	; 0x07
}
     78c:	27 96       	adiw	r28, 0x07	; 7
     78e:	0f b6       	in	r0, 0x3f	; 63
     790:	f8 94       	cli
     792:	de bf       	out	0x3e, r29	; 62
     794:	0f be       	out	0x3f, r0	; 63
     796:	cd bf       	out	0x3d, r28	; 61
     798:	cf 91       	pop	r28
     79a:	df 91       	pop	r29
     79c:	08 95       	ret

0000079e <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
     79e:	df 93       	push	r29
     7a0:	cf 93       	push	r28
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62
     7a6:	2d 97       	sbiw	r28, 0x0d	; 13
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	de bf       	out	0x3e, r29	; 62
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	cd bf       	out	0x3d, r28	; 61
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	6a 87       	std	Y+10, r22	; 0x0a
     7b6:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     7b8:	80 91 08 01 	lds	r24, 0x0108
     7bc:	90 91 09 01 	lds	r25, 0x0109
     7c0:	9c 83       	std	Y+4, r25	; 0x04
     7c2:	8b 83       	std	Y+3, r24	; 0x03
     7c4:	8b 81       	ldd	r24, Y+3	; 0x03
     7c6:	9c 81       	ldd	r25, Y+4	; 0x04
     7c8:	06 97       	sbiw	r24, 0x06	; 6
     7ca:	98 87       	std	Y+8, r25	; 0x08
     7cc:	8f 83       	std	Y+7, r24	; 0x07
     7ce:	14 c0       	rjmp	.+40     	; 0x7f8 <gpio_register_pin+0x5a>
    {
        if(input->pin == pin)
     7d0:	ef 81       	ldd	r30, Y+7	; 0x07
     7d2:	f8 85       	ldd	r31, Y+8	; 0x08
     7d4:	90 81       	ld	r25, Z
     7d6:	89 85       	ldd	r24, Y+9	; 0x09
     7d8:	98 17       	cp	r25, r24
     7da:	19 f4       	brne	.+6      	; 0x7e2 <gpio_register_pin+0x44>
            return 1;
     7dc:	21 e0       	ldi	r18, 0x01	; 1
     7de:	2c 87       	std	Y+12, r18	; 0x0c
     7e0:	a6 c0       	rjmp	.+332    	; 0x92e <gpio_register_pin+0x190>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     7e2:	ef 81       	ldd	r30, Y+7	; 0x07
     7e4:	f8 85       	ldd	r31, Y+8	; 0x08
     7e6:	80 85       	ldd	r24, Z+8	; 0x08
     7e8:	91 85       	ldd	r25, Z+9	; 0x09
     7ea:	9a 83       	std	Y+2, r25	; 0x02
     7ec:	89 83       	std	Y+1, r24	; 0x01
     7ee:	89 81       	ldd	r24, Y+1	; 0x01
     7f0:	9a 81       	ldd	r25, Y+2	; 0x02
     7f2:	06 97       	sbiw	r24, 0x06	; 6
     7f4:	98 87       	std	Y+8, r25	; 0x08
     7f6:	8f 83       	std	Y+7, r24	; 0x07
     7f8:	8f 81       	ldd	r24, Y+7	; 0x07
     7fa:	98 85       	ldd	r25, Y+8	; 0x08
     7fc:	06 96       	adiw	r24, 0x06	; 6
     7fe:	21 e0       	ldi	r18, 0x01	; 1
     800:	86 30       	cpi	r24, 0x06	; 6
     802:	92 07       	cpc	r25, r18
     804:	29 f7       	brne	.-54     	; 0x7d0 <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
     806:	89 85       	ldd	r24, Y+9	; 0x09
     808:	86 95       	lsr	r24
     80a:	86 95       	lsr	r24
     80c:	86 95       	lsr	r24
     80e:	8f 5f       	subi	r24, 0xFF	; 255
     810:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pin_reg = pin % 8;
     812:	89 85       	ldd	r24, Y+9	; 0x09
     814:	87 70       	andi	r24, 0x07	; 7
     816:	8d 83       	std	Y+5, r24	; 0x05
	if(direction == GPIO_DIRECTION_OUTPUT)
     818:	8a 85       	ldd	r24, Y+10	; 0x0a
     81a:	81 30       	cpi	r24, 0x01	; 1
     81c:	09 f0       	breq	.+2      	; 0x820 <gpio_register_pin+0x82>
     81e:	47 c0       	rjmp	.+142    	; 0x8ae <gpio_register_pin+0x110>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
     820:	8e 81       	ldd	r24, Y+6	; 0x06
     822:	28 2f       	mov	r18, r24
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	c9 01       	movw	r24, r18
     828:	88 0f       	add	r24, r24
     82a:	99 1f       	adc	r25, r25
     82c:	82 0f       	add	r24, r18
     82e:	93 1f       	adc	r25, r19
     830:	4e 96       	adiw	r24, 0x1e	; 30
     832:	dc 01       	movw	r26, r24
     834:	8e 81       	ldd	r24, Y+6	; 0x06
     836:	28 2f       	mov	r18, r24
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	c9 01       	movw	r24, r18
     83c:	88 0f       	add	r24, r24
     83e:	99 1f       	adc	r25, r25
     840:	82 0f       	add	r24, r18
     842:	93 1f       	adc	r25, r19
     844:	4e 96       	adiw	r24, 0x1e	; 30
     846:	fc 01       	movw	r30, r24
     848:	80 81       	ld	r24, Z
     84a:	48 2f       	mov	r20, r24
     84c:	8d 81       	ldd	r24, Y+5	; 0x05
     84e:	28 2f       	mov	r18, r24
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	02 c0       	rjmp	.+4      	; 0x85c <gpio_register_pin+0xbe>
     858:	88 0f       	add	r24, r24
     85a:	99 1f       	adc	r25, r25
     85c:	2a 95       	dec	r18
     85e:	e2 f7       	brpl	.-8      	; 0x858 <gpio_register_pin+0xba>
     860:	84 2b       	or	r24, r20
     862:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     864:	8e 81       	ldd	r24, Y+6	; 0x06
     866:	28 2f       	mov	r18, r24
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	c9 01       	movw	r24, r18
     86c:	88 0f       	add	r24, r24
     86e:	99 1f       	adc	r25, r25
     870:	82 0f       	add	r24, r18
     872:	93 1f       	adc	r25, r19
     874:	4f 96       	adiw	r24, 0x1f	; 31
     876:	dc 01       	movw	r26, r24
     878:	8e 81       	ldd	r24, Y+6	; 0x06
     87a:	28 2f       	mov	r18, r24
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	c9 01       	movw	r24, r18
     880:	88 0f       	add	r24, r24
     882:	99 1f       	adc	r25, r25
     884:	82 0f       	add	r24, r18
     886:	93 1f       	adc	r25, r19
     888:	4f 96       	adiw	r24, 0x1f	; 31
     88a:	fc 01       	movw	r30, r24
     88c:	80 81       	ld	r24, Z
     88e:	48 2f       	mov	r20, r24
     890:	8d 81       	ldd	r24, Y+5	; 0x05
     892:	28 2f       	mov	r18, r24
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	02 2e       	mov	r0, r18
     89c:	02 c0       	rjmp	.+4      	; 0x8a2 <gpio_register_pin+0x104>
     89e:	88 0f       	add	r24, r24
     8a0:	99 1f       	adc	r25, r25
     8a2:	0a 94       	dec	r0
     8a4:	e2 f7       	brpl	.-8      	; 0x89e <gpio_register_pin+0x100>
     8a6:	80 95       	com	r24
     8a8:	84 23       	and	r24, r20
     8aa:	8c 93       	st	X, r24
     8ac:	42 c0       	rjmp	.+132    	; 0x932 <gpio_register_pin+0x194>
        return;
	}
	else
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     8ae:	8e 81       	ldd	r24, Y+6	; 0x06
     8b0:	28 2f       	mov	r18, r24
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	c9 01       	movw	r24, r18
     8b6:	88 0f       	add	r24, r24
     8b8:	99 1f       	adc	r25, r25
     8ba:	82 0f       	add	r24, r18
     8bc:	93 1f       	adc	r25, r19
     8be:	4e 96       	adiw	r24, 0x1e	; 30
     8c0:	dc 01       	movw	r26, r24
     8c2:	8e 81       	ldd	r24, Y+6	; 0x06
     8c4:	28 2f       	mov	r18, r24
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	c9 01       	movw	r24, r18
     8ca:	88 0f       	add	r24, r24
     8cc:	99 1f       	adc	r25, r25
     8ce:	82 0f       	add	r24, r18
     8d0:	93 1f       	adc	r25, r19
     8d2:	4e 96       	adiw	r24, 0x1e	; 30
     8d4:	fc 01       	movw	r30, r24
     8d6:	80 81       	ld	r24, Z
     8d8:	48 2f       	mov	r20, r24
     8da:	8d 81       	ldd	r24, Y+5	; 0x05
     8dc:	28 2f       	mov	r18, r24
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <gpio_register_pin+0x14c>
     8e6:	88 0f       	add	r24, r24
     8e8:	99 1f       	adc	r25, r25
     8ea:	2a 95       	dec	r18
     8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <gpio_register_pin+0x148>
     8ee:	80 95       	com	r24
     8f0:	84 23       	and	r24, r20
     8f2:	8c 93       	st	X, r24

    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
     8f4:	8a e0       	ldi	r24, 0x0A	; 10
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <malloc>
     8fc:	98 87       	std	Y+8, r25	; 0x08
     8fe:	8f 83       	std	Y+7, r24	; 0x07
    if(input == NULL)
     900:	8f 81       	ldd	r24, Y+7	; 0x07
     902:	98 85       	ldd	r25, Y+8	; 0x08
     904:	00 97       	sbiw	r24, 0x00	; 0
     906:	19 f4       	brne	.+6      	; 0x90e <gpio_register_pin+0x170>
        return 1;
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	8c 87       	std	Y+12, r24	; 0x0c
     90c:	10 c0       	rjmp	.+32     	; 0x92e <gpio_register_pin+0x190>

    input->pin       = pin;
     90e:	ef 81       	ldd	r30, Y+7	; 0x07
     910:	f8 85       	ldd	r31, Y+8	; 0x08
     912:	89 85       	ldd	r24, Y+9	; 0x09
     914:	80 83       	st	Z, r24
    input->pulled_up = pulled_up;
     916:	ef 81       	ldd	r30, Y+7	; 0x07
     918:	f8 85       	ldd	r31, Y+8	; 0x08
     91a:	8b 85       	ldd	r24, Y+11	; 0x0b
     91c:	81 83       	std	Z+1, r24	; 0x01
    list_add(&input->list, &gpio_inputs);
     91e:	8f 81       	ldd	r24, Y+7	; 0x07
     920:	98 85       	ldd	r25, Y+8	; 0x08
     922:	06 96       	adiw	r24, 0x06	; 6
     924:	26 e0       	ldi	r18, 0x06	; 6
     926:	31 e0       	ldi	r19, 0x01	; 1
     928:	b9 01       	movw	r22, r18
     92a:	0d d0       	rcall	.+26     	; 0x946 <list_add>

    return 0;
     92c:	1c 86       	std	Y+12, r1	; 0x0c
     92e:	2c 85       	ldd	r18, Y+12	; 0x0c
     930:	2d 87       	std	Y+13, r18	; 0x0d
}
     932:	8d 85       	ldd	r24, Y+13	; 0x0d
     934:	2d 96       	adiw	r28, 0x0d	; 13
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	cf 91       	pop	r28
     942:	df 91       	pop	r29
     944:	08 95       	ret

00000946 <list_add>:
    new->prev = prev;
    prev->next = new;
}

static inline void list_add(struct list_head* new, struct list_head* head)
{
     946:	df 93       	push	r29
     948:	cf 93       	push	r28
     94a:	00 d0       	rcall	.+0      	; 0x94c <list_add+0x6>
     94c:	00 d0       	rcall	.+0      	; 0x94e <list_add+0x8>
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
     952:	9a 83       	std	Y+2, r25	; 0x02
     954:	89 83       	std	Y+1, r24	; 0x01
     956:	7c 83       	std	Y+4, r23	; 0x04
     958:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
     95a:	eb 81       	ldd	r30, Y+3	; 0x03
     95c:	fc 81       	ldd	r31, Y+4	; 0x04
     95e:	42 81       	ldd	r20, Z+2	; 0x02
     960:	53 81       	ldd	r21, Z+3	; 0x03
     962:	89 81       	ldd	r24, Y+1	; 0x01
     964:	9a 81       	ldd	r25, Y+2	; 0x02
     966:	2b 81       	ldd	r18, Y+3	; 0x03
     968:	3c 81       	ldd	r19, Y+4	; 0x04
     96a:	b9 01       	movw	r22, r18
     96c:	07 d0       	rcall	.+14     	; 0x97c <__list_add>
}
     96e:	0f 90       	pop	r0
     970:	0f 90       	pop	r0
     972:	0f 90       	pop	r0
     974:	0f 90       	pop	r0
     976:	cf 91       	pop	r28
     978:	df 91       	pop	r29
     97a:	08 95       	ret

0000097c <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
     97c:	df 93       	push	r29
     97e:	cf 93       	push	r28
     980:	00 d0       	rcall	.+0      	; 0x982 <__list_add+0x6>
     982:	00 d0       	rcall	.+0      	; 0x984 <__list_add+0x8>
     984:	00 d0       	rcall	.+0      	; 0x986 <__list_add+0xa>
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
     98a:	9a 83       	std	Y+2, r25	; 0x02
     98c:	89 83       	std	Y+1, r24	; 0x01
     98e:	7c 83       	std	Y+4, r23	; 0x04
     990:	6b 83       	std	Y+3, r22	; 0x03
     992:	5e 83       	std	Y+6, r21	; 0x06
     994:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
     996:	ed 81       	ldd	r30, Y+5	; 0x05
     998:	fe 81       	ldd	r31, Y+6	; 0x06
     99a:	89 81       	ldd	r24, Y+1	; 0x01
     99c:	9a 81       	ldd	r25, Y+2	; 0x02
     99e:	91 83       	std	Z+1, r25	; 0x01
     9a0:	80 83       	st	Z, r24
    new->next = next;
     9a2:	e9 81       	ldd	r30, Y+1	; 0x01
     9a4:	fa 81       	ldd	r31, Y+2	; 0x02
     9a6:	8d 81       	ldd	r24, Y+5	; 0x05
     9a8:	9e 81       	ldd	r25, Y+6	; 0x06
     9aa:	93 83       	std	Z+3, r25	; 0x03
     9ac:	82 83       	std	Z+2, r24	; 0x02
    new->prev = prev;
     9ae:	e9 81       	ldd	r30, Y+1	; 0x01
     9b0:	fa 81       	ldd	r31, Y+2	; 0x02
     9b2:	8b 81       	ldd	r24, Y+3	; 0x03
     9b4:	9c 81       	ldd	r25, Y+4	; 0x04
     9b6:	91 83       	std	Z+1, r25	; 0x01
     9b8:	80 83       	st	Z, r24
    prev->next = new;
     9ba:	eb 81       	ldd	r30, Y+3	; 0x03
     9bc:	fc 81       	ldd	r31, Y+4	; 0x04
     9be:	89 81       	ldd	r24, Y+1	; 0x01
     9c0:	9a 81       	ldd	r25, Y+2	; 0x02
     9c2:	93 83       	std	Z+3, r25	; 0x03
     9c4:	82 83       	std	Z+2, r24	; 0x02
}
     9c6:	26 96       	adiw	r28, 0x06	; 6
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	f8 94       	cli
     9cc:	de bf       	out	0x3e, r29	; 62
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	cd bf       	out	0x3d, r28	; 61
     9d2:	cf 91       	pop	r28
     9d4:	df 91       	pop	r29
     9d6:	08 95       	ret

000009d8 <greenside>:
{
	{{100,100}, NORMAL_SPEED, FORWARD, NULL}
};

void greenside(void)
{
     9d8:	df 93       	push	r29
     9da:	cf 93       	push	r28
     9dc:	cd b7       	in	r28, 0x3d	; 61
     9de:	de b7       	in	r29, 0x3e	; 62
     9e0:	2b 97       	sbiw	r28, 0x0b	; 11
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	f8 94       	cli
     9e6:	de bf       	out	0x3e, r29	; 62
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	uint8_t current_position = 0; 
     9ec:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t next_position = 0; 
     9ee:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t odometry_status;
	uint8_t active_state = ROBOT_STATE_TACTIC_ONE;
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	89 83       	std	Y+1, r24	; 0x01

	starting_position.x     = 0;
     9f4:	1e 82       	std	Y+6, r1	; 0x06
     9f6:	1d 82       	std	Y+5, r1	; 0x05
	starting_position.y     = 0;
     9f8:	18 86       	std	Y+8, r1	; 0x08
     9fa:	1f 82       	std	Y+7, r1	; 0x07
	starting_position.angle = 0;
     9fc:	1a 86       	std	Y+10, r1	; 0x0a
     9fe:	19 86       	std	Y+9, r1	; 0x09
	 
	odometry_set_position(&starting_position);
     a00:	ce 01       	movw	r24, r28
     a02:	05 96       	adiw	r24, 0x05	; 5
     a04:	a1 d2       	rcall	.+1346   	; 0xf48 <odometry_set_position>
	 
	while(1)
	{
		switch(active_state)
     a06:	89 81       	ldd	r24, Y+1	; 0x01
     a08:	88 2f       	mov	r24, r24
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	81 30       	cpi	r24, 0x01	; 1
     a0e:	91 05       	cpc	r25, r1
     a10:	d1 f7       	brne	.-12     	; 0xa06 <greenside+0x2e>
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
     a12:	8b 81       	ldd	r24, Y+3	; 0x03
     a14:	8c 83       	std	Y+4, r24	; 0x04
     a16:	58 c0       	rjmp	.+176    	; 0xac8 <greenside+0xf0>
				{
					odometry_status = odometry_move_to_position(&green_tactic_one_positions[current_position].point, green_tactic_one_positions[current_position].speed,
     a18:	8c 81       	ldd	r24, Y+4	; 0x04
     a1a:	48 2f       	mov	r20, r24
     a1c:	50 e0       	ldi	r21, 0x00	; 0
     a1e:	ca 01       	movw	r24, r20
     a20:	88 0f       	add	r24, r24
     a22:	99 1f       	adc	r25, r25
     a24:	9c 01       	movw	r18, r24
     a26:	22 0f       	add	r18, r18
     a28:	33 1f       	adc	r19, r19
     a2a:	22 0f       	add	r18, r18
     a2c:	33 1f       	adc	r19, r19
     a2e:	82 0f       	add	r24, r18
     a30:	93 1f       	adc	r25, r19
     a32:	84 0f       	add	r24, r20
     a34:	95 1f       	adc	r25, r21
     a36:	8f 5e       	subi	r24, 0xEF	; 239
     a38:	9e 4f       	sbci	r25, 0xFE	; 254
     a3a:	bc 01       	movw	r22, r24
     a3c:	8c 81       	ldd	r24, Y+4	; 0x04
     a3e:	48 2f       	mov	r20, r24
     a40:	50 e0       	ldi	r21, 0x00	; 0
     a42:	ca 01       	movw	r24, r20
     a44:	88 0f       	add	r24, r24
     a46:	99 1f       	adc	r25, r25
     a48:	9c 01       	movw	r18, r24
     a4a:	22 0f       	add	r18, r18
     a4c:	33 1f       	adc	r19, r19
     a4e:	22 0f       	add	r18, r18
     a50:	33 1f       	adc	r19, r19
     a52:	82 0f       	add	r24, r18
     a54:	93 1f       	adc	r25, r19
     a56:	84 0f       	add	r24, r20
     a58:	95 1f       	adc	r25, r21
     a5a:	fc 01       	movw	r30, r24
     a5c:	e8 5e       	subi	r30, 0xE8	; 232
     a5e:	fe 4f       	sbci	r31, 0xFE	; 254
     a60:	a0 81       	ld	r26, Z
     a62:	8c 81       	ldd	r24, Y+4	; 0x04
     a64:	48 2f       	mov	r20, r24
     a66:	50 e0       	ldi	r21, 0x00	; 0
     a68:	ca 01       	movw	r24, r20
     a6a:	88 0f       	add	r24, r24
     a6c:	99 1f       	adc	r25, r25
     a6e:	9c 01       	movw	r18, r24
     a70:	22 0f       	add	r18, r18
     a72:	33 1f       	adc	r19, r19
     a74:	22 0f       	add	r18, r18
     a76:	33 1f       	adc	r19, r19
     a78:	82 0f       	add	r24, r18
     a7a:	93 1f       	adc	r25, r19
     a7c:	84 0f       	add	r24, r20
     a7e:	95 1f       	adc	r25, r21
     a80:	fc 01       	movw	r30, r24
     a82:	e7 5e       	subi	r30, 0xE7	; 231
     a84:	fe 4f       	sbci	r31, 0xFE	; 254
     a86:	b0 81       	ld	r27, Z
     a88:	8c 81       	ldd	r24, Y+4	; 0x04
     a8a:	48 2f       	mov	r20, r24
     a8c:	50 e0       	ldi	r21, 0x00	; 0
     a8e:	ca 01       	movw	r24, r20
     a90:	88 0f       	add	r24, r24
     a92:	99 1f       	adc	r25, r25
     a94:	9c 01       	movw	r18, r24
     a96:	22 0f       	add	r18, r18
     a98:	33 1f       	adc	r19, r19
     a9a:	22 0f       	add	r18, r18
     a9c:	33 1f       	adc	r19, r19
     a9e:	82 0f       	add	r24, r18
     aa0:	93 1f       	adc	r25, r19
     aa2:	84 0f       	add	r24, r20
     aa4:	95 1f       	adc	r25, r21
     aa6:	fc 01       	movw	r30, r24
     aa8:	e6 5e       	subi	r30, 0xE6	; 230
     aaa:	fe 4f       	sbci	r31, 0xFE	; 254
     aac:	20 81       	ld	r18, Z
     aae:	31 81       	ldd	r19, Z+1	; 0x01
     ab0:	cb 01       	movw	r24, r22
     ab2:	6a 2f       	mov	r22, r26
     ab4:	4b 2f       	mov	r20, r27
     ab6:	97 d1       	rcall	.+814    	; 0xde6 <odometry_move_to_position>
     ab8:	8a 83       	std	Y+2, r24	; 0x02
																green_tactic_one_positions[current_position].direction, green_tactic_one_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
     aba:	8a 81       	ldd	r24, Y+2	; 0x02
     abc:	81 30       	cpi	r24, 0x01	; 1
     abe:	09 f4       	brne	.+2      	; 0xac2 <greenside+0xea>
     ac0:	a2 cf       	rjmp	.-188    	; 0xa06 <greenside+0x2e>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
     ac2:	8c 81       	ldd	r24, Y+4	; 0x04
     ac4:	8f 5f       	subi	r24, 0xFF	; 255
     ac6:	8c 83       	std	Y+4, r24	; 0x04
     ac8:	8c 81       	ldd	r24, Y+4	; 0x04
     aca:	88 23       	and	r24, r24
     acc:	09 f4       	brne	.+2      	; 0xad0 <greenside+0xf8>
     ace:	a4 cf       	rjmp	.-184    	; 0xa18 <greenside+0x40>
     ad0:	9a cf       	rjmp	.-204    	; 0xa06 <greenside+0x2e>

00000ad2 <odometry_set_speed>:
	.angle = 0,
	.state = IDLE
};

void odometry_set_speed(uint8_t speed)
{
     ad2:	df 93       	push	r29
     ad4:	cf 93       	push	r28
     ad6:	cd b7       	in	r28, 0x3d	; 61
     ad8:	de b7       	in	r29, 0x3e	; 62
     ada:	67 97       	sbiw	r28, 0x17	; 23
     adc:	0f b6       	in	r0, 0x3f	; 63
     ade:	f8 94       	cli
     ae0:	de bf       	out	0x3e, r29	; 62
     ae2:	0f be       	out	0x3f, r0	; 63
     ae4:	cd bf       	out	0x3d, r28	; 61
     ae6:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
     ae8:	90 91 4e 01 	lds	r25, 0x014E
     aec:	8f 89       	ldd	r24, Y+23	; 0x17
     aee:	89 17       	cp	r24, r25
     af0:	09 f4       	brne	.+2      	; 0xaf4 <odometry_set_speed+0x22>
     af2:	7b c0       	rjmp	.+246    	; 0xbea <odometry_set_speed+0x118>
		return;

	uint8_t buffer[8];
	buffer[0] = 'V';
     af4:	86 e5       	ldi	r24, 0x56	; 86
     af6:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
     af8:	8f 89       	ldd	r24, Y+23	; 0x17
     afa:	88 8b       	std	Y+16, r24	; 0x10
     afc:	6c c0       	rjmp	.+216    	; 0xbd6 <odometry_set_speed+0x104>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a8 e4       	ldi	r26, 0x48	; 72
     b04:	b2 e4       	ldi	r27, 0x42	; 66
     b06:	8b 87       	std	Y+11, r24	; 0x0b
     b08:	9c 87       	std	Y+12, r25	; 0x0c
     b0a:	ad 87       	std	Y+13, r26	; 0x0d
     b0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b0e:	6b 85       	ldd	r22, Y+11	; 0x0b
     b10:	7c 85       	ldd	r23, Y+12	; 0x0c
     b12:	8d 85       	ldd	r24, Y+13	; 0x0d
     b14:	9e 85       	ldd	r25, Y+14	; 0x0e
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e4       	ldi	r19, 0x40	; 64
     b1a:	4c e1       	ldi	r20, 0x1C	; 28
     b1c:	55 e4       	ldi	r21, 0x45	; 69
     b1e:	c6 d6       	rcall	.+3468   	; 0x18ac <__mulsf3>
     b20:	dc 01       	movw	r26, r24
     b22:	cb 01       	movw	r24, r22
     b24:	8f 83       	std	Y+7, r24	; 0x07
     b26:	98 87       	std	Y+8, r25	; 0x08
     b28:	a9 87       	std	Y+9, r26	; 0x09
     b2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b2c:	6f 81       	ldd	r22, Y+7	; 0x07
     b2e:	78 85       	ldd	r23, Y+8	; 0x08
     b30:	89 85       	ldd	r24, Y+9	; 0x09
     b32:	9a 85       	ldd	r25, Y+10	; 0x0a
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	40 e8       	ldi	r20, 0x80	; 128
     b3a:	5f e3       	ldi	r21, 0x3F	; 63
     b3c:	69 d5       	rcall	.+2770   	; 0x1610 <__cmpsf2>
     b3e:	88 23       	and	r24, r24
     b40:	2c f4       	brge	.+10     	; 0xb4c <odometry_set_speed+0x7a>
		__ticks = 1;
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	9e 83       	std	Y+6, r25	; 0x06
     b48:	8d 83       	std	Y+5, r24	; 0x05
     b4a:	3b c0       	rjmp	.+118    	; 0xbc2 <odometry_set_speed+0xf0>
	else if (__tmp > 65535)
     b4c:	6f 81       	ldd	r22, Y+7	; 0x07
     b4e:	78 85       	ldd	r23, Y+8	; 0x08
     b50:	89 85       	ldd	r24, Y+9	; 0x09
     b52:	9a 85       	ldd	r25, Y+10	; 0x0a
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	3f ef       	ldi	r19, 0xFF	; 255
     b58:	4f e7       	ldi	r20, 0x7F	; 127
     b5a:	57 e4       	ldi	r21, 0x47	; 71
     b5c:	a3 d6       	rcall	.+3398   	; 0x18a4 <__gesf2>
     b5e:	18 16       	cp	r1, r24
     b60:	3c f5       	brge	.+78     	; 0xbb0 <odometry_set_speed+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b62:	6b 85       	ldd	r22, Y+11	; 0x0b
     b64:	7c 85       	ldd	r23, Y+12	; 0x0c
     b66:	8d 85       	ldd	r24, Y+13	; 0x0d
     b68:	9e 85       	ldd	r25, Y+14	; 0x0e
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	40 e2       	ldi	r20, 0x20	; 32
     b70:	51 e4       	ldi	r21, 0x41	; 65
     b72:	9c d6       	rcall	.+3384   	; 0x18ac <__mulsf3>
     b74:	dc 01       	movw	r26, r24
     b76:	cb 01       	movw	r24, r22
     b78:	bc 01       	movw	r22, r24
     b7a:	cd 01       	movw	r24, r26
     b7c:	b5 d5       	rcall	.+2922   	; 0x16e8 <__fixunssfsi>
     b7e:	dc 01       	movw	r26, r24
     b80:	cb 01       	movw	r24, r22
     b82:	9e 83       	std	Y+6, r25	; 0x06
     b84:	8d 83       	std	Y+5, r24	; 0x05
     b86:	0f c0       	rjmp	.+30     	; 0xba6 <odometry_set_speed+0xd4>
     b88:	8a ef       	ldi	r24, 0xFA	; 250
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	9c 83       	std	Y+4, r25	; 0x04
     b8e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b90:	8b 81       	ldd	r24, Y+3	; 0x03
     b92:	9c 81       	ldd	r25, Y+4	; 0x04
     b94:	01 97       	sbiw	r24, 0x01	; 1
     b96:	f1 f7       	brne	.-4      	; 0xb94 <odometry_set_speed+0xc2>
     b98:	9c 83       	std	Y+4, r25	; 0x04
     b9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b9c:	8d 81       	ldd	r24, Y+5	; 0x05
     b9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ba0:	01 97       	sbiw	r24, 0x01	; 1
     ba2:	9e 83       	std	Y+6, r25	; 0x06
     ba4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ba6:	8d 81       	ldd	r24, Y+5	; 0x05
     ba8:	9e 81       	ldd	r25, Y+6	; 0x06
     baa:	00 97       	sbiw	r24, 0x00	; 0
     bac:	69 f7       	brne	.-38     	; 0xb88 <odometry_set_speed+0xb6>
     bae:	13 c0       	rjmp	.+38     	; 0xbd6 <odometry_set_speed+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bb0:	6f 81       	ldd	r22, Y+7	; 0x07
     bb2:	78 85       	ldd	r23, Y+8	; 0x08
     bb4:	89 85       	ldd	r24, Y+9	; 0x09
     bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb8:	97 d5       	rcall	.+2862   	; 0x16e8 <__fixunssfsi>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	9e 83       	std	Y+6, r25	; 0x06
     bc0:	8d 83       	std	Y+5, r24	; 0x05
     bc2:	8d 81       	ldd	r24, Y+5	; 0x05
     bc4:	9e 81       	ldd	r25, Y+6	; 0x06
     bc6:	9a 83       	std	Y+2, r25	; 0x02
     bc8:	89 83       	std	Y+1, r24	; 0x01
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	9a 81       	ldd	r25, Y+2	; 0x02
     bce:	01 97       	sbiw	r24, 0x01	; 1
     bd0:	f1 f7       	brne	.-4      	; 0xbce <odometry_set_speed+0xfc>
     bd2:	9a 83       	std	Y+2, r25	; 0x02
     bd4:	89 83       	std	Y+1, r24	; 0x01
     bd6:	ce 01       	movw	r24, r28
     bd8:	0f 96       	adiw	r24, 0x0f	; 15
     bda:	63 ec       	ldi	r22, 0xC3	; 195
     bdc:	5f dd       	rcall	.-1346   	; 0x69c <CAN_Write>
     bde:	88 23       	and	r24, r24
     be0:	09 f0       	breq	.+2      	; 0xbe4 <odometry_set_speed+0x112>
     be2:	8d cf       	rjmp	.-230    	; 0xafe <odometry_set_speed+0x2c>
		_delay_ms(50);

	current_speed = speed;
     be4:	8f 89       	ldd	r24, Y+23	; 0x17
     be6:	80 93 4e 01 	sts	0x014E, r24
}
     bea:	67 96       	adiw	r28, 0x17	; 23
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	cf 91       	pop	r28
     bf8:	df 91       	pop	r29
     bfa:	08 95       	ret

00000bfc <odometry_query_position>:

static void odometry_query_position(void)
{
     bfc:	df 93       	push	r29
     bfe:	cf 93       	push	r28
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	66 97       	sbiw	r28, 0x16	; 22
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	f8 94       	cli
     c0a:	de bf       	out	0x3e, r29	; 62
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
     c10:	80 e5       	ldi	r24, 0x50	; 80
     c12:	8f 87       	std	Y+15, r24	; 0x0f
     c14:	6c c0       	rjmp	.+216    	; 0xcee <odometry_query_position+0xf2>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a8 e4       	ldi	r26, 0x48	; 72
     c1c:	b2 e4       	ldi	r27, 0x42	; 66
     c1e:	8b 87       	std	Y+11, r24	; 0x0b
     c20:	9c 87       	std	Y+12, r25	; 0x0c
     c22:	ad 87       	std	Y+13, r26	; 0x0d
     c24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c26:	6b 85       	ldd	r22, Y+11	; 0x0b
     c28:	7c 85       	ldd	r23, Y+12	; 0x0c
     c2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	30 e4       	ldi	r19, 0x40	; 64
     c32:	4c e1       	ldi	r20, 0x1C	; 28
     c34:	55 e4       	ldi	r21, 0x45	; 69
     c36:	3a d6       	rcall	.+3188   	; 0x18ac <__mulsf3>
     c38:	dc 01       	movw	r26, r24
     c3a:	cb 01       	movw	r24, r22
     c3c:	8f 83       	std	Y+7, r24	; 0x07
     c3e:	98 87       	std	Y+8, r25	; 0x08
     c40:	a9 87       	std	Y+9, r26	; 0x09
     c42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c44:	6f 81       	ldd	r22, Y+7	; 0x07
     c46:	78 85       	ldd	r23, Y+8	; 0x08
     c48:	89 85       	ldd	r24, Y+9	; 0x09
     c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	40 e8       	ldi	r20, 0x80	; 128
     c52:	5f e3       	ldi	r21, 0x3F	; 63
     c54:	dd d4       	rcall	.+2490   	; 0x1610 <__cmpsf2>
     c56:	88 23       	and	r24, r24
     c58:	2c f4       	brge	.+10     	; 0xc64 <odometry_query_position+0x68>
		__ticks = 1;
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	9e 83       	std	Y+6, r25	; 0x06
     c60:	8d 83       	std	Y+5, r24	; 0x05
     c62:	3b c0       	rjmp	.+118    	; 0xcda <odometry_query_position+0xde>
	else if (__tmp > 65535)
     c64:	6f 81       	ldd	r22, Y+7	; 0x07
     c66:	78 85       	ldd	r23, Y+8	; 0x08
     c68:	89 85       	ldd	r24, Y+9	; 0x09
     c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	3f ef       	ldi	r19, 0xFF	; 255
     c70:	4f e7       	ldi	r20, 0x7F	; 127
     c72:	57 e4       	ldi	r21, 0x47	; 71
     c74:	17 d6       	rcall	.+3118   	; 0x18a4 <__gesf2>
     c76:	18 16       	cp	r1, r24
     c78:	3c f5       	brge	.+78     	; 0xcc8 <odometry_query_position+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c7a:	6b 85       	ldd	r22, Y+11	; 0x0b
     c7c:	7c 85       	ldd	r23, Y+12	; 0x0c
     c7e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c80:	9e 85       	ldd	r25, Y+14	; 0x0e
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	40 e2       	ldi	r20, 0x20	; 32
     c88:	51 e4       	ldi	r21, 0x41	; 65
     c8a:	10 d6       	rcall	.+3104   	; 0x18ac <__mulsf3>
     c8c:	dc 01       	movw	r26, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	bc 01       	movw	r22, r24
     c92:	cd 01       	movw	r24, r26
     c94:	29 d5       	rcall	.+2642   	; 0x16e8 <__fixunssfsi>
     c96:	dc 01       	movw	r26, r24
     c98:	cb 01       	movw	r24, r22
     c9a:	9e 83       	std	Y+6, r25	; 0x06
     c9c:	8d 83       	std	Y+5, r24	; 0x05
     c9e:	0f c0       	rjmp	.+30     	; 0xcbe <odometry_query_position+0xc2>
     ca0:	8a ef       	ldi	r24, 0xFA	; 250
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	9c 83       	std	Y+4, r25	; 0x04
     ca6:	8b 83       	std	Y+3, r24	; 0x03
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	9c 81       	ldd	r25, Y+4	; 0x04
     cac:	01 97       	sbiw	r24, 0x01	; 1
     cae:	f1 f7       	brne	.-4      	; 0xcac <odometry_query_position+0xb0>
     cb0:	9c 83       	std	Y+4, r25	; 0x04
     cb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cb4:	8d 81       	ldd	r24, Y+5	; 0x05
     cb6:	9e 81       	ldd	r25, Y+6	; 0x06
     cb8:	01 97       	sbiw	r24, 0x01	; 1
     cba:	9e 83       	std	Y+6, r25	; 0x06
     cbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cbe:	8d 81       	ldd	r24, Y+5	; 0x05
     cc0:	9e 81       	ldd	r25, Y+6	; 0x06
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	69 f7       	brne	.-38     	; 0xca0 <odometry_query_position+0xa4>
     cc6:	13 c0       	rjmp	.+38     	; 0xcee <odometry_query_position+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cc8:	6f 81       	ldd	r22, Y+7	; 0x07
     cca:	78 85       	ldd	r23, Y+8	; 0x08
     ccc:	89 85       	ldd	r24, Y+9	; 0x09
     cce:	9a 85       	ldd	r25, Y+10	; 0x0a
     cd0:	0b d5       	rcall	.+2582   	; 0x16e8 <__fixunssfsi>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	9e 83       	std	Y+6, r25	; 0x06
     cd8:	8d 83       	std	Y+5, r24	; 0x05
     cda:	8d 81       	ldd	r24, Y+5	; 0x05
     cdc:	9e 81       	ldd	r25, Y+6	; 0x06
     cde:	9a 83       	std	Y+2, r25	; 0x02
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	9a 81       	ldd	r25, Y+2	; 0x02
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <odometry_query_position+0xea>
     cea:	9a 83       	std	Y+2, r25	; 0x02
     cec:	89 83       	std	Y+1, r24	; 0x01
     cee:	ce 01       	movw	r24, r28
     cf0:	0f 96       	adiw	r24, 0x0f	; 15
     cf2:	63 ec       	ldi	r22, 0xC3	; 195
     cf4:	d3 dc       	rcall	.-1626   	; 0x69c <CAN_Write>
     cf6:	88 23       	and	r24, r24
     cf8:	09 f0       	breq	.+2      	; 0xcfc <odometry_query_position+0x100>
     cfa:	8d cf       	rjmp	.-230    	; 0xc16 <odometry_query_position+0x1a>
		_delay_ms(50);

	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
     cfc:	ce 01       	movw	r24, r28
     cfe:	0f 96       	adiw	r24, 0x0f	; 15
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	58 dc       	rcall	.-1872   	; 0x5b4 <CAN_Read>

	position.state = buffer[0];
     d04:	8f 85       	ldd	r24, Y+15	; 0x0f
     d06:	80 93 10 01 	sts	0x0110, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
     d0a:	88 89       	ldd	r24, Y+16	; 0x10
     d0c:	88 2f       	mov	r24, r24
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	38 2f       	mov	r19, r24
     d12:	22 27       	eor	r18, r18
     d14:	89 89       	ldd	r24, Y+17	; 0x11
     d16:	88 2f       	mov	r24, r24
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	82 2b       	or	r24, r18
     d1c:	93 2b       	or	r25, r19
     d1e:	90 93 0b 01 	sts	0x010B, r25
     d22:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
     d26:	8a 89       	ldd	r24, Y+18	; 0x12
     d28:	88 2f       	mov	r24, r24
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	38 2f       	mov	r19, r24
     d2e:	22 27       	eor	r18, r18
     d30:	8b 89       	ldd	r24, Y+19	; 0x13
     d32:	88 2f       	mov	r24, r24
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	82 2b       	or	r24, r18
     d38:	93 2b       	or	r25, r19
     d3a:	90 93 0d 01 	sts	0x010D, r25
     d3e:	80 93 0c 01 	sts	0x010C, r24
	position.angle = (buffer[5] << 8) | buffer[6];
     d42:	8c 89       	ldd	r24, Y+20	; 0x14
     d44:	88 2f       	mov	r24, r24
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	38 2f       	mov	r19, r24
     d4a:	22 27       	eor	r18, r18
     d4c:	8d 89       	ldd	r24, Y+21	; 0x15
     d4e:	88 2f       	mov	r24, r24
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	82 2b       	or	r24, r18
     d54:	93 2b       	or	r25, r19
     d56:	90 93 0f 01 	sts	0x010F, r25
     d5a:	80 93 0e 01 	sts	0x010E, r24
}
     d5e:	66 96       	adiw	r28, 0x16	; 22
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <odometry_wait_until_done>:

static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	27 97       	sbiw	r28, 0x07	; 7
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	cd bf       	out	0x3d, r28	; 61
     d84:	9e 83       	std	Y+6, r25	; 0x06
     d86:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
     d88:	bb d2       	rcall	.+1398   	; 0x1300 <system_get_system_time>
     d8a:	aa 27       	eor	r26, r26
     d8c:	97 fd       	sbrc	r25, 7
     d8e:	a0 95       	com	r26
     d90:	ba 2f       	mov	r27, r26
     d92:	89 83       	std	Y+1, r24	; 0x01
     d94:	9a 83       	std	Y+2, r25	; 0x02
     d96:	ab 83       	std	Y+3, r26	; 0x03
     d98:	bc 83       	std	Y+4, r27	; 0x04
	do
	{
		odometry_query_position();
     d9a:	30 df       	rcall	.-416    	; 0xbfc <odometry_query_position>
		if(callback != NULL)
     d9c:	8d 81       	ldd	r24, Y+5	; 0x05
     d9e:	9e 81       	ldd	r25, Y+6	; 0x06
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	71 f0       	breq	.+28     	; 0xdc0 <odometry_wait_until_done+0x50>
		{
			if(callback(time) == 1)
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	9a 81       	ldd	r25, Y+2	; 0x02
     da8:	ab 81       	ldd	r26, Y+3	; 0x03
     daa:	bc 81       	ldd	r27, Y+4	; 0x04
     dac:	ed 81       	ldd	r30, Y+5	; 0x05
     dae:	fe 81       	ldd	r31, Y+6	; 0x06
     db0:	bc 01       	movw	r22, r24
     db2:	cd 01       	movw	r24, r26
     db4:	09 95       	icall
     db6:	81 30       	cpi	r24, 0x01	; 1
     db8:	19 f4       	brne	.+6      	; 0xdc0 <odometry_wait_until_done+0x50>
				return ODOMETRY_FAIL;
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	8f 83       	std	Y+7, r24	; 0x07
     dbe:	09 c0       	rjmp	.+18     	; 0xdd2 <odometry_wait_until_done+0x62>
		}
	}while(position.state == MOVING || position.state == ROTATING);
     dc0:	80 91 10 01 	lds	r24, 0x0110
     dc4:	8d 34       	cpi	r24, 0x4D	; 77
     dc6:	49 f3       	breq	.-46     	; 0xd9a <odometry_wait_until_done+0x2a>
     dc8:	80 91 10 01 	lds	r24, 0x0110
     dcc:	82 35       	cpi	r24, 0x52	; 82
     dce:	29 f3       	breq	.-54     	; 0xd9a <odometry_wait_until_done+0x2a>

	return ODOMETRY_SUCCESS;
     dd0:	1f 82       	std	Y+7, r1	; 0x07
     dd2:	8f 81       	ldd	r24, Y+7	; 0x07
}
     dd4:	27 96       	adiw	r28, 0x07	; 7
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	f8 94       	cli
     dda:	de bf       	out	0x3e, r29	; 62
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	cd bf       	out	0x3d, r28	; 61
     de0:	cf 91       	pop	r28
     de2:	df 91       	pop	r29
     de4:	08 95       	ret

00000de6 <odometry_move_to_position>:

	return odometry_wait_until_done(callback);
}

uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
{
     de6:	df 93       	push	r29
     de8:	cf 93       	push	r28
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	6c 97       	sbiw	r28, 0x1c	; 28
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	cd bf       	out	0x3d, r28	; 61
     dfa:	98 8f       	std	Y+24, r25	; 0x18
     dfc:	8f 8b       	std	Y+23, r24	; 0x17
     dfe:	69 8f       	std	Y+25, r22	; 0x19
     e00:	4a 8f       	std	Y+26, r20	; 0x1a
     e02:	3c 8f       	std	Y+28, r19	; 0x1c
     e04:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
     e06:	89 8d       	ldd	r24, Y+25	; 0x19
     e08:	64 de       	rcall	.-824    	; 0xad2 <odometry_set_speed>

	buffer[0] = 'G';
     e0a:	87 e4       	ldi	r24, 0x47	; 71
     e0c:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
     e0e:	ef 89       	ldd	r30, Y+23	; 0x17
     e10:	f8 8d       	ldd	r31, Y+24	; 0x18
     e12:	80 81       	ld	r24, Z
     e14:	91 81       	ldd	r25, Z+1	; 0x01
     e16:	89 2f       	mov	r24, r25
     e18:	99 0f       	add	r25, r25
     e1a:	99 0b       	sbc	r25, r25
     e1c:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
     e1e:	ef 89       	ldd	r30, Y+23	; 0x17
     e20:	f8 8d       	ldd	r31, Y+24	; 0x18
     e22:	80 81       	ld	r24, Z
     e24:	91 81       	ldd	r25, Z+1	; 0x01
     e26:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
     e28:	ef 89       	ldd	r30, Y+23	; 0x17
     e2a:	f8 8d       	ldd	r31, Y+24	; 0x18
     e2c:	82 81       	ldd	r24, Z+2	; 0x02
     e2e:	93 81       	ldd	r25, Z+3	; 0x03
     e30:	89 2f       	mov	r24, r25
     e32:	99 0f       	add	r25, r25
     e34:	99 0b       	sbc	r25, r25
     e36:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
     e38:	ef 89       	ldd	r30, Y+23	; 0x17
     e3a:	f8 8d       	ldd	r31, Y+24	; 0x18
     e3c:	82 81       	ldd	r24, Z+2	; 0x02
     e3e:	93 81       	ldd	r25, Z+3	; 0x03
     e40:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;//Mozda ne treba 0
     e42:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction;
     e44:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e46:	8d 8b       	std	Y+21, r24	; 0x15
     e48:	6c c0       	rjmp	.+216    	; 0xf22 <odometry_move_to_position+0x13c>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	a8 e4       	ldi	r26, 0x48	; 72
     e50:	b2 e4       	ldi	r27, 0x42	; 66
     e52:	8b 87       	std	Y+11, r24	; 0x0b
     e54:	9c 87       	std	Y+12, r25	; 0x0c
     e56:	ad 87       	std	Y+13, r26	; 0x0d
     e58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e5a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e5c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e5e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e60:	9e 85       	ldd	r25, Y+14	; 0x0e
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e4       	ldi	r19, 0x40	; 64
     e66:	4c e1       	ldi	r20, 0x1C	; 28
     e68:	55 e4       	ldi	r21, 0x45	; 69
     e6a:	20 d5       	rcall	.+2624   	; 0x18ac <__mulsf3>
     e6c:	dc 01       	movw	r26, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	8f 83       	std	Y+7, r24	; 0x07
     e72:	98 87       	std	Y+8, r25	; 0x08
     e74:	a9 87       	std	Y+9, r26	; 0x09
     e76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e78:	6f 81       	ldd	r22, Y+7	; 0x07
     e7a:	78 85       	ldd	r23, Y+8	; 0x08
     e7c:	89 85       	ldd	r24, Y+9	; 0x09
     e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	40 e8       	ldi	r20, 0x80	; 128
     e86:	5f e3       	ldi	r21, 0x3F	; 63
     e88:	c3 d3       	rcall	.+1926   	; 0x1610 <__cmpsf2>
     e8a:	88 23       	and	r24, r24
     e8c:	2c f4       	brge	.+10     	; 0xe98 <odometry_move_to_position+0xb2>
		__ticks = 1;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	9e 83       	std	Y+6, r25	; 0x06
     e94:	8d 83       	std	Y+5, r24	; 0x05
     e96:	3b c0       	rjmp	.+118    	; 0xf0e <odometry_move_to_position+0x128>
	else if (__tmp > 65535)
     e98:	6f 81       	ldd	r22, Y+7	; 0x07
     e9a:	78 85       	ldd	r23, Y+8	; 0x08
     e9c:	89 85       	ldd	r24, Y+9	; 0x09
     e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	3f ef       	ldi	r19, 0xFF	; 255
     ea4:	4f e7       	ldi	r20, 0x7F	; 127
     ea6:	57 e4       	ldi	r21, 0x47	; 71
     ea8:	fd d4       	rcall	.+2554   	; 0x18a4 <__gesf2>
     eaa:	18 16       	cp	r1, r24
     eac:	3c f5       	brge	.+78     	; 0xefc <odometry_move_to_position+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eae:	6b 85       	ldd	r22, Y+11	; 0x0b
     eb0:	7c 85       	ldd	r23, Y+12	; 0x0c
     eb2:	8d 85       	ldd	r24, Y+13	; 0x0d
     eb4:	9e 85       	ldd	r25, Y+14	; 0x0e
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	40 e2       	ldi	r20, 0x20	; 32
     ebc:	51 e4       	ldi	r21, 0x41	; 65
     ebe:	f6 d4       	rcall	.+2540   	; 0x18ac <__mulsf3>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	bc 01       	movw	r22, r24
     ec6:	cd 01       	movw	r24, r26
     ec8:	0f d4       	rcall	.+2078   	; 0x16e8 <__fixunssfsi>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	9e 83       	std	Y+6, r25	; 0x06
     ed0:	8d 83       	std	Y+5, r24	; 0x05
     ed2:	0f c0       	rjmp	.+30     	; 0xef2 <odometry_move_to_position+0x10c>
     ed4:	8a ef       	ldi	r24, 0xFA	; 250
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	9c 83       	std	Y+4, r25	; 0x04
     eda:	8b 83       	std	Y+3, r24	; 0x03
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	9c 81       	ldd	r25, Y+4	; 0x04
     ee0:	01 97       	sbiw	r24, 0x01	; 1
     ee2:	f1 f7       	brne	.-4      	; 0xee0 <odometry_move_to_position+0xfa>
     ee4:	9c 83       	std	Y+4, r25	; 0x04
     ee6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee8:	8d 81       	ldd	r24, Y+5	; 0x05
     eea:	9e 81       	ldd	r25, Y+6	; 0x06
     eec:	01 97       	sbiw	r24, 0x01	; 1
     eee:	9e 83       	std	Y+6, r25	; 0x06
     ef0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef2:	8d 81       	ldd	r24, Y+5	; 0x05
     ef4:	9e 81       	ldd	r25, Y+6	; 0x06
     ef6:	00 97       	sbiw	r24, 0x00	; 0
     ef8:	69 f7       	brne	.-38     	; 0xed4 <odometry_move_to_position+0xee>
     efa:	13 c0       	rjmp	.+38     	; 0xf22 <odometry_move_to_position+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     efc:	6f 81       	ldd	r22, Y+7	; 0x07
     efe:	78 85       	ldd	r23, Y+8	; 0x08
     f00:	89 85       	ldd	r24, Y+9	; 0x09
     f02:	9a 85       	ldd	r25, Y+10	; 0x0a
     f04:	f1 d3       	rcall	.+2018   	; 0x16e8 <__fixunssfsi>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	9e 83       	std	Y+6, r25	; 0x06
     f0c:	8d 83       	std	Y+5, r24	; 0x05
     f0e:	8d 81       	ldd	r24, Y+5	; 0x05
     f10:	9e 81       	ldd	r25, Y+6	; 0x06
     f12:	9a 83       	std	Y+2, r25	; 0x02
     f14:	89 83       	std	Y+1, r24	; 0x01
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	9a 81       	ldd	r25, Y+2	; 0x02
     f1a:	01 97       	sbiw	r24, 0x01	; 1
     f1c:	f1 f7       	brne	.-4      	; 0xf1a <odometry_move_to_position+0x134>
     f1e:	9a 83       	std	Y+2, r25	; 0x02
     f20:	89 83       	std	Y+1, r24	; 0x01
     f22:	ce 01       	movw	r24, r28
     f24:	0f 96       	adiw	r24, 0x0f	; 15
     f26:	63 ec       	ldi	r22, 0xC3	; 195
     f28:	b9 db       	rcall	.-2190   	; 0x69c <CAN_Write>
     f2a:	88 23       	and	r24, r24
     f2c:	09 f0       	breq	.+2      	; 0xf30 <odometry_move_to_position+0x14a>
     f2e:	8d cf       	rjmp	.-230    	; 0xe4a <odometry_move_to_position+0x64>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
     f30:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f32:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f34:	1d df       	rcall	.-454    	; 0xd70 <odometry_wait_until_done>
}
     f36:	6c 96       	adiw	r28, 0x1c	; 28
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	68 97       	sbiw	r28, 0x18	; 24
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	cd bf       	out	0x3d, r28	; 61
     f5c:	98 8f       	std	Y+24, r25	; 0x18
     f5e:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	buffer[0] = 'I';
     f60:	89 e4       	ldi	r24, 0x49	; 73
     f62:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = new_position->x >> 8;
     f64:	ef 89       	ldd	r30, Y+23	; 0x17
     f66:	f8 8d       	ldd	r31, Y+24	; 0x18
     f68:	80 81       	ld	r24, Z
     f6a:	91 81       	ldd	r25, Z+1	; 0x01
     f6c:	89 2f       	mov	r24, r25
     f6e:	99 0f       	add	r25, r25
     f70:	99 0b       	sbc	r25, r25
     f72:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = new_position->x & 0xFF;
     f74:	ef 89       	ldd	r30, Y+23	; 0x17
     f76:	f8 8d       	ldd	r31, Y+24	; 0x18
     f78:	80 81       	ld	r24, Z
     f7a:	91 81       	ldd	r25, Z+1	; 0x01
     f7c:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = new_position->y >> 8;
     f7e:	ef 89       	ldd	r30, Y+23	; 0x17
     f80:	f8 8d       	ldd	r31, Y+24	; 0x18
     f82:	82 81       	ldd	r24, Z+2	; 0x02
     f84:	93 81       	ldd	r25, Z+3	; 0x03
     f86:	89 2f       	mov	r24, r25
     f88:	99 0f       	add	r25, r25
     f8a:	99 0b       	sbc	r25, r25
     f8c:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = new_position->y & 0xFF;
     f8e:	ef 89       	ldd	r30, Y+23	; 0x17
     f90:	f8 8d       	ldd	r31, Y+24	; 0x18
     f92:	82 81       	ldd	r24, Z+2	; 0x02
     f94:	93 81       	ldd	r25, Z+3	; 0x03
     f96:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = new_position->angle << 8;
     f98:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = new_position->angle & 0xFF;
     f9a:	ef 89       	ldd	r30, Y+23	; 0x17
     f9c:	f8 8d       	ldd	r31, Y+24	; 0x18
     f9e:	84 81       	ldd	r24, Z+4	; 0x04
     fa0:	95 81       	ldd	r25, Z+5	; 0x05
     fa2:	8d 8b       	std	Y+21, r24	; 0x15

	position.x	   = new_position->x;
     fa4:	ef 89       	ldd	r30, Y+23	; 0x17
     fa6:	f8 8d       	ldd	r31, Y+24	; 0x18
     fa8:	80 81       	ld	r24, Z
     faa:	91 81       	ldd	r25, Z+1	; 0x01
     fac:	90 93 0b 01 	sts	0x010B, r25
     fb0:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = new_position->y;
     fb4:	ef 89       	ldd	r30, Y+23	; 0x17
     fb6:	f8 8d       	ldd	r31, Y+24	; 0x18
     fb8:	82 81       	ldd	r24, Z+2	; 0x02
     fba:	93 81       	ldd	r25, Z+3	; 0x03
     fbc:	90 93 0d 01 	sts	0x010D, r25
     fc0:	80 93 0c 01 	sts	0x010C, r24
	position.angle = new_position->angle;
     fc4:	ef 89       	ldd	r30, Y+23	; 0x17
     fc6:	f8 8d       	ldd	r31, Y+24	; 0x18
     fc8:	84 81       	ldd	r24, Z+4	; 0x04
     fca:	95 81       	ldd	r25, Z+5	; 0x05
     fcc:	90 93 0f 01 	sts	0x010F, r25
     fd0:	80 93 0e 01 	sts	0x010E, r24
     fd4:	6c c0       	rjmp	.+216    	; 0x10ae <odometry_set_position+0x166>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	a8 e4       	ldi	r26, 0x48	; 72
     fdc:	b2 e4       	ldi	r27, 0x42	; 66
     fde:	8b 87       	std	Y+11, r24	; 0x0b
     fe0:	9c 87       	std	Y+12, r25	; 0x0c
     fe2:	ad 87       	std	Y+13, r26	; 0x0d
     fe4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe6:	6b 85       	ldd	r22, Y+11	; 0x0b
     fe8:	7c 85       	ldd	r23, Y+12	; 0x0c
     fea:	8d 85       	ldd	r24, Y+13	; 0x0d
     fec:	9e 85       	ldd	r25, Y+14	; 0x0e
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e4       	ldi	r19, 0x40	; 64
     ff2:	4c e1       	ldi	r20, 0x1C	; 28
     ff4:	55 e4       	ldi	r21, 0x45	; 69
     ff6:	5a d4       	rcall	.+2228   	; 0x18ac <__mulsf3>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	8f 83       	std	Y+7, r24	; 0x07
     ffe:	98 87       	std	Y+8, r25	; 0x08
    1000:	a9 87       	std	Y+9, r26	; 0x09
    1002:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1004:	6f 81       	ldd	r22, Y+7	; 0x07
    1006:	78 85       	ldd	r23, Y+8	; 0x08
    1008:	89 85       	ldd	r24, Y+9	; 0x09
    100a:	9a 85       	ldd	r25, Y+10	; 0x0a
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e8       	ldi	r20, 0x80	; 128
    1012:	5f e3       	ldi	r21, 0x3F	; 63
    1014:	fd d2       	rcall	.+1530   	; 0x1610 <__cmpsf2>
    1016:	88 23       	and	r24, r24
    1018:	2c f4       	brge	.+10     	; 0x1024 <odometry_set_position+0xdc>
		__ticks = 1;
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	9e 83       	std	Y+6, r25	; 0x06
    1020:	8d 83       	std	Y+5, r24	; 0x05
    1022:	3b c0       	rjmp	.+118    	; 0x109a <odometry_set_position+0x152>
	else if (__tmp > 65535)
    1024:	6f 81       	ldd	r22, Y+7	; 0x07
    1026:	78 85       	ldd	r23, Y+8	; 0x08
    1028:	89 85       	ldd	r24, Y+9	; 0x09
    102a:	9a 85       	ldd	r25, Y+10	; 0x0a
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	3f ef       	ldi	r19, 0xFF	; 255
    1030:	4f e7       	ldi	r20, 0x7F	; 127
    1032:	57 e4       	ldi	r21, 0x47	; 71
    1034:	37 d4       	rcall	.+2158   	; 0x18a4 <__gesf2>
    1036:	18 16       	cp	r1, r24
    1038:	3c f5       	brge	.+78     	; 0x1088 <odometry_set_position+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103a:	6b 85       	ldd	r22, Y+11	; 0x0b
    103c:	7c 85       	ldd	r23, Y+12	; 0x0c
    103e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1040:	9e 85       	ldd	r25, Y+14	; 0x0e
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	40 e2       	ldi	r20, 0x20	; 32
    1048:	51 e4       	ldi	r21, 0x41	; 65
    104a:	30 d4       	rcall	.+2144   	; 0x18ac <__mulsf3>
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	bc 01       	movw	r22, r24
    1052:	cd 01       	movw	r24, r26
    1054:	49 d3       	rcall	.+1682   	; 0x16e8 <__fixunssfsi>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	9e 83       	std	Y+6, r25	; 0x06
    105c:	8d 83       	std	Y+5, r24	; 0x05
    105e:	0f c0       	rjmp	.+30     	; 0x107e <odometry_set_position+0x136>
    1060:	8a ef       	ldi	r24, 0xFA	; 250
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	9c 83       	std	Y+4, r25	; 0x04
    1066:	8b 83       	std	Y+3, r24	; 0x03
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	9c 81       	ldd	r25, Y+4	; 0x04
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	f1 f7       	brne	.-4      	; 0x106c <odometry_set_position+0x124>
    1070:	9c 83       	std	Y+4, r25	; 0x04
    1072:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1074:	8d 81       	ldd	r24, Y+5	; 0x05
    1076:	9e 81       	ldd	r25, Y+6	; 0x06
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	9e 83       	std	Y+6, r25	; 0x06
    107c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    107e:	8d 81       	ldd	r24, Y+5	; 0x05
    1080:	9e 81       	ldd	r25, Y+6	; 0x06
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	69 f7       	brne	.-38     	; 0x1060 <odometry_set_position+0x118>
    1086:	13 c0       	rjmp	.+38     	; 0x10ae <odometry_set_position+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1088:	6f 81       	ldd	r22, Y+7	; 0x07
    108a:	78 85       	ldd	r23, Y+8	; 0x08
    108c:	89 85       	ldd	r24, Y+9	; 0x09
    108e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1090:	2b d3       	rcall	.+1622   	; 0x16e8 <__fixunssfsi>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	9e 83       	std	Y+6, r25	; 0x06
    1098:	8d 83       	std	Y+5, r24	; 0x05
    109a:	8d 81       	ldd	r24, Y+5	; 0x05
    109c:	9e 81       	ldd	r25, Y+6	; 0x06
    109e:	9a 83       	std	Y+2, r25	; 0x02
    10a0:	89 83       	std	Y+1, r24	; 0x01
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	9a 81       	ldd	r25, Y+2	; 0x02
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	f1 f7       	brne	.-4      	; 0x10a6 <odometry_set_position+0x15e>
    10aa:	9a 83       	std	Y+2, r25	; 0x02
    10ac:	89 83       	std	Y+1, r24	; 0x01
    10ae:	ce 01       	movw	r24, r28
    10b0:	0f 96       	adiw	r24, 0x0f	; 15
    10b2:	63 ec       	ldi	r22, 0xC3	; 195
    10b4:	f3 da       	rcall	.-2586   	; 0x69c <CAN_Write>
    10b6:	88 23       	and	r24, r24
    10b8:	09 f0       	breq	.+2      	; 0x10bc <odometry_set_position+0x174>
    10ba:	8d cf       	rjmp	.-230    	; 0xfd6 <odometry_set_position+0x8e>
		_delay_ms(50);
}
    10bc:	68 96       	adiw	r28, 0x18	; 24
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <timer_init>:


void timer_init(unsigned int freq)
{
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <timer_init+0xa>
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	9a 83       	std	Y+2, r25	; 0x02
    10de:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    10e0:	e0 e8       	ldi	r30, 0x80	; 128
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    10e6:	e1 e8       	ldi	r30, 0x81	; 129
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	89 e0       	ldi	r24, 0x09	; 9
    10ec:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    10ee:	08 e8       	ldi	r16, 0x88	; 136
    10f0:	10 e0       	ldi	r17, 0x00	; 0
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	9a 81       	ldd	r25, Y+2	; 0x02
    10f6:	cc 01       	movw	r24, r24
    10f8:	a0 e0       	ldi	r26, 0x00	; 0
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	1f d3       	rcall	.+1598   	; 0x1740 <__floatunsisf>
    1102:	9b 01       	movw	r18, r22
    1104:	ac 01       	movw	r20, r24
    1106:	60 e8       	ldi	r22, 0x80	; 128
    1108:	76 e9       	ldi	r23, 0x96	; 150
    110a:	88 e1       	ldi	r24, 0x18	; 24
    110c:	9b e4       	ldi	r25, 0x4B	; 75
    110e:	84 d2       	rcall	.+1288   	; 0x1618 <__divsf3>
    1110:	dc 01       	movw	r26, r24
    1112:	cb 01       	movw	r24, r22
    1114:	bc 01       	movw	r22, r24
    1116:	cd 01       	movw	r24, r26
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	40 e0       	ldi	r20, 0x00	; 0
    111e:	5f e3       	ldi	r21, 0x3F	; 63
    1120:	13 d2       	rcall	.+1062   	; 0x1548 <__addsf3>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	bc 01       	movw	r22, r24
    1128:	cd 01       	movw	r24, r26
    112a:	de d2       	rcall	.+1468   	; 0x16e8 <__fixunssfsi>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	f8 01       	movw	r30, r16
    1132:	91 83       	std	Z+1, r25	; 0x01
    1134:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    1136:	ef e6       	ldi	r30, 0x6F	; 111
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	82 e0       	ldi	r24, 0x02	; 2
    113c:	80 83       	st	Z, r24

	SREG |= 0x80;
    113e:	af e5       	ldi	r26, 0x5F	; 95
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	ef e5       	ldi	r30, 0x5F	; 95
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	80 68       	ori	r24, 0x80	; 128
    114a:	8c 93       	st	X, r24
}
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	08 95       	ret

0000115a <__vector_12>:


ISR(TIMER1_COMPA_vect)
{
    115a:	1f 92       	push	r1
    115c:	0f 92       	push	r0
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	0f 92       	push	r0
    1162:	00 90 5b 00 	lds	r0, 0x005B
    1166:	0f 92       	push	r0
    1168:	11 24       	eor	r1, r1
    116a:	2f 93       	push	r18
    116c:	3f 93       	push	r19
    116e:	4f 93       	push	r20
    1170:	5f 93       	push	r21
    1172:	6f 93       	push	r22
    1174:	7f 93       	push	r23
    1176:	8f 93       	push	r24
    1178:	9f 93       	push	r25
    117a:	af 93       	push	r26
    117c:	bf 93       	push	r27
    117e:	ef 93       	push	r30
    1180:	ff 93       	push	r31
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    118a:	80 91 4f 01 	lds	r24, 0x014F
    118e:	90 91 50 01 	lds	r25, 0x0150
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	29 f0       	breq	.+10     	; 0x11a0 <__vector_12+0x46>
        timer_callback();
    1196:	e0 91 4f 01 	lds	r30, 0x014F
    119a:	f0 91 50 01 	lds	r31, 0x0150
    119e:	09 95       	icall
	sys_time++;
    11a0:	80 91 51 01 	lds	r24, 0x0151
    11a4:	90 91 52 01 	lds	r25, 0x0152
    11a8:	a0 91 53 01 	lds	r26, 0x0153
    11ac:	b0 91 54 01 	lds	r27, 0x0154
    11b0:	01 96       	adiw	r24, 0x01	; 1
    11b2:	a1 1d       	adc	r26, r1
    11b4:	b1 1d       	adc	r27, r1
    11b6:	80 93 51 01 	sts	0x0151, r24
    11ba:	90 93 52 01 	sts	0x0152, r25
    11be:	a0 93 53 01 	sts	0x0153, r26
    11c2:	b0 93 54 01 	sts	0x0154, r27
}
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	ff 91       	pop	r31
    11cc:	ef 91       	pop	r30
    11ce:	bf 91       	pop	r27
    11d0:	af 91       	pop	r26
    11d2:	9f 91       	pop	r25
    11d4:	8f 91       	pop	r24
    11d6:	7f 91       	pop	r23
    11d8:	6f 91       	pop	r22
    11da:	5f 91       	pop	r21
    11dc:	4f 91       	pop	r20
    11de:	3f 91       	pop	r19
    11e0:	2f 91       	pop	r18
    11e2:	0f 90       	pop	r0
    11e4:	00 92 5b 00 	sts	0x005B, r0
    11e8:	0f 90       	pop	r0
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	0f 90       	pop	r0
    11ee:	1f 90       	pop	r1
    11f0:	18 95       	reti

000011f2 <system_init>:

void system_init(void)
{
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	2e 97       	sbiw	r28, 0x0e	; 14
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	aa ef       	ldi	r26, 0xFA	; 250
    120c:	b3 e4       	ldi	r27, 0x43	; 67
    120e:	8b 87       	std	Y+11, r24	; 0x0b
    1210:	9c 87       	std	Y+12, r25	; 0x0c
    1212:	ad 87       	std	Y+13, r26	; 0x0d
    1214:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1216:	6b 85       	ldd	r22, Y+11	; 0x0b
    1218:	7c 85       	ldd	r23, Y+12	; 0x0c
    121a:	8d 85       	ldd	r24, Y+13	; 0x0d
    121c:	9e 85       	ldd	r25, Y+14	; 0x0e
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	30 e4       	ldi	r19, 0x40	; 64
    1222:	4c e1       	ldi	r20, 0x1C	; 28
    1224:	55 e4       	ldi	r21, 0x45	; 69
    1226:	42 d3       	rcall	.+1668   	; 0x18ac <__mulsf3>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	8f 83       	std	Y+7, r24	; 0x07
    122e:	98 87       	std	Y+8, r25	; 0x08
    1230:	a9 87       	std	Y+9, r26	; 0x09
    1232:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1234:	6f 81       	ldd	r22, Y+7	; 0x07
    1236:	78 85       	ldd	r23, Y+8	; 0x08
    1238:	89 85       	ldd	r24, Y+9	; 0x09
    123a:	9a 85       	ldd	r25, Y+10	; 0x0a
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	40 e8       	ldi	r20, 0x80	; 128
    1242:	5f e3       	ldi	r21, 0x3F	; 63
    1244:	e5 d1       	rcall	.+970    	; 0x1610 <__cmpsf2>
    1246:	88 23       	and	r24, r24
    1248:	2c f4       	brge	.+10     	; 0x1254 <system_init+0x62>
		__ticks = 1;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	9e 83       	std	Y+6, r25	; 0x06
    1250:	8d 83       	std	Y+5, r24	; 0x05
    1252:	3b c0       	rjmp	.+118    	; 0x12ca <system_init+0xd8>
	else if (__tmp > 65535)
    1254:	6f 81       	ldd	r22, Y+7	; 0x07
    1256:	78 85       	ldd	r23, Y+8	; 0x08
    1258:	89 85       	ldd	r24, Y+9	; 0x09
    125a:	9a 85       	ldd	r25, Y+10	; 0x0a
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	3f ef       	ldi	r19, 0xFF	; 255
    1260:	4f e7       	ldi	r20, 0x7F	; 127
    1262:	57 e4       	ldi	r21, 0x47	; 71
    1264:	1f d3       	rcall	.+1598   	; 0x18a4 <__gesf2>
    1266:	18 16       	cp	r1, r24
    1268:	3c f5       	brge	.+78     	; 0x12b8 <system_init+0xc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    126a:	6b 85       	ldd	r22, Y+11	; 0x0b
    126c:	7c 85       	ldd	r23, Y+12	; 0x0c
    126e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1270:	9e 85       	ldd	r25, Y+14	; 0x0e
    1272:	20 e0       	ldi	r18, 0x00	; 0
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	40 e2       	ldi	r20, 0x20	; 32
    1278:	51 e4       	ldi	r21, 0x41	; 65
    127a:	18 d3       	rcall	.+1584   	; 0x18ac <__mulsf3>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	bc 01       	movw	r22, r24
    1282:	cd 01       	movw	r24, r26
    1284:	31 d2       	rcall	.+1122   	; 0x16e8 <__fixunssfsi>
    1286:	dc 01       	movw	r26, r24
    1288:	cb 01       	movw	r24, r22
    128a:	9e 83       	std	Y+6, r25	; 0x06
    128c:	8d 83       	std	Y+5, r24	; 0x05
    128e:	0f c0       	rjmp	.+30     	; 0x12ae <system_init+0xbc>
    1290:	8a ef       	ldi	r24, 0xFA	; 250
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	9c 83       	std	Y+4, r25	; 0x04
    1296:	8b 83       	std	Y+3, r24	; 0x03
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	9c 81       	ldd	r25, Y+4	; 0x04
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	f1 f7       	brne	.-4      	; 0x129c <system_init+0xaa>
    12a0:	9c 83       	std	Y+4, r25	; 0x04
    12a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a4:	8d 81       	ldd	r24, Y+5	; 0x05
    12a6:	9e 81       	ldd	r25, Y+6	; 0x06
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	9e 83       	std	Y+6, r25	; 0x06
    12ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ae:	8d 81       	ldd	r24, Y+5	; 0x05
    12b0:	9e 81       	ldd	r25, Y+6	; 0x06
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	69 f7       	brne	.-38     	; 0x1290 <system_init+0x9e>
    12b6:	13 c0       	rjmp	.+38     	; 0x12de <system_init+0xec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12b8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ba:	78 85       	ldd	r23, Y+8	; 0x08
    12bc:	89 85       	ldd	r24, Y+9	; 0x09
    12be:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c0:	13 d2       	rcall	.+1062   	; 0x16e8 <__fixunssfsi>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	9e 83       	std	Y+6, r25	; 0x06
    12c8:	8d 83       	std	Y+5, r24	; 0x05
    12ca:	8d 81       	ldd	r24, Y+5	; 0x05
    12cc:	9e 81       	ldd	r25, Y+6	; 0x06
    12ce:	9a 83       	std	Y+2, r25	; 0x02
    12d0:	89 83       	std	Y+1, r24	; 0x01
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	9a 81       	ldd	r25, Y+2	; 0x02
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	f1 f7       	brne	.-4      	; 0x12d6 <system_init+0xe4>
    12da:	9a 83       	std	Y+2, r25	; 0x02
    12dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	
	servo_init(50);
    12de:	82 e3       	ldi	r24, 0x32	; 50
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	0e 94 75 00 	call	0xea	; 0xea <servo_init>
	timer_init(1000);
    12e6:	88 ee       	ldi	r24, 0xE8	; 232
    12e8:	93 e0       	ldi	r25, 0x03	; 3
    12ea:	f1 de       	rcall	.-542    	; 0x10ce <timer_init>
	CAN_Init();
    12ec:	17 d9       	rcall	.-3538   	; 0x51c <CAN_Init>
}
    12ee:	2e 96       	adiw	r28, 0x0e	; 14
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <system_get_system_time>:
uint32_t system_get_system_time(void)
{
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    1308:	80 91 51 01 	lds	r24, 0x0151
    130c:	90 91 52 01 	lds	r25, 0x0152
    1310:	a0 91 53 01 	lds	r26, 0x0153
    1314:	b0 91 54 01 	lds	r27, 0x0154
}
    1318:	bc 01       	movw	r22, r24
    131a:	cd 01       	movw	r24, r26
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    1322:	1f 92       	push	r1
    1324:	0f 92       	push	r0
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	0f 92       	push	r0
    132a:	00 90 5b 00 	lds	r0, 0x005B
    132e:	0f 92       	push	r0
    1330:	11 24       	eor	r1, r1
    1332:	8f 93       	push	r24
    1334:	9f 93       	push	r25
    1336:	af 93       	push	r26
    1338:	bf 93       	push	r27
    133a:	ef 93       	push	r30
    133c:	ff 93       	push	r31
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    1346:	80 91 55 01 	lds	r24, 0x0155
    134a:	88 23       	and	r24, r24
    134c:	d9 f0       	breq	.+54     	; 0x1384 <__vector_23+0x62>
	{
		tx0_counter--;
    134e:	80 91 55 01 	lds	r24, 0x0155
    1352:	81 50       	subi	r24, 0x01	; 1
    1354:	80 93 55 01 	sts	0x0155, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    1358:	a6 ec       	ldi	r26, 0xC6	; 198
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	80 91 56 01 	lds	r24, 0x0156
    1360:	88 2f       	mov	r24, r24
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	fc 01       	movw	r30, r24
    1366:	e3 5a       	subi	r30, 0xA3	; 163
    1368:	fe 4f       	sbci	r31, 0xFE	; 254
    136a:	80 81       	ld	r24, Z
    136c:	8c 93       	st	X, r24
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    136e:	80 91 56 01 	lds	r24, 0x0156
    1372:	8f 5f       	subi	r24, 0xFF	; 255
    1374:	80 93 56 01 	sts	0x0156, r24
    1378:	80 91 56 01 	lds	r24, 0x0156
    137c:	80 34       	cpi	r24, 0x40	; 64
    137e:	11 f4       	brne	.+4      	; 0x1384 <__vector_23+0x62>
			tx0_rd_index = 0;
    1380:	10 92 56 01 	sts	0x0156, r1
	}
}
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	ff 91       	pop	r31
    138a:	ef 91       	pop	r30
    138c:	bf 91       	pop	r27
    138e:	af 91       	pop	r26
    1390:	9f 91       	pop	r25
    1392:	8f 91       	pop	r24
    1394:	0f 90       	pop	r0
    1396:	00 92 5b 00 	sts	0x005B, r0
    139a:	0f 90       	pop	r0
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	0f 90       	pop	r0
    13a0:	1f 90       	pop	r1
    13a2:	18 95       	reti

000013a4 <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    13a4:	1f 92       	push	r1
    13a6:	0f 92       	push	r0
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	0f 92       	push	r0
    13ac:	00 90 5b 00 	lds	r0, 0x005B
    13b0:	0f 92       	push	r0
    13b2:	11 24       	eor	r1, r1
    13b4:	2f 93       	push	r18
    13b6:	8f 93       	push	r24
    13b8:	9f 93       	push	r25
    13ba:	ef 93       	push	r30
    13bc:	ff 93       	push	r31
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	0f 92       	push	r0
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    13c8:	e0 ec       	ldi	r30, 0xC0	; 192
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	88 2f       	mov	r24, r24
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	8c 71       	andi	r24, 0x1C	; 28
    13d8:	90 70       	andi	r25, 0x00	; 0
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	d9 f4       	brne	.+54     	; 0x1414 <__vector_21+0x70>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    13de:	80 91 57 01 	lds	r24, 0x0157
    13e2:	88 2f       	mov	r24, r24
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	e6 ec       	ldi	r30, 0xC6	; 198
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	20 81       	ld	r18, Z
    13ec:	fc 01       	movw	r30, r24
    13ee:	e3 56       	subi	r30, 0x63	; 99
    13f0:	fe 4f       	sbci	r31, 0xFE	; 254
    13f2:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    13f4:	80 91 57 01 	lds	r24, 0x0157
    13f8:	8f 5f       	subi	r24, 0xFF	; 255
    13fa:	80 93 57 01 	sts	0x0157, r24
    13fe:	80 91 57 01 	lds	r24, 0x0157
    1402:	80 34       	cpi	r24, 0x40	; 64
    1404:	11 f4       	brne	.+4      	; 0x140a <__vector_21+0x66>
			rx0_wr_index = 0;
    1406:	10 92 57 01 	sts	0x0157, r1

		rx0_counter++;
    140a:	80 91 58 01 	lds	r24, 0x0158
    140e:	8f 5f       	subi	r24, 0xFF	; 255
    1410:	80 93 58 01 	sts	0x0158, r24
	}
}
    1414:	0f 90       	pop	r0
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	ff 91       	pop	r31
    141c:	ef 91       	pop	r30
    141e:	9f 91       	pop	r25
    1420:	8f 91       	pop	r24
    1422:	2f 91       	pop	r18
    1424:	0f 90       	pop	r0
    1426:	00 92 5b 00 	sts	0x005B, r0
    142a:	0f 90       	pop	r0
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	0f 90       	pop	r0
    1430:	1f 90       	pop	r1
    1432:	18 95       	reti

00001434 <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    1434:	1f 92       	push	r1
    1436:	0f 92       	push	r0
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	0f 92       	push	r0
    143c:	00 90 5b 00 	lds	r0, 0x005B
    1440:	0f 92       	push	r0
    1442:	11 24       	eor	r1, r1
    1444:	8f 93       	push	r24
    1446:	9f 93       	push	r25
    1448:	af 93       	push	r26
    144a:	bf 93       	push	r27
    144c:	ef 93       	push	r30
    144e:	ff 93       	push	r31
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    1458:	80 91 59 01 	lds	r24, 0x0159
    145c:	88 23       	and	r24, r24
    145e:	d9 f0       	breq	.+54     	; 0x1496 <__vector_34+0x62>
	{
		tx1_counter--;
    1460:	80 91 59 01 	lds	r24, 0x0159
    1464:	81 50       	subi	r24, 0x01	; 1
    1466:	80 93 59 01 	sts	0x0159, r24
		UDR1=tx1_buffer[tx1_rd_index];
    146a:	ae ec       	ldi	r26, 0xCE	; 206
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	80 91 5a 01 	lds	r24, 0x015A
    1472:	88 2f       	mov	r24, r24
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	fc 01       	movw	r30, r24
    1478:	e3 52       	subi	r30, 0x23	; 35
    147a:	fe 4f       	sbci	r31, 0xFE	; 254
    147c:	80 81       	ld	r24, Z
    147e:	8c 93       	st	X, r24
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    1480:	80 91 5a 01 	lds	r24, 0x015A
    1484:	8f 5f       	subi	r24, 0xFF	; 255
    1486:	80 93 5a 01 	sts	0x015A, r24
    148a:	80 91 5a 01 	lds	r24, 0x015A
    148e:	80 34       	cpi	r24, 0x40	; 64
    1490:	11 f4       	brne	.+4      	; 0x1496 <__vector_34+0x62>
			tx1_rd_index = 0;
    1492:	10 92 5a 01 	sts	0x015A, r1
	}
}
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	ff 91       	pop	r31
    149c:	ef 91       	pop	r30
    149e:	bf 91       	pop	r27
    14a0:	af 91       	pop	r26
    14a2:	9f 91       	pop	r25
    14a4:	8f 91       	pop	r24
    14a6:	0f 90       	pop	r0
    14a8:	00 92 5b 00 	sts	0x005B, r0
    14ac:	0f 90       	pop	r0
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	0f 90       	pop	r0
    14b2:	1f 90       	pop	r1
    14b4:	18 95       	reti

000014b6 <__vector_32>:

ISR(USART1_RX_vect)
{
    14b6:	1f 92       	push	r1
    14b8:	0f 92       	push	r0
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	0f 92       	push	r0
    14be:	00 90 5b 00 	lds	r0, 0x005B
    14c2:	0f 92       	push	r0
    14c4:	11 24       	eor	r1, r1
    14c6:	2f 93       	push	r18
    14c8:	8f 93       	push	r24
    14ca:	9f 93       	push	r25
    14cc:	ef 93       	push	r30
    14ce:	ff 93       	push	r31
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	0f 92       	push	r0
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    14da:	e8 ec       	ldi	r30, 0xC8	; 200
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	88 2f       	mov	r24, r24
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	8c 71       	andi	r24, 0x1C	; 28
    14ea:	90 70       	andi	r25, 0x00	; 0
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	d9 f4       	brne	.+54     	; 0x1526 <__vector_32+0x70>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    14f0:	80 91 5b 01 	lds	r24, 0x015B
    14f4:	88 2f       	mov	r24, r24
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	ee ec       	ldi	r30, 0xCE	; 206
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	20 81       	ld	r18, Z
    14fe:	fc 01       	movw	r30, r24
    1500:	e3 5e       	subi	r30, 0xE3	; 227
    1502:	fd 4f       	sbci	r31, 0xFD	; 253
    1504:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    1506:	80 91 5b 01 	lds	r24, 0x015B
    150a:	8f 5f       	subi	r24, 0xFF	; 255
    150c:	80 93 5b 01 	sts	0x015B, r24
    1510:	80 91 5b 01 	lds	r24, 0x015B
    1514:	80 34       	cpi	r24, 0x40	; 64
    1516:	11 f4       	brne	.+4      	; 0x151c <__vector_32+0x66>
		rx1_wr_index = 0;
    1518:	10 92 5b 01 	sts	0x015B, r1

		rx1_counter++;
    151c:	80 91 5c 01 	lds	r24, 0x015C
    1520:	8f 5f       	subi	r24, 0xFF	; 255
    1522:	80 93 5c 01 	sts	0x015C, r24
	}
}
    1526:	0f 90       	pop	r0
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	ff 91       	pop	r31
    152e:	ef 91       	pop	r30
    1530:	9f 91       	pop	r25
    1532:	8f 91       	pop	r24
    1534:	2f 91       	pop	r18
    1536:	0f 90       	pop	r0
    1538:	00 92 5b 00 	sts	0x005B, r0
    153c:	0f 90       	pop	r0
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	0f 90       	pop	r0
    1542:	1f 90       	pop	r1
    1544:	18 95       	reti

00001546 <__subsf3>:
    1546:	50 58       	subi	r21, 0x80	; 128

00001548 <__addsf3>:
    1548:	bb 27       	eor	r27, r27
    154a:	aa 27       	eor	r26, r26
    154c:	0e d0       	rcall	.+28     	; 0x156a <__addsf3x>
    154e:	70 c1       	rjmp	.+736    	; 0x1830 <__fp_round>
    1550:	61 d1       	rcall	.+706    	; 0x1814 <__fp_pscA>
    1552:	30 f0       	brcs	.+12     	; 0x1560 <__addsf3+0x18>
    1554:	66 d1       	rcall	.+716    	; 0x1822 <__fp_pscB>
    1556:	20 f0       	brcs	.+8      	; 0x1560 <__addsf3+0x18>
    1558:	31 f4       	brne	.+12     	; 0x1566 <__addsf3+0x1e>
    155a:	9f 3f       	cpi	r25, 0xFF	; 255
    155c:	11 f4       	brne	.+4      	; 0x1562 <__addsf3+0x1a>
    155e:	1e f4       	brtc	.+6      	; 0x1566 <__addsf3+0x1e>
    1560:	56 c1       	rjmp	.+684    	; 0x180e <__fp_nan>
    1562:	0e f4       	brtc	.+2      	; 0x1566 <__addsf3+0x1e>
    1564:	e0 95       	com	r30
    1566:	e7 fb       	bst	r30, 7
    1568:	4c c1       	rjmp	.+664    	; 0x1802 <__fp_inf>

0000156a <__addsf3x>:
    156a:	e9 2f       	mov	r30, r25
    156c:	72 d1       	rcall	.+740    	; 0x1852 <__fp_split3>
    156e:	80 f3       	brcs	.-32     	; 0x1550 <__addsf3+0x8>
    1570:	ba 17       	cp	r27, r26
    1572:	62 07       	cpc	r22, r18
    1574:	73 07       	cpc	r23, r19
    1576:	84 07       	cpc	r24, r20
    1578:	95 07       	cpc	r25, r21
    157a:	18 f0       	brcs	.+6      	; 0x1582 <__addsf3x+0x18>
    157c:	71 f4       	brne	.+28     	; 0x159a <__addsf3x+0x30>
    157e:	9e f5       	brtc	.+102    	; 0x15e6 <__addsf3x+0x7c>
    1580:	8a c1       	rjmp	.+788    	; 0x1896 <__fp_zero>
    1582:	0e f4       	brtc	.+2      	; 0x1586 <__addsf3x+0x1c>
    1584:	e0 95       	com	r30
    1586:	0b 2e       	mov	r0, r27
    1588:	ba 2f       	mov	r27, r26
    158a:	a0 2d       	mov	r26, r0
    158c:	0b 01       	movw	r0, r22
    158e:	b9 01       	movw	r22, r18
    1590:	90 01       	movw	r18, r0
    1592:	0c 01       	movw	r0, r24
    1594:	ca 01       	movw	r24, r20
    1596:	a0 01       	movw	r20, r0
    1598:	11 24       	eor	r1, r1
    159a:	ff 27       	eor	r31, r31
    159c:	59 1b       	sub	r21, r25
    159e:	99 f0       	breq	.+38     	; 0x15c6 <__addsf3x+0x5c>
    15a0:	59 3f       	cpi	r21, 0xF9	; 249
    15a2:	50 f4       	brcc	.+20     	; 0x15b8 <__addsf3x+0x4e>
    15a4:	50 3e       	cpi	r21, 0xE0	; 224
    15a6:	68 f1       	brcs	.+90     	; 0x1602 <__addsf3x+0x98>
    15a8:	1a 16       	cp	r1, r26
    15aa:	f0 40       	sbci	r31, 0x00	; 0
    15ac:	a2 2f       	mov	r26, r18
    15ae:	23 2f       	mov	r18, r19
    15b0:	34 2f       	mov	r19, r20
    15b2:	44 27       	eor	r20, r20
    15b4:	58 5f       	subi	r21, 0xF8	; 248
    15b6:	f3 cf       	rjmp	.-26     	; 0x159e <__addsf3x+0x34>
    15b8:	46 95       	lsr	r20
    15ba:	37 95       	ror	r19
    15bc:	27 95       	ror	r18
    15be:	a7 95       	ror	r26
    15c0:	f0 40       	sbci	r31, 0x00	; 0
    15c2:	53 95       	inc	r21
    15c4:	c9 f7       	brne	.-14     	; 0x15b8 <__addsf3x+0x4e>
    15c6:	7e f4       	brtc	.+30     	; 0x15e6 <__addsf3x+0x7c>
    15c8:	1f 16       	cp	r1, r31
    15ca:	ba 0b       	sbc	r27, r26
    15cc:	62 0b       	sbc	r22, r18
    15ce:	73 0b       	sbc	r23, r19
    15d0:	84 0b       	sbc	r24, r20
    15d2:	ba f0       	brmi	.+46     	; 0x1602 <__addsf3x+0x98>
    15d4:	91 50       	subi	r25, 0x01	; 1
    15d6:	a1 f0       	breq	.+40     	; 0x1600 <__addsf3x+0x96>
    15d8:	ff 0f       	add	r31, r31
    15da:	bb 1f       	adc	r27, r27
    15dc:	66 1f       	adc	r22, r22
    15de:	77 1f       	adc	r23, r23
    15e0:	88 1f       	adc	r24, r24
    15e2:	c2 f7       	brpl	.-16     	; 0x15d4 <__addsf3x+0x6a>
    15e4:	0e c0       	rjmp	.+28     	; 0x1602 <__addsf3x+0x98>
    15e6:	ba 0f       	add	r27, r26
    15e8:	62 1f       	adc	r22, r18
    15ea:	73 1f       	adc	r23, r19
    15ec:	84 1f       	adc	r24, r20
    15ee:	48 f4       	brcc	.+18     	; 0x1602 <__addsf3x+0x98>
    15f0:	87 95       	ror	r24
    15f2:	77 95       	ror	r23
    15f4:	67 95       	ror	r22
    15f6:	b7 95       	ror	r27
    15f8:	f7 95       	ror	r31
    15fa:	9e 3f       	cpi	r25, 0xFE	; 254
    15fc:	08 f0       	brcs	.+2      	; 0x1600 <__addsf3x+0x96>
    15fe:	b3 cf       	rjmp	.-154    	; 0x1566 <__addsf3+0x1e>
    1600:	93 95       	inc	r25
    1602:	88 0f       	add	r24, r24
    1604:	08 f0       	brcs	.+2      	; 0x1608 <__addsf3x+0x9e>
    1606:	99 27       	eor	r25, r25
    1608:	ee 0f       	add	r30, r30
    160a:	97 95       	ror	r25
    160c:	87 95       	ror	r24
    160e:	08 95       	ret

00001610 <__cmpsf2>:
    1610:	d4 d0       	rcall	.+424    	; 0x17ba <__fp_cmp>
    1612:	08 f4       	brcc	.+2      	; 0x1616 <__cmpsf2+0x6>
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	08 95       	ret

00001618 <__divsf3>:
    1618:	0c d0       	rcall	.+24     	; 0x1632 <__divsf3x>
    161a:	0a c1       	rjmp	.+532    	; 0x1830 <__fp_round>
    161c:	02 d1       	rcall	.+516    	; 0x1822 <__fp_pscB>
    161e:	40 f0       	brcs	.+16     	; 0x1630 <__divsf3+0x18>
    1620:	f9 d0       	rcall	.+498    	; 0x1814 <__fp_pscA>
    1622:	30 f0       	brcs	.+12     	; 0x1630 <__divsf3+0x18>
    1624:	21 f4       	brne	.+8      	; 0x162e <__divsf3+0x16>
    1626:	5f 3f       	cpi	r21, 0xFF	; 255
    1628:	19 f0       	breq	.+6      	; 0x1630 <__divsf3+0x18>
    162a:	eb c0       	rjmp	.+470    	; 0x1802 <__fp_inf>
    162c:	51 11       	cpse	r21, r1
    162e:	34 c1       	rjmp	.+616    	; 0x1898 <__fp_szero>
    1630:	ee c0       	rjmp	.+476    	; 0x180e <__fp_nan>

00001632 <__divsf3x>:
    1632:	0f d1       	rcall	.+542    	; 0x1852 <__fp_split3>
    1634:	98 f3       	brcs	.-26     	; 0x161c <__divsf3+0x4>

00001636 <__divsf3_pse>:
    1636:	99 23       	and	r25, r25
    1638:	c9 f3       	breq	.-14     	; 0x162c <__divsf3+0x14>
    163a:	55 23       	and	r21, r21
    163c:	b1 f3       	breq	.-20     	; 0x162a <__divsf3+0x12>
    163e:	95 1b       	sub	r25, r21
    1640:	55 0b       	sbc	r21, r21
    1642:	bb 27       	eor	r27, r27
    1644:	aa 27       	eor	r26, r26
    1646:	62 17       	cp	r22, r18
    1648:	73 07       	cpc	r23, r19
    164a:	84 07       	cpc	r24, r20
    164c:	38 f0       	brcs	.+14     	; 0x165c <__divsf3_pse+0x26>
    164e:	9f 5f       	subi	r25, 0xFF	; 255
    1650:	5f 4f       	sbci	r21, 0xFF	; 255
    1652:	22 0f       	add	r18, r18
    1654:	33 1f       	adc	r19, r19
    1656:	44 1f       	adc	r20, r20
    1658:	aa 1f       	adc	r26, r26
    165a:	a9 f3       	breq	.-22     	; 0x1646 <__divsf3_pse+0x10>
    165c:	33 d0       	rcall	.+102    	; 0x16c4 <__divsf3_pse+0x8e>
    165e:	0e 2e       	mov	r0, r30
    1660:	3a f0       	brmi	.+14     	; 0x1670 <__divsf3_pse+0x3a>
    1662:	e0 e8       	ldi	r30, 0x80	; 128
    1664:	30 d0       	rcall	.+96     	; 0x16c6 <__divsf3_pse+0x90>
    1666:	91 50       	subi	r25, 0x01	; 1
    1668:	50 40       	sbci	r21, 0x00	; 0
    166a:	e6 95       	lsr	r30
    166c:	00 1c       	adc	r0, r0
    166e:	ca f7       	brpl	.-14     	; 0x1662 <__divsf3_pse+0x2c>
    1670:	29 d0       	rcall	.+82     	; 0x16c4 <__divsf3_pse+0x8e>
    1672:	fe 2f       	mov	r31, r30
    1674:	27 d0       	rcall	.+78     	; 0x16c4 <__divsf3_pse+0x8e>
    1676:	66 0f       	add	r22, r22
    1678:	77 1f       	adc	r23, r23
    167a:	88 1f       	adc	r24, r24
    167c:	bb 1f       	adc	r27, r27
    167e:	26 17       	cp	r18, r22
    1680:	37 07       	cpc	r19, r23
    1682:	48 07       	cpc	r20, r24
    1684:	ab 07       	cpc	r26, r27
    1686:	b0 e8       	ldi	r27, 0x80	; 128
    1688:	09 f0       	breq	.+2      	; 0x168c <__divsf3_pse+0x56>
    168a:	bb 0b       	sbc	r27, r27
    168c:	80 2d       	mov	r24, r0
    168e:	bf 01       	movw	r22, r30
    1690:	ff 27       	eor	r31, r31
    1692:	93 58       	subi	r25, 0x83	; 131
    1694:	5f 4f       	sbci	r21, 0xFF	; 255
    1696:	2a f0       	brmi	.+10     	; 0x16a2 <__divsf3_pse+0x6c>
    1698:	9e 3f       	cpi	r25, 0xFE	; 254
    169a:	51 05       	cpc	r21, r1
    169c:	68 f0       	brcs	.+26     	; 0x16b8 <__divsf3_pse+0x82>
    169e:	b1 c0       	rjmp	.+354    	; 0x1802 <__fp_inf>
    16a0:	fb c0       	rjmp	.+502    	; 0x1898 <__fp_szero>
    16a2:	5f 3f       	cpi	r21, 0xFF	; 255
    16a4:	ec f3       	brlt	.-6      	; 0x16a0 <__divsf3_pse+0x6a>
    16a6:	98 3e       	cpi	r25, 0xE8	; 232
    16a8:	dc f3       	brlt	.-10     	; 0x16a0 <__divsf3_pse+0x6a>
    16aa:	86 95       	lsr	r24
    16ac:	77 95       	ror	r23
    16ae:	67 95       	ror	r22
    16b0:	b7 95       	ror	r27
    16b2:	f7 95       	ror	r31
    16b4:	9f 5f       	subi	r25, 0xFF	; 255
    16b6:	c9 f7       	brne	.-14     	; 0x16aa <__divsf3_pse+0x74>
    16b8:	88 0f       	add	r24, r24
    16ba:	91 1d       	adc	r25, r1
    16bc:	96 95       	lsr	r25
    16be:	87 95       	ror	r24
    16c0:	97 f9       	bld	r25, 7
    16c2:	08 95       	ret
    16c4:	e1 e0       	ldi	r30, 0x01	; 1
    16c6:	66 0f       	add	r22, r22
    16c8:	77 1f       	adc	r23, r23
    16ca:	88 1f       	adc	r24, r24
    16cc:	bb 1f       	adc	r27, r27
    16ce:	62 17       	cp	r22, r18
    16d0:	73 07       	cpc	r23, r19
    16d2:	84 07       	cpc	r24, r20
    16d4:	ba 07       	cpc	r27, r26
    16d6:	20 f0       	brcs	.+8      	; 0x16e0 <__divsf3_pse+0xaa>
    16d8:	62 1b       	sub	r22, r18
    16da:	73 0b       	sbc	r23, r19
    16dc:	84 0b       	sbc	r24, r20
    16de:	ba 0b       	sbc	r27, r26
    16e0:	ee 1f       	adc	r30, r30
    16e2:	88 f7       	brcc	.-30     	; 0x16c6 <__divsf3_pse+0x90>
    16e4:	e0 95       	com	r30
    16e6:	08 95       	ret

000016e8 <__fixunssfsi>:
    16e8:	bc d0       	rcall	.+376    	; 0x1862 <__fp_splitA>
    16ea:	88 f0       	brcs	.+34     	; 0x170e <__fixunssfsi+0x26>
    16ec:	9f 57       	subi	r25, 0x7F	; 127
    16ee:	90 f0       	brcs	.+36     	; 0x1714 <__fixunssfsi+0x2c>
    16f0:	b9 2f       	mov	r27, r25
    16f2:	99 27       	eor	r25, r25
    16f4:	b7 51       	subi	r27, 0x17	; 23
    16f6:	a0 f0       	brcs	.+40     	; 0x1720 <__fixunssfsi+0x38>
    16f8:	d1 f0       	breq	.+52     	; 0x172e <__fixunssfsi+0x46>
    16fa:	66 0f       	add	r22, r22
    16fc:	77 1f       	adc	r23, r23
    16fe:	88 1f       	adc	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	1a f0       	brmi	.+6      	; 0x170a <__fixunssfsi+0x22>
    1704:	ba 95       	dec	r27
    1706:	c9 f7       	brne	.-14     	; 0x16fa <__fixunssfsi+0x12>
    1708:	12 c0       	rjmp	.+36     	; 0x172e <__fixunssfsi+0x46>
    170a:	b1 30       	cpi	r27, 0x01	; 1
    170c:	81 f0       	breq	.+32     	; 0x172e <__fixunssfsi+0x46>
    170e:	c3 d0       	rcall	.+390    	; 0x1896 <__fp_zero>
    1710:	b1 e0       	ldi	r27, 0x01	; 1
    1712:	08 95       	ret
    1714:	c0 c0       	rjmp	.+384    	; 0x1896 <__fp_zero>
    1716:	67 2f       	mov	r22, r23
    1718:	78 2f       	mov	r23, r24
    171a:	88 27       	eor	r24, r24
    171c:	b8 5f       	subi	r27, 0xF8	; 248
    171e:	39 f0       	breq	.+14     	; 0x172e <__fixunssfsi+0x46>
    1720:	b9 3f       	cpi	r27, 0xF9	; 249
    1722:	cc f3       	brlt	.-14     	; 0x1716 <__fixunssfsi+0x2e>
    1724:	86 95       	lsr	r24
    1726:	77 95       	ror	r23
    1728:	67 95       	ror	r22
    172a:	b3 95       	inc	r27
    172c:	d9 f7       	brne	.-10     	; 0x1724 <__fixunssfsi+0x3c>
    172e:	3e f4       	brtc	.+14     	; 0x173e <__fixunssfsi+0x56>
    1730:	90 95       	com	r25
    1732:	80 95       	com	r24
    1734:	70 95       	com	r23
    1736:	61 95       	neg	r22
    1738:	7f 4f       	sbci	r23, 0xFF	; 255
    173a:	8f 4f       	sbci	r24, 0xFF	; 255
    173c:	9f 4f       	sbci	r25, 0xFF	; 255
    173e:	08 95       	ret

00001740 <__floatunsisf>:
    1740:	e8 94       	clt
    1742:	09 c0       	rjmp	.+18     	; 0x1756 <__floatsisf+0x12>

00001744 <__floatsisf>:
    1744:	97 fb       	bst	r25, 7
    1746:	3e f4       	brtc	.+14     	; 0x1756 <__floatsisf+0x12>
    1748:	90 95       	com	r25
    174a:	80 95       	com	r24
    174c:	70 95       	com	r23
    174e:	61 95       	neg	r22
    1750:	7f 4f       	sbci	r23, 0xFF	; 255
    1752:	8f 4f       	sbci	r24, 0xFF	; 255
    1754:	9f 4f       	sbci	r25, 0xFF	; 255
    1756:	99 23       	and	r25, r25
    1758:	a9 f0       	breq	.+42     	; 0x1784 <__floatsisf+0x40>
    175a:	f9 2f       	mov	r31, r25
    175c:	96 e9       	ldi	r25, 0x96	; 150
    175e:	bb 27       	eor	r27, r27
    1760:	93 95       	inc	r25
    1762:	f6 95       	lsr	r31
    1764:	87 95       	ror	r24
    1766:	77 95       	ror	r23
    1768:	67 95       	ror	r22
    176a:	b7 95       	ror	r27
    176c:	f1 11       	cpse	r31, r1
    176e:	f8 cf       	rjmp	.-16     	; 0x1760 <__floatsisf+0x1c>
    1770:	fa f4       	brpl	.+62     	; 0x17b0 <__floatsisf+0x6c>
    1772:	bb 0f       	add	r27, r27
    1774:	11 f4       	brne	.+4      	; 0x177a <__floatsisf+0x36>
    1776:	60 ff       	sbrs	r22, 0
    1778:	1b c0       	rjmp	.+54     	; 0x17b0 <__floatsisf+0x6c>
    177a:	6f 5f       	subi	r22, 0xFF	; 255
    177c:	7f 4f       	sbci	r23, 0xFF	; 255
    177e:	8f 4f       	sbci	r24, 0xFF	; 255
    1780:	9f 4f       	sbci	r25, 0xFF	; 255
    1782:	16 c0       	rjmp	.+44     	; 0x17b0 <__floatsisf+0x6c>
    1784:	88 23       	and	r24, r24
    1786:	11 f0       	breq	.+4      	; 0x178c <__floatsisf+0x48>
    1788:	96 e9       	ldi	r25, 0x96	; 150
    178a:	11 c0       	rjmp	.+34     	; 0x17ae <__floatsisf+0x6a>
    178c:	77 23       	and	r23, r23
    178e:	21 f0       	breq	.+8      	; 0x1798 <__floatsisf+0x54>
    1790:	9e e8       	ldi	r25, 0x8E	; 142
    1792:	87 2f       	mov	r24, r23
    1794:	76 2f       	mov	r23, r22
    1796:	05 c0       	rjmp	.+10     	; 0x17a2 <__floatsisf+0x5e>
    1798:	66 23       	and	r22, r22
    179a:	71 f0       	breq	.+28     	; 0x17b8 <__floatsisf+0x74>
    179c:	96 e8       	ldi	r25, 0x86	; 134
    179e:	86 2f       	mov	r24, r22
    17a0:	70 e0       	ldi	r23, 0x00	; 0
    17a2:	60 e0       	ldi	r22, 0x00	; 0
    17a4:	2a f0       	brmi	.+10     	; 0x17b0 <__floatsisf+0x6c>
    17a6:	9a 95       	dec	r25
    17a8:	66 0f       	add	r22, r22
    17aa:	77 1f       	adc	r23, r23
    17ac:	88 1f       	adc	r24, r24
    17ae:	da f7       	brpl	.-10     	; 0x17a6 <__floatsisf+0x62>
    17b0:	88 0f       	add	r24, r24
    17b2:	96 95       	lsr	r25
    17b4:	87 95       	ror	r24
    17b6:	97 f9       	bld	r25, 7
    17b8:	08 95       	ret

000017ba <__fp_cmp>:
    17ba:	99 0f       	add	r25, r25
    17bc:	00 08       	sbc	r0, r0
    17be:	55 0f       	add	r21, r21
    17c0:	aa 0b       	sbc	r26, r26
    17c2:	e0 e8       	ldi	r30, 0x80	; 128
    17c4:	fe ef       	ldi	r31, 0xFE	; 254
    17c6:	16 16       	cp	r1, r22
    17c8:	17 06       	cpc	r1, r23
    17ca:	e8 07       	cpc	r30, r24
    17cc:	f9 07       	cpc	r31, r25
    17ce:	c0 f0       	brcs	.+48     	; 0x1800 <__fp_cmp+0x46>
    17d0:	12 16       	cp	r1, r18
    17d2:	13 06       	cpc	r1, r19
    17d4:	e4 07       	cpc	r30, r20
    17d6:	f5 07       	cpc	r31, r21
    17d8:	98 f0       	brcs	.+38     	; 0x1800 <__fp_cmp+0x46>
    17da:	62 1b       	sub	r22, r18
    17dc:	73 0b       	sbc	r23, r19
    17de:	84 0b       	sbc	r24, r20
    17e0:	95 0b       	sbc	r25, r21
    17e2:	39 f4       	brne	.+14     	; 0x17f2 <__fp_cmp+0x38>
    17e4:	0a 26       	eor	r0, r26
    17e6:	61 f0       	breq	.+24     	; 0x1800 <__fp_cmp+0x46>
    17e8:	23 2b       	or	r18, r19
    17ea:	24 2b       	or	r18, r20
    17ec:	25 2b       	or	r18, r21
    17ee:	21 f4       	brne	.+8      	; 0x17f8 <__fp_cmp+0x3e>
    17f0:	08 95       	ret
    17f2:	0a 26       	eor	r0, r26
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <__fp_cmp+0x3e>
    17f6:	a1 40       	sbci	r26, 0x01	; 1
    17f8:	a6 95       	lsr	r26
    17fa:	8f ef       	ldi	r24, 0xFF	; 255
    17fc:	81 1d       	adc	r24, r1
    17fe:	81 1d       	adc	r24, r1
    1800:	08 95       	ret

00001802 <__fp_inf>:
    1802:	97 f9       	bld	r25, 7
    1804:	9f 67       	ori	r25, 0x7F	; 127
    1806:	80 e8       	ldi	r24, 0x80	; 128
    1808:	70 e0       	ldi	r23, 0x00	; 0
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	08 95       	ret

0000180e <__fp_nan>:
    180e:	9f ef       	ldi	r25, 0xFF	; 255
    1810:	80 ec       	ldi	r24, 0xC0	; 192
    1812:	08 95       	ret

00001814 <__fp_pscA>:
    1814:	00 24       	eor	r0, r0
    1816:	0a 94       	dec	r0
    1818:	16 16       	cp	r1, r22
    181a:	17 06       	cpc	r1, r23
    181c:	18 06       	cpc	r1, r24
    181e:	09 06       	cpc	r0, r25
    1820:	08 95       	ret

00001822 <__fp_pscB>:
    1822:	00 24       	eor	r0, r0
    1824:	0a 94       	dec	r0
    1826:	12 16       	cp	r1, r18
    1828:	13 06       	cpc	r1, r19
    182a:	14 06       	cpc	r1, r20
    182c:	05 06       	cpc	r0, r21
    182e:	08 95       	ret

00001830 <__fp_round>:
    1830:	09 2e       	mov	r0, r25
    1832:	03 94       	inc	r0
    1834:	00 0c       	add	r0, r0
    1836:	11 f4       	brne	.+4      	; 0x183c <__fp_round+0xc>
    1838:	88 23       	and	r24, r24
    183a:	52 f0       	brmi	.+20     	; 0x1850 <__fp_round+0x20>
    183c:	bb 0f       	add	r27, r27
    183e:	40 f4       	brcc	.+16     	; 0x1850 <__fp_round+0x20>
    1840:	bf 2b       	or	r27, r31
    1842:	11 f4       	brne	.+4      	; 0x1848 <__fp_round+0x18>
    1844:	60 ff       	sbrs	r22, 0
    1846:	04 c0       	rjmp	.+8      	; 0x1850 <__fp_round+0x20>
    1848:	6f 5f       	subi	r22, 0xFF	; 255
    184a:	7f 4f       	sbci	r23, 0xFF	; 255
    184c:	8f 4f       	sbci	r24, 0xFF	; 255
    184e:	9f 4f       	sbci	r25, 0xFF	; 255
    1850:	08 95       	ret

00001852 <__fp_split3>:
    1852:	57 fd       	sbrc	r21, 7
    1854:	90 58       	subi	r25, 0x80	; 128
    1856:	44 0f       	add	r20, r20
    1858:	55 1f       	adc	r21, r21
    185a:	59 f0       	breq	.+22     	; 0x1872 <__fp_splitA+0x10>
    185c:	5f 3f       	cpi	r21, 0xFF	; 255
    185e:	71 f0       	breq	.+28     	; 0x187c <__fp_splitA+0x1a>
    1860:	47 95       	ror	r20

00001862 <__fp_splitA>:
    1862:	88 0f       	add	r24, r24
    1864:	97 fb       	bst	r25, 7
    1866:	99 1f       	adc	r25, r25
    1868:	61 f0       	breq	.+24     	; 0x1882 <__fp_splitA+0x20>
    186a:	9f 3f       	cpi	r25, 0xFF	; 255
    186c:	79 f0       	breq	.+30     	; 0x188c <__fp_splitA+0x2a>
    186e:	87 95       	ror	r24
    1870:	08 95       	ret
    1872:	12 16       	cp	r1, r18
    1874:	13 06       	cpc	r1, r19
    1876:	14 06       	cpc	r1, r20
    1878:	55 1f       	adc	r21, r21
    187a:	f2 cf       	rjmp	.-28     	; 0x1860 <__fp_split3+0xe>
    187c:	46 95       	lsr	r20
    187e:	f1 df       	rcall	.-30     	; 0x1862 <__fp_splitA>
    1880:	08 c0       	rjmp	.+16     	; 0x1892 <__fp_splitA+0x30>
    1882:	16 16       	cp	r1, r22
    1884:	17 06       	cpc	r1, r23
    1886:	18 06       	cpc	r1, r24
    1888:	99 1f       	adc	r25, r25
    188a:	f1 cf       	rjmp	.-30     	; 0x186e <__fp_splitA+0xc>
    188c:	86 95       	lsr	r24
    188e:	71 05       	cpc	r23, r1
    1890:	61 05       	cpc	r22, r1
    1892:	08 94       	sec
    1894:	08 95       	ret

00001896 <__fp_zero>:
    1896:	e8 94       	clt

00001898 <__fp_szero>:
    1898:	bb 27       	eor	r27, r27
    189a:	66 27       	eor	r22, r22
    189c:	77 27       	eor	r23, r23
    189e:	cb 01       	movw	r24, r22
    18a0:	97 f9       	bld	r25, 7
    18a2:	08 95       	ret

000018a4 <__gesf2>:
    18a4:	8a df       	rcall	.-236    	; 0x17ba <__fp_cmp>
    18a6:	08 f4       	brcc	.+2      	; 0x18aa <__gesf2+0x6>
    18a8:	8f ef       	ldi	r24, 0xFF	; 255
    18aa:	08 95       	ret

000018ac <__mulsf3>:
    18ac:	0b d0       	rcall	.+22     	; 0x18c4 <__mulsf3x>
    18ae:	c0 cf       	rjmp	.-128    	; 0x1830 <__fp_round>
    18b0:	b1 df       	rcall	.-158    	; 0x1814 <__fp_pscA>
    18b2:	28 f0       	brcs	.+10     	; 0x18be <__mulsf3+0x12>
    18b4:	b6 df       	rcall	.-148    	; 0x1822 <__fp_pscB>
    18b6:	18 f0       	brcs	.+6      	; 0x18be <__mulsf3+0x12>
    18b8:	95 23       	and	r25, r21
    18ba:	09 f0       	breq	.+2      	; 0x18be <__mulsf3+0x12>
    18bc:	a2 cf       	rjmp	.-188    	; 0x1802 <__fp_inf>
    18be:	a7 cf       	rjmp	.-178    	; 0x180e <__fp_nan>
    18c0:	11 24       	eor	r1, r1
    18c2:	ea cf       	rjmp	.-44     	; 0x1898 <__fp_szero>

000018c4 <__mulsf3x>:
    18c4:	c6 df       	rcall	.-116    	; 0x1852 <__fp_split3>
    18c6:	a0 f3       	brcs	.-24     	; 0x18b0 <__mulsf3+0x4>

000018c8 <__mulsf3_pse>:
    18c8:	95 9f       	mul	r25, r21
    18ca:	d1 f3       	breq	.-12     	; 0x18c0 <__mulsf3+0x14>
    18cc:	95 0f       	add	r25, r21
    18ce:	50 e0       	ldi	r21, 0x00	; 0
    18d0:	55 1f       	adc	r21, r21
    18d2:	62 9f       	mul	r22, r18
    18d4:	f0 01       	movw	r30, r0
    18d6:	72 9f       	mul	r23, r18
    18d8:	bb 27       	eor	r27, r27
    18da:	f0 0d       	add	r31, r0
    18dc:	b1 1d       	adc	r27, r1
    18de:	63 9f       	mul	r22, r19
    18e0:	aa 27       	eor	r26, r26
    18e2:	f0 0d       	add	r31, r0
    18e4:	b1 1d       	adc	r27, r1
    18e6:	aa 1f       	adc	r26, r26
    18e8:	64 9f       	mul	r22, r20
    18ea:	66 27       	eor	r22, r22
    18ec:	b0 0d       	add	r27, r0
    18ee:	a1 1d       	adc	r26, r1
    18f0:	66 1f       	adc	r22, r22
    18f2:	82 9f       	mul	r24, r18
    18f4:	22 27       	eor	r18, r18
    18f6:	b0 0d       	add	r27, r0
    18f8:	a1 1d       	adc	r26, r1
    18fa:	62 1f       	adc	r22, r18
    18fc:	73 9f       	mul	r23, r19
    18fe:	b0 0d       	add	r27, r0
    1900:	a1 1d       	adc	r26, r1
    1902:	62 1f       	adc	r22, r18
    1904:	83 9f       	mul	r24, r19
    1906:	a0 0d       	add	r26, r0
    1908:	61 1d       	adc	r22, r1
    190a:	22 1f       	adc	r18, r18
    190c:	74 9f       	mul	r23, r20
    190e:	33 27       	eor	r19, r19
    1910:	a0 0d       	add	r26, r0
    1912:	61 1d       	adc	r22, r1
    1914:	23 1f       	adc	r18, r19
    1916:	84 9f       	mul	r24, r20
    1918:	60 0d       	add	r22, r0
    191a:	21 1d       	adc	r18, r1
    191c:	82 2f       	mov	r24, r18
    191e:	76 2f       	mov	r23, r22
    1920:	6a 2f       	mov	r22, r26
    1922:	11 24       	eor	r1, r1
    1924:	9f 57       	subi	r25, 0x7F	; 127
    1926:	50 40       	sbci	r21, 0x00	; 0
    1928:	8a f0       	brmi	.+34     	; 0x194c <__mulsf3_pse+0x84>
    192a:	e1 f0       	breq	.+56     	; 0x1964 <__mulsf3_pse+0x9c>
    192c:	88 23       	and	r24, r24
    192e:	4a f0       	brmi	.+18     	; 0x1942 <__mulsf3_pse+0x7a>
    1930:	ee 0f       	add	r30, r30
    1932:	ff 1f       	adc	r31, r31
    1934:	bb 1f       	adc	r27, r27
    1936:	66 1f       	adc	r22, r22
    1938:	77 1f       	adc	r23, r23
    193a:	88 1f       	adc	r24, r24
    193c:	91 50       	subi	r25, 0x01	; 1
    193e:	50 40       	sbci	r21, 0x00	; 0
    1940:	a9 f7       	brne	.-22     	; 0x192c <__mulsf3_pse+0x64>
    1942:	9e 3f       	cpi	r25, 0xFE	; 254
    1944:	51 05       	cpc	r21, r1
    1946:	70 f0       	brcs	.+28     	; 0x1964 <__mulsf3_pse+0x9c>
    1948:	5c cf       	rjmp	.-328    	; 0x1802 <__fp_inf>
    194a:	a6 cf       	rjmp	.-180    	; 0x1898 <__fp_szero>
    194c:	5f 3f       	cpi	r21, 0xFF	; 255
    194e:	ec f3       	brlt	.-6      	; 0x194a <__mulsf3_pse+0x82>
    1950:	98 3e       	cpi	r25, 0xE8	; 232
    1952:	dc f3       	brlt	.-10     	; 0x194a <__mulsf3_pse+0x82>
    1954:	86 95       	lsr	r24
    1956:	77 95       	ror	r23
    1958:	67 95       	ror	r22
    195a:	b7 95       	ror	r27
    195c:	f7 95       	ror	r31
    195e:	e7 95       	ror	r30
    1960:	9f 5f       	subi	r25, 0xFF	; 255
    1962:	c1 f7       	brne	.-16     	; 0x1954 <__mulsf3_pse+0x8c>
    1964:	fe 2b       	or	r31, r30
    1966:	88 0f       	add	r24, r24
    1968:	91 1d       	adc	r25, r1
    196a:	96 95       	lsr	r25
    196c:	87 95       	ror	r24
    196e:	97 f9       	bld	r25, 7
    1970:	08 95       	ret

00001972 <calloc>:
    1972:	0f 93       	push	r16
    1974:	1f 93       	push	r17
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
    197a:	68 9f       	mul	r22, r24
    197c:	80 01       	movw	r16, r0
    197e:	69 9f       	mul	r22, r25
    1980:	10 0d       	add	r17, r0
    1982:	78 9f       	mul	r23, r24
    1984:	10 0d       	add	r17, r0
    1986:	11 24       	eor	r1, r1
    1988:	c8 01       	movw	r24, r16
    198a:	0d d0       	rcall	.+26     	; 0x19a6 <malloc>
    198c:	ec 01       	movw	r28, r24
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	21 f0       	breq	.+8      	; 0x199a <calloc+0x28>
    1992:	60 e0       	ldi	r22, 0x00	; 0
    1994:	70 e0       	ldi	r23, 0x00	; 0
    1996:	a8 01       	movw	r20, r16
    1998:	0b d1       	rcall	.+534    	; 0x1bb0 <memset>
    199a:	ce 01       	movw	r24, r28
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	1f 91       	pop	r17
    19a2:	0f 91       	pop	r16
    19a4:	08 95       	ret

000019a6 <malloc>:
    19a6:	cf 93       	push	r28
    19a8:	df 93       	push	r29
    19aa:	bc 01       	movw	r22, r24
    19ac:	82 30       	cpi	r24, 0x02	; 2
    19ae:	91 05       	cpc	r25, r1
    19b0:	10 f4       	brcc	.+4      	; 0x19b6 <malloc+0x10>
    19b2:	62 e0       	ldi	r22, 0x02	; 2
    19b4:	70 e0       	ldi	r23, 0x00	; 0
    19b6:	a0 91 5f 02 	lds	r26, 0x025F
    19ba:	b0 91 60 02 	lds	r27, 0x0260
    19be:	ed 01       	movw	r28, r26
    19c0:	e0 e0       	ldi	r30, 0x00	; 0
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	40 e0       	ldi	r20, 0x00	; 0
    19c6:	50 e0       	ldi	r21, 0x00	; 0
    19c8:	21 c0       	rjmp	.+66     	; 0x1a0c <malloc+0x66>
    19ca:	88 81       	ld	r24, Y
    19cc:	99 81       	ldd	r25, Y+1	; 0x01
    19ce:	86 17       	cp	r24, r22
    19d0:	97 07       	cpc	r25, r23
    19d2:	69 f4       	brne	.+26     	; 0x19ee <malloc+0x48>
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	9b 81       	ldd	r25, Y+3	; 0x03
    19d8:	30 97       	sbiw	r30, 0x00	; 0
    19da:	19 f0       	breq	.+6      	; 0x19e2 <malloc+0x3c>
    19dc:	93 83       	std	Z+3, r25	; 0x03
    19de:	82 83       	std	Z+2, r24	; 0x02
    19e0:	04 c0       	rjmp	.+8      	; 0x19ea <malloc+0x44>
    19e2:	90 93 60 02 	sts	0x0260, r25
    19e6:	80 93 5f 02 	sts	0x025F, r24
    19ea:	fe 01       	movw	r30, r28
    19ec:	34 c0       	rjmp	.+104    	; 0x1a56 <malloc+0xb0>
    19ee:	68 17       	cp	r22, r24
    19f0:	79 07       	cpc	r23, r25
    19f2:	38 f4       	brcc	.+14     	; 0x1a02 <malloc+0x5c>
    19f4:	41 15       	cp	r20, r1
    19f6:	51 05       	cpc	r21, r1
    19f8:	19 f0       	breq	.+6      	; 0x1a00 <malloc+0x5a>
    19fa:	84 17       	cp	r24, r20
    19fc:	95 07       	cpc	r25, r21
    19fe:	08 f4       	brcc	.+2      	; 0x1a02 <malloc+0x5c>
    1a00:	ac 01       	movw	r20, r24
    1a02:	fe 01       	movw	r30, r28
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	9b 81       	ldd	r25, Y+3	; 0x03
    1a08:	9c 01       	movw	r18, r24
    1a0a:	e9 01       	movw	r28, r18
    1a0c:	20 97       	sbiw	r28, 0x00	; 0
    1a0e:	e9 f6       	brne	.-70     	; 0x19ca <malloc+0x24>
    1a10:	41 15       	cp	r20, r1
    1a12:	51 05       	cpc	r21, r1
    1a14:	a9 f1       	breq	.+106    	; 0x1a80 <malloc+0xda>
    1a16:	ca 01       	movw	r24, r20
    1a18:	86 1b       	sub	r24, r22
    1a1a:	97 0b       	sbc	r25, r23
    1a1c:	04 97       	sbiw	r24, 0x04	; 4
    1a1e:	08 f4       	brcc	.+2      	; 0x1a22 <malloc+0x7c>
    1a20:	ba 01       	movw	r22, r20
    1a22:	e0 e0       	ldi	r30, 0x00	; 0
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	2a c0       	rjmp	.+84     	; 0x1a7c <malloc+0xd6>
    1a28:	8d 91       	ld	r24, X+
    1a2a:	9c 91       	ld	r25, X
    1a2c:	11 97       	sbiw	r26, 0x01	; 1
    1a2e:	84 17       	cp	r24, r20
    1a30:	95 07       	cpc	r25, r21
    1a32:	f9 f4       	brne	.+62     	; 0x1a72 <malloc+0xcc>
    1a34:	64 17       	cp	r22, r20
    1a36:	75 07       	cpc	r23, r21
    1a38:	81 f4       	brne	.+32     	; 0x1a5a <malloc+0xb4>
    1a3a:	12 96       	adiw	r26, 0x02	; 2
    1a3c:	8d 91       	ld	r24, X+
    1a3e:	9c 91       	ld	r25, X
    1a40:	13 97       	sbiw	r26, 0x03	; 3
    1a42:	30 97       	sbiw	r30, 0x00	; 0
    1a44:	19 f0       	breq	.+6      	; 0x1a4c <malloc+0xa6>
    1a46:	93 83       	std	Z+3, r25	; 0x03
    1a48:	82 83       	std	Z+2, r24	; 0x02
    1a4a:	04 c0       	rjmp	.+8      	; 0x1a54 <malloc+0xae>
    1a4c:	90 93 60 02 	sts	0x0260, r25
    1a50:	80 93 5f 02 	sts	0x025F, r24
    1a54:	fd 01       	movw	r30, r26
    1a56:	32 96       	adiw	r30, 0x02	; 2
    1a58:	4f c0       	rjmp	.+158    	; 0x1af8 <malloc+0x152>
    1a5a:	ca 01       	movw	r24, r20
    1a5c:	86 1b       	sub	r24, r22
    1a5e:	97 0b       	sbc	r25, r23
    1a60:	fd 01       	movw	r30, r26
    1a62:	e8 0f       	add	r30, r24
    1a64:	f9 1f       	adc	r31, r25
    1a66:	61 93       	st	Z+, r22
    1a68:	71 93       	st	Z+, r23
    1a6a:	02 97       	sbiw	r24, 0x02	; 2
    1a6c:	8d 93       	st	X+, r24
    1a6e:	9c 93       	st	X, r25
    1a70:	43 c0       	rjmp	.+134    	; 0x1af8 <malloc+0x152>
    1a72:	fd 01       	movw	r30, r26
    1a74:	82 81       	ldd	r24, Z+2	; 0x02
    1a76:	93 81       	ldd	r25, Z+3	; 0x03
    1a78:	9c 01       	movw	r18, r24
    1a7a:	d9 01       	movw	r26, r18
    1a7c:	10 97       	sbiw	r26, 0x00	; 0
    1a7e:	a1 f6       	brne	.-88     	; 0x1a28 <malloc+0x82>
    1a80:	80 91 5d 02 	lds	r24, 0x025D
    1a84:	90 91 5e 02 	lds	r25, 0x025E
    1a88:	89 2b       	or	r24, r25
    1a8a:	41 f4       	brne	.+16     	; 0x1a9c <malloc+0xf6>
    1a8c:	80 91 02 01 	lds	r24, 0x0102
    1a90:	90 91 03 01 	lds	r25, 0x0103
    1a94:	90 93 5e 02 	sts	0x025E, r25
    1a98:	80 93 5d 02 	sts	0x025D, r24
    1a9c:	40 91 04 01 	lds	r20, 0x0104
    1aa0:	50 91 05 01 	lds	r21, 0x0105
    1aa4:	41 15       	cp	r20, r1
    1aa6:	51 05       	cpc	r21, r1
    1aa8:	41 f4       	brne	.+16     	; 0x1aba <malloc+0x114>
    1aaa:	4d b7       	in	r20, 0x3d	; 61
    1aac:	5e b7       	in	r21, 0x3e	; 62
    1aae:	80 91 00 01 	lds	r24, 0x0100
    1ab2:	90 91 01 01 	lds	r25, 0x0101
    1ab6:	48 1b       	sub	r20, r24
    1ab8:	59 0b       	sbc	r21, r25
    1aba:	20 91 5d 02 	lds	r18, 0x025D
    1abe:	30 91 5e 02 	lds	r19, 0x025E
    1ac2:	24 17       	cp	r18, r20
    1ac4:	35 07       	cpc	r19, r21
    1ac6:	b0 f4       	brcc	.+44     	; 0x1af4 <malloc+0x14e>
    1ac8:	ca 01       	movw	r24, r20
    1aca:	82 1b       	sub	r24, r18
    1acc:	93 0b       	sbc	r25, r19
    1ace:	86 17       	cp	r24, r22
    1ad0:	97 07       	cpc	r25, r23
    1ad2:	80 f0       	brcs	.+32     	; 0x1af4 <malloc+0x14e>
    1ad4:	ab 01       	movw	r20, r22
    1ad6:	4e 5f       	subi	r20, 0xFE	; 254
    1ad8:	5f 4f       	sbci	r21, 0xFF	; 255
    1ada:	84 17       	cp	r24, r20
    1adc:	95 07       	cpc	r25, r21
    1ade:	50 f0       	brcs	.+20     	; 0x1af4 <malloc+0x14e>
    1ae0:	42 0f       	add	r20, r18
    1ae2:	53 1f       	adc	r21, r19
    1ae4:	50 93 5e 02 	sts	0x025E, r21
    1ae8:	40 93 5d 02 	sts	0x025D, r20
    1aec:	f9 01       	movw	r30, r18
    1aee:	61 93       	st	Z+, r22
    1af0:	71 93       	st	Z+, r23
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <malloc+0x152>
    1af4:	e0 e0       	ldi	r30, 0x00	; 0
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	cf 01       	movw	r24, r30
    1afa:	df 91       	pop	r29
    1afc:	cf 91       	pop	r28
    1afe:	08 95       	ret

00001b00 <free>:
    1b00:	cf 93       	push	r28
    1b02:	df 93       	push	r29
    1b04:	00 97       	sbiw	r24, 0x00	; 0
    1b06:	09 f4       	brne	.+2      	; 0x1b0a <free+0xa>
    1b08:	50 c0       	rjmp	.+160    	; 0x1baa <free+0xaa>
    1b0a:	ec 01       	movw	r28, r24
    1b0c:	22 97       	sbiw	r28, 0x02	; 2
    1b0e:	1b 82       	std	Y+3, r1	; 0x03
    1b10:	1a 82       	std	Y+2, r1	; 0x02
    1b12:	a0 91 5f 02 	lds	r26, 0x025F
    1b16:	b0 91 60 02 	lds	r27, 0x0260
    1b1a:	10 97       	sbiw	r26, 0x00	; 0
    1b1c:	09 f1       	breq	.+66     	; 0x1b60 <free+0x60>
    1b1e:	40 e0       	ldi	r20, 0x00	; 0
    1b20:	50 e0       	ldi	r21, 0x00	; 0
    1b22:	ac 17       	cp	r26, r28
    1b24:	bd 07       	cpc	r27, r29
    1b26:	08 f1       	brcs	.+66     	; 0x1b6a <free+0x6a>
    1b28:	bb 83       	std	Y+3, r27	; 0x03
    1b2a:	aa 83       	std	Y+2, r26	; 0x02
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	21 91       	ld	r18, Z+
    1b30:	31 91       	ld	r19, Z+
    1b32:	e2 0f       	add	r30, r18
    1b34:	f3 1f       	adc	r31, r19
    1b36:	ae 17       	cp	r26, r30
    1b38:	bf 07       	cpc	r27, r31
    1b3a:	79 f4       	brne	.+30     	; 0x1b5a <free+0x5a>
    1b3c:	8d 91       	ld	r24, X+
    1b3e:	9c 91       	ld	r25, X
    1b40:	11 97       	sbiw	r26, 0x01	; 1
    1b42:	28 0f       	add	r18, r24
    1b44:	39 1f       	adc	r19, r25
    1b46:	2e 5f       	subi	r18, 0xFE	; 254
    1b48:	3f 4f       	sbci	r19, 0xFF	; 255
    1b4a:	39 83       	std	Y+1, r19	; 0x01
    1b4c:	28 83       	st	Y, r18
    1b4e:	12 96       	adiw	r26, 0x02	; 2
    1b50:	8d 91       	ld	r24, X+
    1b52:	9c 91       	ld	r25, X
    1b54:	13 97       	sbiw	r26, 0x03	; 3
    1b56:	9b 83       	std	Y+3, r25	; 0x03
    1b58:	8a 83       	std	Y+2, r24	; 0x02
    1b5a:	41 15       	cp	r20, r1
    1b5c:	51 05       	cpc	r21, r1
    1b5e:	71 f4       	brne	.+28     	; 0x1b7c <free+0x7c>
    1b60:	d0 93 60 02 	sts	0x0260, r29
    1b64:	c0 93 5f 02 	sts	0x025F, r28
    1b68:	20 c0       	rjmp	.+64     	; 0x1baa <free+0xaa>
    1b6a:	12 96       	adiw	r26, 0x02	; 2
    1b6c:	8d 91       	ld	r24, X+
    1b6e:	9c 91       	ld	r25, X
    1b70:	13 97       	sbiw	r26, 0x03	; 3
    1b72:	ad 01       	movw	r20, r26
    1b74:	00 97       	sbiw	r24, 0x00	; 0
    1b76:	11 f0       	breq	.+4      	; 0x1b7c <free+0x7c>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	d3 cf       	rjmp	.-90     	; 0x1b22 <free+0x22>
    1b7c:	fa 01       	movw	r30, r20
    1b7e:	d3 83       	std	Z+3, r29	; 0x03
    1b80:	c2 83       	std	Z+2, r28	; 0x02
    1b82:	21 91       	ld	r18, Z+
    1b84:	31 91       	ld	r19, Z+
    1b86:	e2 0f       	add	r30, r18
    1b88:	f3 1f       	adc	r31, r19
    1b8a:	ce 17       	cp	r28, r30
    1b8c:	df 07       	cpc	r29, r31
    1b8e:	69 f4       	brne	.+26     	; 0x1baa <free+0xaa>
    1b90:	88 81       	ld	r24, Y
    1b92:	99 81       	ldd	r25, Y+1	; 0x01
    1b94:	28 0f       	add	r18, r24
    1b96:	39 1f       	adc	r19, r25
    1b98:	2e 5f       	subi	r18, 0xFE	; 254
    1b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9c:	fa 01       	movw	r30, r20
    1b9e:	31 83       	std	Z+1, r19	; 0x01
    1ba0:	20 83       	st	Z, r18
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba6:	93 83       	std	Z+3, r25	; 0x03
    1ba8:	82 83       	std	Z+2, r24	; 0x02
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	08 95       	ret

00001bb0 <memset>:
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	01 c0       	rjmp	.+2      	; 0x1bb6 <memset+0x6>
    1bb4:	6d 93       	st	X+, r22
    1bb6:	41 50       	subi	r20, 0x01	; 1
    1bb8:	50 40       	sbci	r21, 0x00	; 0
    1bba:	e0 f7       	brcc	.-8      	; 0x1bb4 <memset+0x4>
    1bbc:	08 95       	ret

00001bbe <_exit>:
    1bbe:	f8 94       	cli

00001bc0 <__stop_program>:
    1bc0:	ff cf       	rjmp	.-2      	; 0x1bc0 <__stop_program>
